##############
# OAS Config #
##############

"OpenApi::TITLE": Dropbox Sign API
"OpenApi::DESCRIPTION": Dropbox Sign v3 API
"OpenApi::AUTH::API_KEY": |-
  Your API key can be used to make calls to the Dropbox Sign API. See [Authentication](/api/reference/authentication) for more information.
  ✅ Supported by Try it console (calls sent in `test_mode` only).
"OpenApi::AUTH::OAUTH": |-
  You can use an Access Token issued through an OAuth flow to send calls to the Dropbox Sign API from your app. The access scopes required by this endpoint are listed in the gray box above. See [Authentication](/api/reference/authentication) for more information.
  ❌ **Not supported** by Try it console.
"OpenApi::TAG::ACCOUNT::DESCRIPTION": ./markdown/en/tags/account-tag-description.md
"OpenApi::TAG::API_APP::DESCRIPTION": ./markdown/en/tags/api-app-tag-description.md
"OpenApi::TAG::BULK_SEND_JOB::DESCRIPTION": ./markdown/en/tags/bulk-send-job-tag-description.md
"OpenApi::TAG::EMBEDDED::DESCRIPTION": ./markdown/en/tags/embedded-tag-description.md
"OpenApi::TAG::REPORT::DESCRIPTION": ./markdown/en/tags/report-tag-description.md
"OpenApi::TAG::SIGNATURE_REQUEST::DESCRIPTION": ./markdown/en/tags/signature-request-tag-description.md
"OpenApi::TAG::TEAM::DESCRIPTION": ./markdown/en/tags/team-tag-description.md
"OpenApi::TAG::TEMPLATE::DESCRIPTION": ./markdown/en/tags/template-tag-description.md
"OpenApi::TAG::UNCLAIMED_DRAFT::DESCRIPTION": ./markdown/en/tags/unclaimed-draft-tag-description.md
"OpenApi::TAG::OAUTH::DESCRIPTION": ./markdown/en/tags/oauth-tag-description.md
"OpenApi::TAG::CALLBACKS_AND_EVENTS::DESCRIPTION": ./markdown/en/tags/callbacks-tag-description.md

"OpenApi::ACCOUNT_CALLBACK::SUMMARY": Account Callbacks
"OpenApi::ACCOUNT_CALLBACK::DESCRIPTION": ./markdown/en/descriptions/account-callback-description.md

"OpenApi::APP_CALLBACK::SUMMARY": App Callbacks
"OpenApi::APP_CALLBACK::DESCRIPTION": ./markdown/en/descriptions/api-app-callback-description.md

##################
# Request Models #
##################

"AccountCreate::DESCRIPTION": Creates a new Dropbox Sign Account that is associated with the specified `email_address`.
"AccountCreate::SUMMARY": Create Account
"AccountCreate::CLIENT_ID": |-
  Used when creating a new account with OAuth authorization.

  See [OAuth 2.0 Authorization](https://app.hellosign.com/api/oauthWalkthrough#OAuthAuthorization)
"AccountCreate::CLIENT_SECRET": |-
  Used when creating a new account with OAuth authorization.

  See [OAuth 2.0 Authorization](https://app.hellosign.com/api/oauthWalkthrough#OAuthAuthorization)
"AccountCreate::EMAIL_ADDRESS": The email address which will be associated with the new Account.
"AccountCreate::LOCALE": The locale used in this Account. Check out the list of [supported locales](/api/reference/constants/#supported-locales) to learn more about the possible values.

"AccountGet::DESCRIPTION": Returns the properties and settings of your Account.
"AccountGet::SUMMARY": Get Account
"AccountGet::ACCOUNT_ID": |-
  `account_id` or `email_address` is required. If both are provided, the account id prevails.

  The ID of the Account.
"AccountGet::EMAIL_ADDRESS": |-
  `account_id` or `email_address` is required, If both are provided, the account id prevails.

  The email address of the Account.
"AccountUpdate::SUMMARY": Update Account
"AccountUpdate::DESCRIPTION": Updates the properties and settings of your Account. Currently only allows for updates to the [Callback URL](/api/reference/tag/Callbacks-and-Events) and locale.
"AccountUpdate::ACCOUNT_ID": The ID of the Account
"AccountUpdate::CALLBACK_URL": The URL that Dropbox Sign should POST events to.
"AccountUpdate::LOCALE": The locale used in this Account. Check out the list of [supported locales](/api/reference/constants/#supported-locales) to learn more about the possible values.

"AccountVerify::SUMMARY": Verify Account
"AccountVerify::DESCRIPTION": |-
  Verifies whether an Dropbox Sign Account exists for the given email address.
"AccountVerify::EMAIL_ADDRESS": Email address to run the verification for.

"ApiAppCreate::SUMMARY": Create API App
"ApiAppCreate::DESCRIPTION": Creates a new API App.
"ApiAppCreate::CALLBACK_URL": The URL at which the ApiApp should receive event callbacks.
"ApiAppCreate::CUSTOM_LOGO_FILE": An image file to use as a custom logo in embedded contexts. (Only applies to some API plans)
"ApiAppCreate::DOMAINS": The domain names the ApiApp will be associated with.
"ApiAppCreate::NAME": The name you want to assign to the ApiApp.

"ApiAppDelete::SUMMARY": Delete API App
"ApiAppDelete::DESCRIPTION": Deletes an API App. Can only be invoked for apps you own.
"ApiAppDelete::CLIENT_ID": The client id of the API App to delete.

"ApiAppGet::SUMMARY": Get API App
"ApiAppGet::DESCRIPTION": Returns an object with information about an API App.
"ApiAppGet::CLIENT_ID": The client id of the API App to retrieve.

"ApiAppList::SUMMARY": List API Apps
"ApiAppList::DESCRIPTION": Returns a list of API Apps that are accessible by you. If you are on a team with an Admin or Developer role, this list will include apps owned by teammates.
"ApiAppList::PAGE": Which page number of the API App List to return. Defaults to `1`.
"ApiAppList::PAGE_SIZE": Number of objects to be returned per page. Must be between `1` and `100`. Default is `20`.

"ApiAppUpdate::SUMMARY": Update API App
"ApiAppUpdate::DESCRIPTION": Updates an existing API App. Can only be invoked for apps you own. Only the fields you provide will be updated. If you wish to clear an existing optional field, provide an empty string.
"ApiAppUpdate::CALLBACK_URL": The URL at which the API App should receive event callbacks.
"ApiAppUpdate::CLIENT_ID": The client id of the API App to update.
"ApiAppUpdate::CUSTOM_LOGO_FILE": An image file to use as a custom logo in embedded contexts. (Only applies to some API plans)
"ApiAppUpdate::DOMAINS": The domain names the ApiApp will be associated with.
"ApiAppUpdate::NAME": The name you want to assign to the ApiApp.
"ApiAppUpdate::PAGE_SIZE": Number of objects to be returned per page. Must be between `1` and `100`. Default is `20`.

"BulkSendJobGet::SUMMARY": Get Bulk Send Job
"BulkSendJobGet::DESCRIPTION": Returns the status of the BulkSendJob and its SignatureRequests specified by the `bulk_send_job_id` parameter.
"BulkSendJobGet::BULK_SEND_JOB_ID": The id of the BulkSendJob to retrieve.

"BulkSendJobList::SUMMARY": List Bulk Send Jobs
"BulkSendJobList::DESCRIPTION": Returns a list of BulkSendJob that you can access.
"BulkSendJobList::PAGE": Which page number of the BulkSendJob List to return. Defaults to `1`.
"BulkSendJobList::PAGE_SIZE": Number of objects to be returned per page. Must be between `1` and `100`. Default is 20.

"EmbeddedEditUrl::SUMMARY": Get Embedded Template Edit URL
"EmbeddedEditUrl::DESCRIPTION": Retrieves an embedded object containing a template url that can be opened in an iFrame. Note that only templates created via the embedded template process are available to be edited with this endpoint.
"EmbeddedEditUrl::ALLOW_EDIT_CCS": This allows the requester to enable/disable to add or change CC roles when editing the template.
"EmbeddedEditUrl::CC_ROLES": The CC roles that must be assigned when using the template to send a signature request. To remove all CC roles, pass in a single role with no name. For use in a POST request.
"EmbeddedEditUrl::FORCE_SIGNER_ROLES": Provide users the ability to review/edit the template signer roles.
"EmbeddedEditUrl::FORCE_SUBJECT_MESSAGE": Provide users the ability to review/edit the template subject and message.
"EmbeddedEditUrl::MERGE_FIELDS": |-
  Add additional merge fields to the template, which can be used used to pre-fill data by passing values into signature requests made with that template.

  Remove all merge fields on the template by passing an empty array `[]`.
"EmbeddedEditUrl::PREVIEW_ONLY": |-
  This allows the requester to enable the preview experience (i.e. does not allow the requester's end user to add any additional fields via the editor).

  **Note**: This parameter overwrites `show_preview=true` (if set).
"EmbeddedEditUrl::SHOW_PREVIEW": This allows the requester to enable the editor/preview experience.
"EmbeddedEditUrl::SHOW_PROGRESS_STEPPER": When only one step remains in the signature request process and this parameter is set to `false` then the progress stepper will be hidden.
"EmbeddedEditUrl::TEMPLATE_ID": The id of the template to edit.
"EmbeddedEditUrl::TEST_MODE": Whether this is a test, locked templates will only be available for editing if this is set to `true`. Defaults to `false`.

"EmbeddedSignUrl::SUMMARY": Get Embedded Sign URL
"EmbeddedSignUrl::DESCRIPTION": Retrieves an embedded object containing a signature url that can be opened in an iFrame. Note that templates created via the embedded template process will only be accessible through the API.
"EmbeddedSignUrl::SIGNATURE_ID": The id of the signature to get a signature url for.

"OAuthTokenGenerate::SUMMARY": OAuth Token Generate
"OAuthTokenGenerate::DESCRIPTION": Once you have retrieved the code from the user callback, you will need to exchange it for an access token via a backend call.
"OAuthTokenGenerate::CLIENT_ID": The client id of the app requesting authorization.
"OAuthTokenGenerate::CLIENT_SECRET": The secret token of your app.
"OAuthTokenGenerate::CODE": The code passed to your callback when the user granted access.
"OAuthTokenGenerate::GRANT_TYPE": When generating a new token use `authorization_code`.
"OAuthTokenGenerate::STATE": Same as the state you specified earlier.

"OAuthTokenRefresh::SUMMARY": OAuth Token Refresh
"OAuthTokenRefresh::DESCRIPTION": Access tokens are only valid for a given period of time (typically one hour) for security reasons. Whenever acquiring an new access token its TTL is also given (see `expires_in`), along with a refresh token that can be used to acquire a new access token after the current one has expired.
"OAuthTokenRefresh::GRANT_TYPE": When refreshing an existing token use `refresh_token`.
"OAuthTokenRefresh::REFRESH_TOKEN": The token provided when you got the expired access token.

"ReportCreate::SUMMARY": Create Report
"ReportCreate::DESCRIPTION": |-
  Request the creation of one or more report(s).

  When the report(s) have been generated, you will receive an email (one per requested report type) containing a link to download the report as a CSV file. The requested date range may be up to 12 months in duration, and `start_date` must not be more than 10 years in the past.
"ReportCreate::END_DATE": The (inclusive) end date for the report data in `MM/DD/YYYY` format.
"ReportCreate::REPORT_TYPE": The type(s) of the report you are requesting. Allowed values are `user_activity` and `document_status`. User activity reports contain list of all users and their activity during the specified date range. Document status report contain a list of signature requests created in the specified time range (and their status).
"ReportCreate::START_DATE": The (inclusive) start date for the report data in `MM/DD/YYYY` format.

"SignatureRequestBulkCreateEmbeddedWithTemplate::SUMMARY": Embedded Bulk Send with Template
"SignatureRequestBulkCreateEmbeddedWithTemplate::DESCRIPTION": |-
  Creates BulkSendJob which sends up to 250 SignatureRequests in bulk based off of the provided Template(s) specified with the `template_ids` parameter to be signed in an embedded iFrame. These embedded signature requests can only be signed in embedded iFrames whereas normal signature requests can only be signed on Dropbox Sign.

  **NOTE**: Only available for Standard plan and higher.
"SignatureRequestBulkCreateEmbeddedWithTemplate::ALLOW_DECLINE": Allows signers to decline to sign a document if `true`. Defaults to `false`.
"SignatureRequestBulkCreateEmbeddedWithTemplate::CLIENT_ID": Client id of the app you're using to create this embedded signature request. Used for security purposes.
"SignatureRequestBulkCreateEmbeddedWithTemplate::MESSAGE": The custom message in the email that will be sent to the signers.
"SignatureRequestBulkCreateEmbeddedWithTemplate::SIGNER_FILE": |-
  `signer_file` is a CSV file defining values and options for signer fields. Required unless a `signer_list` is used, you may not use both. The CSV can have the following columns:

  - `name`: the name of the signer filling the role of RoleName
  - `email_address`: email address of the signer filling the role of RoleName
  - `pin`: the 4- to 12-character access code that will secure this signer's signature page (optional)
  - `sms_phone_number`: An E.164 formatted phone number that will receive a code via SMS to access this signer's signature page. (optional)

      **Note**: Not available in test mode and requires a Standard plan or higher.
  - `*_field`: any column with a _field" suffix will be treated as a custom field (optional)

      You may only specify field values here, any other options should be set in the custom_fields request parameter.

  Example CSV:

  ```
  name, email_address, pin, company_field
  George, george@example.com, d79a3td, ABC Corp
  Mary, mary@example.com, gd9as5b, 123 LLC
  ```
"SignatureRequestBulkCreateEmbeddedWithTemplate::SIGNER_LIST": "`signer_list` is an array defining values and options for signer fields. Required unless a `signer_file` is used, you may not use both."
"SignatureRequestBulkCreateEmbeddedWithTemplate::SIGNING_REDIRECT_URL": The URL you want signers redirected to after they successfully sign.
"SignatureRequestBulkCreateEmbeddedWithTemplate::SUBJECT": The subject in the email that will be sent to the signers.
"SignatureRequestBulkCreateEmbeddedWithTemplate::TEMPLATE_IDS": Use `template_ids` to create a SignatureRequest from one or more templates, in the order in which the template will be used.
"SignatureRequestBulkCreateEmbeddedWithTemplate::TEST_MODE": Whether this is a test, the signature request will not be legally binding if set to `true`. Defaults to `false`.
"SignatureRequestBulkCreateEmbeddedWithTemplate::TITLE": The title you want to assign to the SignatureRequest.

"SignatureRequestBulkSendWithTemplate::SUMMARY": Bulk Send with Template
"SignatureRequestBulkSendWithTemplate::DESCRIPTION": |-
  Creates BulkSendJob which sends up to 250 SignatureRequests in bulk based off of the provided Template(s) specified with the `template_ids` parameter.

  **NOTE**: Only available for Standard plan and higher.
"SignatureRequestBulkSendWithTemplate::ALLOW_DECLINE": Allows signers to decline to sign a document if `true`. Defaults to `false`.
"SignatureRequestBulkSendWithTemplate::MESSAGE": The custom message in the email that will be sent to the signers.
"SignatureRequestBulkSendWithTemplate::SIGNER_FILE": |-
  `signer_file` is a CSV file defining values and options for signer fields. Required unless a `signer_list` is used, you may not use both. The CSV can have the following columns:

  - `name`: the name of the signer filling the role of RoleName
  - `email_address`: email address of the signer filling the role of RoleName
  - `pin`: the 4- to 12-character access code that will secure this signer's signature page (optional)
  - `sms_phone_number`: An E.164 formatted phone number that will receive a code via SMS to access this signer's signature page. (optional)

      **Note**: Not available in test mode and requires a Standard plan or higher.
  - `*_field`: any column with a _field" suffix will be treated as a custom field (optional)

      You may only specify field values here, any other options should be set in the custom_fields request parameter.

  Example CSV:

  ```
  name, email_address, pin, company_field
  George, george@example.com, d79a3td, ABC Corp
  Mary, mary@example.com, gd9as5b, 123 LLC
  ```
"SignatureRequestBulkSendWithTemplate::SIGNER_LIST": "`signer_list` is an array defining values and options for signer fields. Required unless a `signer_file` is used, you may not use both."
"SignatureRequestBulkSendWithTemplate::SIGNING_REDIRECT_URL": The URL you want signers redirected to after they successfully sign.
"SignatureRequestBulkSendWithTemplate::SUBJECT": The subject in the email that will be sent to the signers.
"SignatureRequestBulkSendWithTemplate::TEMPLATE_IDS": Use `template_ids` to create a SignatureRequest from one or more templates, in the order in which the template will be used.
"SignatureRequestBulkSendWithTemplate::TEST_MODE": Whether this is a test, the signature request will not be legally binding if set to `true`. Defaults to `false`.
"SignatureRequestBulkSendWithTemplate::TITLE": The title you want to assign to the SignatureRequest.
"SignatureRequestBulkSendWithTemplate::CLIENT_ID" : The client id of the API App you want to associate with this request. Used to apply the branding and callback url defined for the app.

"SignatureRequestCancel::SUMMARY": Cancel Incomplete Signature Request
"SignatureRequestCancel::DESCRIPTION": |-
  Cancels an incomplete signature request. This action is **not reversible**.

  The request will be canceled and signers will no longer be able to sign. If they try to access the signature request they will receive a HTTP 410 status code indicating that the resource has been deleted. Cancelation is asynchronous and a successful call to this endpoint will return an empty 200 OK response if the signature request is eligible to be canceled and has been successfully queued.

  This 200 OK response does not indicate a successful cancelation of the signature request itself. The cancelation is confirmed via the `signature_request_canceled` event. It is recommended that a  [callback handler](/api/reference/tag/Callbacks-and-Events) be implemented to listen for the `signature_request_canceled` event. This callback will be sent only when the cancelation has completed successfully. If a callback handler has been configured and the event has not been received within 60 minutes of making the call, check the status of the request in the [API Dashboard](https://app.hellosign.com/apidashboard) and retry the cancelation if necessary.

  To be eligible for cancelation, a signature request must have been sent successfully, must not yet have been signed by all signers, and you must either be the sender or own the API app under which it was sent. A partially signed signature request can be canceled.

  **NOTE**: To remove your access to a completed signature request, use the endpoint: `POST /signature_request/remove/[:signature_request_id]`.
"SignatureRequestCancel::SIGNATURE_REQUEST_ID": The id of the incomplete SignatureRequest to cancel.

"SignatureRequestCreateEmbedded::SUMMARY": Create Embedded Signature Request
"SignatureRequestCreateEmbedded::DESCRIPTION": Creates a new SignatureRequest with the submitted documents to be signed in an embedded iFrame. If form_fields_per_document is not specified, a signature page will be affixed where all signers will be required to add their signature, signifying their agreement to all contained documents. <u>Note</u> that embedded signature requests can only be signed in embedded iFrames whereas normal signature requests can only be signed on Dropbox Sign.
"SignatureRequestCreateEmbedded::ALLOW_DECLINE": Allows signers to decline to sign a document if `true`. Defaults to `false`.
"SignatureRequestCreateEmbedded::ALLOW_REASSIGN": |-
  Allows signers to reassign their signature requests to other signers if set to `true`. Defaults to `false`.

  **Note**: Only available for Premium plan.
"SignatureRequestCreateEmbedded::CC_EMAIL_ADDRESSES": The email addresses that should be CCed.
"SignatureRequestCreateEmbedded::CLIENT_ID": Client id of the app you're using to create this embedded signature request. Used for security purposes.
"SignatureRequestCreateEmbedded::FILES": |-
  Use `files[]` to indicate the uploaded file(s) to send for signature.

  This endpoint requires either **files** or **file_urls[]**, but not both.
"SignatureRequestCreateEmbedded::FILE_URLS": |-
  Use `file_urls[]` to have Dropbox Sign download the file(s) to send for signature.

  This endpoint requires either **files** or **file_urls[]**, but not both.
"SignatureRequestCreateEmbedded::EXPIRES_AT": When the signature request will expire. Unsigned signatures will be moved to the expired status, and no longer signable. See [Signature Request Expiration Date](https://developers.hellosign.com/docs/signature-request/expiration/) for details.
"SignatureRequestCreateEmbedded::HIDE_TEXT_TAGS": |-
  Enables automatic Text Tag removal when set to true.

  **NOTE**: Removing text tags this way can cause unwanted clipping. We recommend leaving this setting on `false` and instead hiding your text tags using white text or a similar approach. See the [Text Tags Walkthrough](https://app.hellosign.com/api/textTagsWalkthrough#TextTagIntro) for more information.
"SignatureRequestCreateEmbedded::POPULATE_AUTO_FILL_FIELDS": |-
  Controls whether [auto fill fields](https://faq.hellosign.com/hc/en-us/articles/360051467511-Auto-Fill-Fields) can automatically populate a signer's information during signing.

  ⚠️ **Note** ⚠️: Keep your signer's information safe by ensuring that the _signer on your signature request is the intended party_ before using this feature.
"SignatureRequestCreateEmbedded::MESSAGE": The custom message in the email that will be sent to the signers.
"SignatureRequestCreateEmbedded::SUBJECT": The subject in the email that will be sent to the signers.
"SignatureRequestCreateEmbedded::TEST_MODE": Whether this is a test, the signature request will not be legally binding if set to `true`. Defaults to `false`.
"SignatureRequestCreateEmbedded::TITLE": The title you want to assign to the SignatureRequest.
"SignatureRequestCreateEmbedded::USE_TEXT_TAGS": Send with a value of `true` if you wish to enable [Text Tags](https://app.hellosign.com/api/textTagsWalkthrough#TextTagIntro) parsing in your document. Defaults to disabled, or `false`.

"SignatureRequestCreateEmbeddedWithTemplate::SUMMARY": Create Embedded Signature Request with Template
"SignatureRequestCreateEmbeddedWithTemplate::DESCRIPTION": Creates a new SignatureRequest based on the given Template(s) to be signed in an embedded iFrame. <u>Note</u> that embedded signature requests can only be signed in embedded iFrames whereas normal signature requests can only be signed on Dropbox Sign.
"SignatureRequestCreateEmbeddedWithTemplate::ALLOW_DECLINE": Allows signers to decline to sign a document if `true`. Defaults to `false`.
"SignatureRequestCreateEmbeddedWithTemplate::CLIENT_ID": Client id of the app you're using to create this embedded signature request. Used for security purposes.
"SignatureRequestCreateEmbeddedWithTemplate::FILES": |-
  Use `files[]` to indicate the uploaded file(s) to send for signature.

  This endpoint requires either **files** or **file_urls[]**, but not both.
"SignatureRequestCreateEmbeddedWithTemplate::FILE_URLS": |-
  Use `file_urls[]` to have Dropbox Sign download the file(s) to send for signature.

  This endpoint requires either **files** or **file_urls[]**, but not both.
"SignatureRequestCreateEmbeddedWithTemplate::MESSAGE": The custom message in the email that will be sent to the signers.
"SignatureRequestCreateEmbeddedWithTemplate::SUBJECT": The subject in the email that will be sent to the signers.
"SignatureRequestCreateEmbeddedWithTemplate::TEMPLATE_IDS": Use `template_ids` to create a SignatureRequest from one or more templates, in the order in which the template will be used.
"SignatureRequestCreateEmbeddedWithTemplate::TEST_MODE": Whether this is a test, the signature request will not be legally binding if set to `true`. Defaults to `false`.
"SignatureRequestCreateEmbeddedWithTemplate::TITLE": The title you want to assign to the SignatureRequest.
"SignatureRequestCreateEmbeddedWithTemplate::POPULATE_AUTO_FILL_FIELDS": |-
  Controls whether [auto fill fields](https://faq.hellosign.com/hc/en-us/articles/360051467511-Auto-Fill-Fields) can automatically populate a signer's information during signing.

  ⚠️ **Note** ⚠️: Keep your signer's information safe by ensuring that the _signer on your signature request is the intended party_ before using this feature.
"SignatureRequestFiles::SUMMARY": Download Files
"SignatureRequestFiles::DESCRIPTION": |-
  Obtain a copy of the current documents specified by the `signature_request_id` parameter. Returns a PDF or ZIP file.

  If the files are currently being prepared, a status code of `409` will be returned instead.
"SignatureRequestFilesAsFileUrl::SUMMARY": Download Files as File Url
"SignatureRequestFilesAsFileUrl::DESCRIPTION": |-
  Obtain a copy of the current documents specified by the `signature_request_id` parameter. Returns a JSON object with a url to the file (PDFs only).

  If the files are currently being prepared, a status code of `409` will be returned instead.

"SignatureRequestFilesAsDataUri::SUMMARY": Download Files as Data Uri
"SignatureRequestFilesAsDataUri::DESCRIPTION": |-
  Obtain a copy of the current documents specified by the `signature_request_id` parameter. Returns a JSON object with a `data_uri` representing the base64 encoded file (PDFs only).

  If the files are currently being prepared, a status code of `409` will be returned instead.
"SignatureRequestFiles::SIGNATURE_REQUEST_ID": The id of the SignatureRequest to retrieve.
"SignatureRequestFiles::FILE_TYPE": Set to `pdf` for a single merged document or `zip` for a collection of individual documents.
"SignatureRequestFiles::GET_DATA_URI": If `true`, the response will contain the file as base64 encoded string. Base64 encoding is only available for PDFs.
"SignatureRequestFiles::GET_URL": If `true`, the response will contain a url link to the file instead. Links are only available for PDFs and have a TTL of 3 days.

"SignatureRequestGet::SUMMARY": Get Signature Request
"SignatureRequestGet::DESCRIPTION": Returns the status of the SignatureRequest specified by the `signature_request_id` parameter.
"SignatureRequestGet::SIGNATURE_REQUEST_ID": The id of the SignatureRequest to retrieve.

"SignatureRequestList::SUMMARY": List Signature Requests
"SignatureRequestList::DESCRIPTION": |-
  Returns a list of SignatureRequests that you can access. This includes SignatureRequests you have sent as well as received, but not ones that you have been CCed on.

  Take a look at our [search guide](/api/reference/search/) to learn more about querying signature requests.
"SignatureRequestList::ACCOUNT_ID": Which account to return SignatureRequests for. Must be a team member. Use `all` to indicate all team members. Defaults to your account.
"SignatureRequestList::PAGE": Which page number of the SignatureRequest List to return. Defaults to `1`.
"SignatureRequestList::PAGE_SIZE": Number of objects to be returned per page. Must be between `1` and `100`. Default is `20`.
"SignatureRequestList::QUERY": String that includes search terms and/or fields to be used to filter the SignatureRequest objects.

"SignatureRequestReleaseHold::SUMMARY": Release On-Hold Signature Request
"SignatureRequestReleaseHold::DESCRIPTION": Releases a held SignatureRequest that was claimed and prepared from an [UnclaimedDraft](/api/reference/tag/Unclaimed-Draft). The owner of the Draft must indicate at Draft creation that the SignatureRequest created from the Draft should be held. Releasing the SignatureRequest will send requests to all signers.
"SignatureRequestReleaseHold::SIGNATURE_REQUEST_ID": The id of the SignatureRequest to release.

"SignatureRequestRemind::SUMMARY": Send Request Reminder
"SignatureRequestRemind::DESCRIPTION": |-
  Sends an email to the signer reminding them to sign the signature request. You cannot send a reminder within 1 hour of the last reminder that was sent. This includes manual AND automatic reminders.

  **NOTE**: This action can **not** be used with embedded signature requests.
"SignatureRequestRemind::EMAIL_ADDRESS": The email address of the signer to send a reminder to.
"SignatureRequestRemind::NAME": The name of the signer to send a reminder to. Include if two or more
  signers share an email address.
"SignatureRequestRemind::SIGNATURE_REQUEST_ID": The id of the SignatureRequest to send a reminder for.

"SignatureRequestRemove::SUMMARY": Remove Signature Request Access
"SignatureRequestRemove::DESCRIPTION": |-
  Removes your access to a completed signature request. This action is **not reversible**.

  The signature request must be fully executed by all parties (signed or declined to sign). Other parties will continue to maintain access to the completed signature request document(s).

  Unlike /signature_request/cancel, this endpoint is synchronous and your access will be immediately removed. Upon successful removal, this endpoint will return a 200 OK response.
"SignatureRequestRemove::SIGNATURE_REQUEST_ID": The id of the SignatureRequest to remove.

"SignatureRequestSend::SUMMARY": Send Signature Request
"SignatureRequestSend::DESCRIPTION": Creates and sends a new SignatureRequest with the submitted documents. If `form_fields_per_document` is not specified, a signature page will be affixed where all signers will be required to add their signature, signifying their agreement to all contained documents.
"SignatureRequestSend::ALLOW_DECLINE": Allows signers to decline to sign a document if `true`. Defaults to `false`.
"SignatureRequestSend::ALLOW_REASSIGN": |-
  Allows signers to reassign their signature requests to other signers if set to `true`. Defaults to `false`.

  **Note**: Only available for Premium plan and higher.
"SignatureRequestSend::CC_EMAIL_ADDRESSES": The email addresses that should be CCed.
"SignatureRequestSend::CLIENT_ID": The client id of the API App you want to associate with this request. Used to apply the branding and callback url defined for the app.
"SignatureRequestSend::FILES": |-
  Use `files[]` to indicate the uploaded file(s) to send for signature.

  This endpoint requires either **files** or **file_urls[]**, but not both.
"SignatureRequestSend::FILE_URLS": |-
  Use `file_urls[]` to have Dropbox Sign download the file(s) to send for signature.

  This endpoint requires either **files** or **file_urls[]**, but not both.
"SignatureRequestSend::HIDE_TEXT_TAGS": |-
  Enables automatic Text Tag removal when set to true.

  **NOTE**: Removing text tags this way can cause unwanted clipping. We recommend leaving this setting on `false` and instead hiding your text tags using white text or a similar approach. See the [Text Tags Walkthrough](https://app.hellosign.com/api/textTagsWalkthrough#TextTagIntro) for more information.
"SignatureRequestSend::IS_QUALIFIED_SIGNATURE": |-
    Send with a value of `true` if you wish to enable
    [Qualified Electronic Signatures](https://www.hellosign.com/features/qualified-electronic-signatures) (QES),
    which requires a face-to-face call to verify the signer's identity.<br>
    **Note**: QES is only available on the Premium API plan as an add-on purchase.
    Cannot be used in `test_mode`. Only works on requests with one signer.
"SignatureRequestSend::MESSAGE": The custom message in the email that will be sent to the signers.
"SignatureRequestSend::SIGNING_REDIRECT_URL": The URL you want signers redirected to after they successfully sign.
"SignatureRequestSend::SUBJECT": The subject in the email that will be sent to the signers.
"SignatureRequestSend::TEST_MODE": Whether this is a test, the signature request will not be legally binding if set to `true`. Defaults to `false`.
"SignatureRequestSend::TITLE": The title you want to assign to the SignatureRequest.
"SignatureRequestSend::EXPIRES_AT": When the signature request will expire. Unsigned signatures will be moved to the expired status, and no longer signable. See [Signature Request Expiration Date](https://developers.hellosign.com/docs/signature-request/expiration/) for details.
"SignatureRequestSend::USE_PREEXISTING_FIELDS": Send with a value of `true` if you wish to enable [Text Tags](https://app.hellosign.com/api/textTagsWalkthrough#TextTagIntro) parsing in your document. Defaults to disabled, or `false`.

"SignatureRequestSendWithTemplate::SUMMARY": Send with Template
"SignatureRequestSendWithTemplate::DESCRIPTION": Creates and sends a new SignatureRequest based off of the Template(s) specified with the `template_ids` parameter.
"SignatureRequestSendWithTemplate::ALLOW_DECLINE": Allows signers to decline to sign a document if `true`. Defaults to `false`.
"SignatureRequestSendWithTemplate::CLIENT_ID": Client id of the app to associate with the signature request. Used to apply the branding and callback url defined for the app.
"SignatureRequestSendWithTemplate::FILES": |-
  Use `files[]` to indicate the uploaded file(s) to send for signature.

  This endpoint requires either **files** or **file_urls[]**, but not both.
"SignatureRequestSendWithTemplate::FILE_URLS": |-
  Use `file_urls[]` to have Dropbox Sign download the file(s) to send for signature.

  This endpoint requires either **files** or **file_urls[]**, but not both.
"SignatureRequestSendWithTemplate::IS_QUALIFIED_SIGNATURE": |-
  Send with a value of `true` if you wish to enable
  [Qualified Electronic Signatures](https://www.hellosign.com/features/qualified-electronic-signatures) (QES),
  which requires a face-to-face call to verify the signer's identity.<br>
  **Note**: QES is only available on the Premium API plan as an add-on purchase.
  Cannot be used in `test_mode`. Only works on requests with one signer.
"SignatureRequestSendWithTemplate::MESSAGE": The custom message in the email that will be sent to the signers.
"SignatureRequestSendWithTemplate::SIGNING_REDIRECT_URL": The URL you want signers redirected to after they successfully sign.
"SignatureRequestSendWithTemplate::SUBJECT": The subject in the email that will be sent to the signers.
"SignatureRequestSendWithTemplate::TEMPLATE_IDS": Use `template_ids` to create a SignatureRequest from one or more templates, in the order in which the template will be used.
"SignatureRequestSendWithTemplate::TEST_MODE": Whether this is a test, the signature request will not be legally binding if set to `true`. Defaults to `false`.
"SignatureRequestSendWithTemplate::TITLE": The title you want to assign to the SignatureRequest.

"SignatureRequestUpdate::SUMMARY": Update Signature Request
"SignatureRequestUpdate::DESCRIPTION": |-
  Updates the email address and/or the name for a given signer on a signature request. You can listen for the `signature_request_email_bounce` event on your app or account to detect bounced emails, and respond with this method.

  **NOTE**: This action cannot be performed on a signature request with an appended signature page.
"SignatureRequestUpdate::EMAIL_ADDRESS": |-
  The new email address for the recipient.

  **NOTE**: Optional if `name` is provided.
"SignatureRequestUpdate::NAME": |-
  The new name for the recipient.

  **NOTE**: Optional if `email_address` is provided.
"TeamAddMember::TEAM_ID": The id of the team.
"SignatureRequestUpdate::SIGNATURE_ID": The signature ID for the recipient.
"SignatureRequestUpdate::EXPIRES_AT": The new time when the signature request will expire. Unsigned signatures will be moved to the expired status, and no longer signable. See [Signature Request Expiration Date](https://developers.hellosign.com/docs/signature-request/expiration/) for details.
"SignatureRequestUpdate::SIGNATURE_REQUEST_ID": The id of the SignatureRequest to update.

"TeamAddMember::SUMMARY": Add User to Team
"TeamAddMember::DESCRIPTION": Invites a user (specified using the `email_address` parameter) to your Team. If the user does not currently have a Dropbox Sign Account, a new one will be created for them. If a user is already a part of another Team, a `team_invite_failed` error will be returned.
"TeamAddMember::ACCOUNT_ID": |-
  `account_id` or `email_address` is required. If both are provided, the account id prevails.

  Account id of the user to invite to your Team.
"TeamAddMember::EMAIL_ADDRESS": |-
  `account_id` or `email_address` is required, If both are provided, the account id prevails.

  Email address of the user to invite to your Team.
"TeamAddMember::ROLE": |-
  A role member will take in a new Team.

  **Note**: This parameter is used only if `team_id` is provided.

"TeamCreate::SUMMARY": Create Team
"TeamCreate::DESCRIPTION": Creates a new Team and makes you a member. You must not currently belong to a Team to invoke.
"TeamCreate::NAME": The name of your Team.

"TeamDelete::SUMMARY": Delete Team
"TeamDelete::DESCRIPTION": Deletes your Team. Can only be invoked when you have a Team with only one member (yourself).

"TeamGet::SUMMARY": Get Team
"TeamGet::DESCRIPTION": Returns information about your Team as well as a list of its members. If you do not belong to a Team, a 404 error with an error_name of "not_found" will be returned.

"TeamRemoveMember::SUMMARY": Remove User from Team
"TeamRemoveMember::DESCRIPTION": Removes the provided user Account from your Team. If the Account had an outstanding invitation to your Team, the invitation will be expired. If you choose to transfer documents from the removed Account to an Account provided in the `new_owner_email_address` parameter (available only for Enterprise plans), the response status code will be 201, which indicates that your request has been queued but not fully executed.
"TeamRemoveMember::NEW_TEAM_ID": Id of the new Team.
"TeamRemoveMember::NEW_ROLE": |-
  A new role member will take in a new Team.

  **Note**: This parameter is used only if `new_team_id` is provided.
"TeamRemoveMember::ACCOUNT_ID": |-
  **account_id** or **email_address** is required. If both are provided, the account id prevails.

  Account id to remove from your Team.
"TeamRemoveMember::EMAIL_ADDRESS": |-
  **account_id** or **email_address** is required. If both are provided, the account id prevails.

  Email address of the Account to remove from your Team.
"TeamRemoveMember::NEW_OWNER_EMAIL_ADDRESS": |-
  The email address of an Account on this Team to receive all documents, templates, and API apps (if applicable) from the removed Account. If not provided, and on an Enterprise plan, this data will remain with the removed Account.

  **Note**: Only available for Enterprise plans.

"TeamUpdate::SUMMARY": Update Team
"TeamUpdate::DESCRIPTION": Updates the name of your Team.
"TeamUpdate::NAME": The name of your Team.

"TeamInfo::SUMMARY": Get Team Info
"TeamInfo::DESCRIPTION": Provides information about a team.
"TeamInfo::TEAM_ID": The id of the team.
"TeamInfo::TEAM_PARENT": Information about the parent team if a team has one, set to `null` otherwise.

"TeamInvites::SUMMARY": List Team Invites
"TeamInvites::DESCRIPTION": Provides a list of team invites (and their roles).
"TeamInvites::EMAIL_ADDRESS": The email address for which to display the team invites.
"TeamInviteResponse::EMAIL_ADDRESS": Email address of the user invited to this team.
"TeamInviteResponse::TEAM_ID": Id of the team.
"TeamInviteResponse::ROLE": Role of the user invited to this team.
"TeamInviteResponse::SENT_AT": Timestamp when the invitation was sent.
"TeamInviteResponse::REDEEMED_AT": Timestamp when the invitation was redeemed.
"TeamInviteResponse::EXPIRES_AT": Timestamp when the invitation is expiring.

"TeamInvitesResponse::DESCRIPTION": Contains a list of team invites and their roles.

"TeamMembers::SUMMARY": List Team Members
"TeamMembers::DESCRIPTION": Provides a paginated list of members (and their roles) that belong to a given team.
"TeamMembers::TEAM_ID": The id of the team that a member list is being requested from.
"TeamMembers::PAGE": Which page number of the team member list to return. Defaults to `1`.
"TeamMembers::PAGE_SIZE": "Number of objects to be returned per page. Must be between `1` and `100`. Default is `20`."

"TeamMembersResponse::DESCRIPTION": Contains a list of team members and their roles for a specific team.

"TeamMemberResponse::ACCOUNT_ID": Account id of the team member.
"TeamMemberResponse::EMAIL_ADDRESS": Email address of the team member.
"TeamMemberResponse::MEMBER_ROLE": The specific role a member has on the team.

"TeamSubTeams::SUMMARY": List Sub Teams
"TeamSubTeams::DESCRIPTION": Provides a paginated list of sub teams that belong to a given team.
"TeamSubTeams::TEAM_ID": The id of the parent Team.
"TeamSubTeams::PAGE": Which page number of the SubTeam List to return. Defaults to `1`.
"TeamSubTeams::PAGE_SIZE": "Number of objects to be returned per page. Must be between `1` and `100`. Default is `20`."

"SubTeamResponse::DESCRIPTION": Contains a list with sub teams.

"TemplateAddUser::SUMMARY": Add User to Template
"TemplateAddUser::DESCRIPTION": Gives the specified Account access to the specified Template. The specified Account must be a part of your Team.
"TemplateAddUser::ACCOUNT_ID": |-
  The id of the Account to give access to the Template.
  <b>Note</b> The account id prevails if email address is also provided.
"TemplateAddUser::EMAIL_ADDRESS": |-
  The email address of the Account to give access to the Template.
  <b>Note</b> The account id prevails if it is also provided.
"TemplateAddUser::SKIP_NOTIFICATION": If set to `true`, the user does not receive an email notification when a template has been shared with them. Defaults to `false`.
"TemplateAddUser::TEMPLATE_ID": The id of the Template to give the Account access to.

"TemplateCreateEmbeddedDraft::SUMMARY": Create Embedded Template Draft
"TemplateCreateEmbeddedDraft::DESCRIPTION": The first step in an embedded template workflow. Creates a draft template that can then be further set up in the template 'edit' stage.
"TemplateCreateEmbeddedDraft::ALLOW_CCS": This allows the requester to specify whether the user is allowed to provide email addresses to CC when creating a template.
"TemplateCreateEmbeddedDraft::ALLOW_REASSIGN": |-
  Allows signers to reassign their signature requests to other signers if set to `true`. Defaults to `false`.

  **Note**: Only available for Premium plan and higher.
"TemplateCreateEmbeddedDraft::CC_ROLES": The CC roles that must be assigned when using the template to send a signature request
"TemplateCreateEmbeddedDraft::CLIENT_ID": Client id of the app you're using to create this draft. Used to apply the branding and callback url defined for the app.
"TemplateCreateEmbeddedDraft::FILES": |-
  Use `files[]` to indicate the uploaded file(s) to send for signature.

  This endpoint requires either **files** or **file_urls[]**, but not both.
"TemplateCreateEmbeddedDraft::FILE_URLS": |-
  Use `file_urls[]` to have Dropbox Sign download the file(s) to send for signature.

  This endpoint requires either **files** or **file_urls[]**, but not both.
"TemplateCreateEmbeddedDraft::FORCE_SIGNER_ROLES": Provide users the ability to review/edit the template signer roles.
"TemplateCreateEmbeddedDraft::FORCE_SUBJECT_MESSAGE": Provide users the ability to review/edit the template subject and message.
"TemplateCreateEmbeddedDraft::MERGE_FIELDS": |-
  Add merge fields to the template. Merge fields are placed by the user creating the template and used to pre-fill data by passing values into signature requests with the `custom_fields` parameter.
  If the signature request using that template *does not* pass a value into a merge field, then an empty field remains in the document.
"TemplateCreateEmbeddedDraft::MESSAGE": The default template email message.
"TemplateCreateEmbeddedDraft::SHOW_PREVIEW": |-
  This allows the requester to enable the editor/preview experience.

  - `show_preview=true`: Allows requesters to enable the editor/preview experience.
  - `show_preview=false`: Allows requesters to disable the editor/preview experience.
"TemplateCreateEmbeddedDraft::SHOW_PROGRESS_STEPPER": When only one step remains in the signature request process and this parameter is set to `false` then the progress stepper will be hidden.
"TemplateCreateEmbeddedDraft::SIGNER_ROLES": An array of the designated signer roles that must be specified when sending a SignatureRequest using this Template.
"TemplateCreateEmbeddedDraft::SKIP_ME_NOW": Disables the "Me (Now)" option for the person preparing the document. Does not work with type `send_document`. Defaults to `false`.
"TemplateCreateEmbeddedDraft::SUBJECT": The template title (alias).
"TemplateCreateEmbeddedDraft::TEST_MODE": Whether this is a test, the signature request created from this draft will not be legally binding if set to `true`. Defaults to `false`.
"TemplateCreateEmbeddedDraft::TITLE": The title you want to assign to the SignatureRequest.
"TemplateCreateEmbeddedDraft::USE_PREEXISTING_FIELDS": Enable the detection of predefined PDF fields by setting the `use_preexisting_fields` to `true` (defaults to disabled, or `false`).

"TemplateDelete::SUMMARY": Delete Template
"TemplateDelete::DESCRIPTION": Completely deletes the template specified from the account.
"TemplateDelete::TEMPLATE_ID": The id of the Template to delete.

"TemplateFiles::SUMMARY": Get Template Files
"TemplateFiles::DESCRIPTION": |-
  Obtain a copy of the current documents specified by the `template_id` parameter. Returns a PDF or ZIP file.

  If the files are currently being prepared, a status code of `409` will be returned instead. In this case please wait for the `template_created` callback event.
"TemplateFilesAsFileUrl::SUMMARY": Get Template Files as File Url
"TemplateFilesAsFileUrl::DESCRIPTION": |-
  Obtain a copy of the current documents specified by the `template_id` parameter. Returns a JSON object with a url to the file (PDFs only).

  If the files are currently being prepared, a status code of `409` will be returned instead. In this case please wait for the `template_created` callback event.

"TemplateFilesAsDataUri::SUMMARY": Get Template Files as Data Uri
"TemplateFilesAsDataUri::DESCRIPTION": |-
  Obtain a copy of the current documents specified by the `template_id` parameter. Returns a JSON object with a `data_uri` representing the base64 encoded file (PDFs only).

  If the files are currently being prepared, a status code of `409` will be returned instead. In this case please wait for the `template_created` callback event.
"TemplateFiles::FILE_TYPE": Set to `pdf` for a single merged document or `zip` for a collection of individual documents.
"TemplateFiles::GET_DATA_URI": If `true`, the response will contain the file as base64 encoded string. Base64 encoding is only available for PDFs.
"TemplateFiles::GET_URL": If `true`, the response will contain a url link to the file instead. Links are only available for PDFs and have a TTL of 3 days.
"TemplateFiles::TEMPLATE_ID": The id of the template files to retrieve.

"TemplateGet::SUMMARY": Get Template
"TemplateGet::DESCRIPTION": Returns the Template specified by the `template_id` parameter.
"TemplateGet::TEMPLATE_ID": The id of the Template to retrieve.

"TemplateList::SUMMARY": List Templates
"TemplateList::DESCRIPTION": |-
  Returns a list of the Templates that are accessible by you.

  Take a look at our [search guide](/api/reference/search/) to learn more about querying templates.
"TemplateList::ACCOUNT_ID": Which account to return Templates for. Must be a team member. Use `all` to indicate all team members. Defaults to your account.
"TemplateList::PAGE": Which page number of the Template List to return. Defaults to `1`.
"TemplateList::PAGE_SIZE": "Number of objects to be returned per page. Must be between `1` and `100`. Default is `20`."
"TemplateList::QUERY": String that includes search terms and/or fields to be used to filter the Template objects.

"TemplateRemoveUser::SUMMARY": Remove User from Template
"TemplateRemoveUser::DESCRIPTION": Removes the specified Account's access to the specified Template.
"TemplateRemoveUser::ACCOUNT_ID": The id or email address of the Account to remove access to the Template. The account id prevails if both are provided.
"TemplateRemoveUser::EMAIL_ADDRESS": The id or email address of the Account to remove access to the Template. The account id prevails if both are provided.
"TemplateRemoveUser::TEMPLATE_ID": The id of the Template to remove the Account's access to.

"TemplateUpdateFiles::SUMMARY": Update Template Files
"TemplateUpdateFiles::DESCRIPTION": |-
  Overlays a new file with the overlay of an existing template. The new file(s) must:

  1. have the same or higher page count
  2. the same orientation as the file(s) being replaced.

  This will not overwrite or in any way affect the existing template. Both the existing template and new template will be available for use after executing this endpoint. Also note that this will decrement your template quota.

  Overlaying new files is asynchronous and a successful call to this endpoint will return 200 OK response if the request passes initial validation checks.

  It is recommended that a callback be implemented to listen for the callback event. A `template_created` event will be sent when the files are updated or a `template_error` event will be sent if there was a problem while updating the files. If a callback handler has been configured and the event has not been received within 60 minutes of making the call, check the status of the request in the API dashboard and retry the request if necessary.

  If the page orientation or page count is different from the original template document, we will notify you with a `template_error` [callback event](https://app.hellosign.com/api/eventsAndCallbacksWalkthrough).
"TemplateUpdateFiles::CLIENT_ID": Client id of the app you're using to update this template.
"TemplateUpdateFiles::FILES": |-
  Use `files[]` to indicate the uploaded file(s) to use for the template.

  This endpoint requires either **files** or **file_urls[]**, but not both.
"TemplateUpdateFiles::FILE_URLS": |-
  Use `file_urls[]` to have Dropbox Sign download the file(s) to use for the template.

  This endpoint requires either **files** or **file_urls[]**, but not both.
"TemplateUpdateFiles::MESSAGE": The new default template email message.
"TemplateUpdateFiles::SUBJECT": The new default template email subject.
"TemplateUpdateFiles::TEMPLATE_ID": The ID of the template whose files to update.
"TemplateUpdateFiles::TEST_MODE": Whether this is a test, the signature request created from this draft will not be legally binding if set to `true`. Defaults to `false`.

"UnclaimedDraftCreate::SUMMARY": Create Unclaimed Draft
"UnclaimedDraftCreate::DESCRIPTION": Creates a new Draft that can be claimed using the claim URL. The first authenticated user to access the URL will claim the Draft and will be shown either the "Sign and send" or the "Request signature" page with the Draft loaded. Subsequent access to the claim URL will result in a 404.
"UnclaimedDraftCreate::ALLOW_DECLINE": Allows signers to decline to sign a document if `true`. Defaults to `false`.
"UnclaimedDraftCreate::CLIENT_ID": Client id of the app used to create the draft. Used to apply the branding and callback url defined for the app.
"UnclaimedDraftCreate::CC_EMAIL_ADDRESSES": The email addresses that should be CCed.
"UnclaimedDraftCreate::FILES": |-
  Use `files[]` to indicate the uploaded file(s) to send for signature.

  This endpoint requires either **files** or **file_urls[]**, but not both.
"UnclaimedDraftCreate::FILE_URLS": |-
  Use `file_urls[]` to have Dropbox Sign download the file(s) to send for signature.

  This endpoint requires either **files** or **file_urls[]**, but not both.
"UnclaimedDraftCreate::HIDE_TEXT_TAGS": Send with a value of `true` if you wish to enable automatic Text Tag removal. Defaults to `false`. When using Text Tags it is preferred that you set this to `false` and hide your tags with white text or something similar because the automatic removal system can cause unwanted clipping. See the [Text Tags](https://app.hellosign.com/api/textTagsWalkthrough#TextTagIntro) walkthrough for more details.
"UnclaimedDraftCreate::MESSAGE": The custom message in the email that will be sent to the signers.
"UnclaimedDraftCreate::SHOW_PROGRESS_STEPPER": When only one step remains in the signature request process and this parameter is set to `false` then the progress stepper will be hidden.
"UnclaimedDraftCreate::SIGNING_REDIRECT_URL": The URL you want signers redirected to after they successfully sign.
"UnclaimedDraftCreate::SUBJECT": The subject in the email that will be sent to the signers.
"UnclaimedDraftCreate::TEST_MODE": Whether this is a test, the signature request created from this draft will not be legally binding if set to `true`. Defaults to `false`.
"UnclaimedDraftCreate::TYPE": The type of unclaimed draft to create. Use `send_document` to create a claimable file, and `request_signature` for a claimable signature request. If the type is `request_signature` then signers name and email_address are not optional.
"UnclaimedDraftCreate::USE_PREEXISTING_FIELDS": Set `use_text_tags` to `true` to enable [Text Tags](https://app.hellosign.com/api/textTagsWalkthrough#TextTagIntro) parsing in your document (defaults to disabled, or `false`). Alternatively, if your PDF contains pre-defined fields, enable the detection of these fields by setting the `use_preexisting_fields` to `true` (defaults to disabled, or `false`). Currently we only support use of either `use_text_tags` or `use_preexisting_fields` parameter, not both.
"UnclaimedDraftCreate::USE_TEXT_TAGS": Set `use_text_tags` to `true` to enable [Text Tags](https://app.hellosign.com/api/textTagsWalkthrough#TextTagIntro) parsing in your document (defaults to disabled, or `false`). Alternatively, if your PDF contains pre-defined fields, enable the detection of these fields by setting the `use_preexisting_fields` to `true` (defaults to disabled, or `false`). Currently we only support use of either `use_text_tags` or `use_preexisting_fields` parameter, not both.
"UnclaimedDraftCreate::EXPIRES_AT":  |-
  When the signature request will expire. Unsigned signatures will be moved to the expired status, and no longer signable. See [Signature Request Expiration Date](https://developers.hellosign.com/docs/signature-request/expiration/) for details.

  **Note**: This does not correspond to the **expires_at** returned in the response.
"UnclaimedDraftCreateEmbedded::SUMMARY": Create Embedded Unclaimed Draft
"UnclaimedDraftCreateEmbedded::DESCRIPTION": |-
  Creates a new Draft that can be claimed and used in an embedded iFrame. The first authenticated user to access the URL will claim the Draft and will be shown the "Request signature" page with the Draft loaded. Subsequent access to the claim URL will result in a `404`. For this embedded endpoint the `requester_email_address` parameter is required.

  **NOTE**: Embedded unclaimed drafts can only be accessed in embedded iFrames whereas normal drafts can be used and accessed on Dropbox Sign.
"UnclaimedDraftCreateEmbedded::ALLOW_CCS": This allows the requester to specify whether the user is allowed to provide email addresses to CC when claiming the draft.
"UnclaimedDraftCreateEmbedded::ALLOW_DECLINE": Allows signers to decline to sign a document if `true`. Defaults to `false`.
"UnclaimedDraftCreateEmbedded::ALLOW_REASSIGN": |-
  Allows signers to reassign their signature requests to other signers if set to `true`. Defaults to `false`.

  **Note**: Only available for Premium plan and higher.
"UnclaimedDraftCreateEmbedded::CC_EMAIL_ADDRESSES": The email addresses that should be CCed.
"UnclaimedDraftCreateEmbedded::CLIENT_ID": Client id of the app used to create the draft. Used to apply the branding and callback url defined for the app.
"UnclaimedDraftCreateEmbedded::FILES": |-
  Use `files[]` to indicate the uploaded file(s) to send for signature.

  This endpoint requires either **files** or **file_urls[]**, but not both.
"UnclaimedDraftCreateEmbedded::FILE_URLS": |-
  Use `file_urls[]` to have Dropbox Sign download the file(s) to send for signature.

  This endpoint requires either **files** or **file_urls[]**, but not both.
"UnclaimedDraftCreateEmbedded::FORCE_SIGNER_PAGE": Provide users the ability to review/edit the signers.
"UnclaimedDraftCreateEmbedded::FORCE_SUBJECT_MESSAGE": Provide users the ability to review/edit the subject and message.
"UnclaimedDraftCreateEmbedded::HIDE_TEXT_TAGS": Send with a value of `true` if you wish to enable automatic Text Tag removal. Defaults to `false`. When using Text Tags it is preferred that you set this to `false` and hide your tags with white text or something similar because the automatic removal system can cause unwanted clipping. See the [Text Tags](https://app.hellosign.com/api/textTagsWalkthrough#TextTagIntro) walkthrough for more details.
"UnclaimedDraftCreateEmbedded::HOLD_REQUEST": The request from this draft will not automatically send to signers post-claim if set to `true`. Requester must [release](/api/reference/operation/signatureRequestReleaseHold/) the request from hold when ready to send. Defaults to `false`.
"UnclaimedDraftCreateEmbedded::IS_FOR_EMBEDDED_SIGNING": The request created from this draft will also be signable in embedded mode if set to `true`. Defaults to `false`.
"UnclaimedDraftCreateEmbedded::MESSAGE": The custom message in the email that will be sent to the signers.
"UnclaimedDraftCreateEmbedded::REQUESTER_EMAIL_ADDRESS": The email address of the user that should be designated as the requester of this draft, if the draft type is `request_signature`.
"UnclaimedDraftCreateEmbedded::REQUESTING_REDIRECT_URL": The URL you want signers redirected to after they successfully request a signature.
"UnclaimedDraftCreateEmbedded::SHOW_PREVIEW": |-
  This allows the requester to enable the editor/preview experience.

  - `show_preview=true`: Allows requesters to enable the editor/preview experience.
  - `show_preview=false`: Allows requesters to disable the editor/preview experience.
"UnclaimedDraftCreateEmbedded::SHOW_PROGRESS_STEPPER": When only one step remains in the signature request process and this parameter is set to `false` then the progress stepper will be hidden.
"UnclaimedDraftCreateEmbedded::SIGNING_REDIRECT_URL": The URL you want signers redirected to after they successfully sign.
"UnclaimedDraftCreateEmbedded::SKIP_ME_NOW": Disables the "Me (Now)" option for the person preparing the document. Does not work with type `send_document`. Defaults to `false`.
"UnclaimedDraftCreateEmbedded::SUBJECT": The subject in the email that will be sent to the signers.
"UnclaimedDraftCreateEmbedded::TEST_MODE": Whether this is a test, the signature request created from this draft will not be legally binding if set to `true`. Defaults to `false`.
"UnclaimedDraftCreateEmbedded::TYPE": The type of the draft. By default this is `request_signature`, but you can set it to `send_document` if you want to self sign a document and download it.
"UnclaimedDraftCreateEmbedded::USE_PREEXISTING_FIELDS": Set `use_text_tags` to `true` to enable [Text Tags](https://app.hellosign.com/api/textTagsWalkthrough#TextTagIntro) parsing in your document (defaults to disabled, or `false`). Alternatively, if your PDF contains pre-defined fields, enable the detection of these fields by setting the `use_preexisting_fields` to `true` (defaults to disabled, or `false`). Currently we only support use of either `use_text_tags` or `use_preexisting_fields` parameter, not both.
"UnclaimedDraftCreateEmbedded::USE_TEXT_TAGS": Set `use_text_tags` to `true` to enable [Text Tags](https://app.hellosign.com/api/textTagsWalkthrough#TextTagIntro) parsing in your document (defaults to disabled, or `false`). Alternatively, if your PDF contains pre-defined fields, enable the detection of these fields by setting the `use_preexisting_fields` to `true` (defaults to disabled, or `false`). Currently we only support use of either `use_text_tags` or `use_preexisting_fields` parameter, not both.
"UnclaimedDraftCreateEmbedded::POPULATE_AUTO_FILL_FIELDS": |-
  Controls whether [auto fill fields](https://faq.hellosign.com/hc/en-us/articles/360051467511-Auto-Fill-Fields) can automatically populate a signer's information during signing.

  ⚠️ **Note** ⚠️: Keep your signer's information safe by ensuring that the _signer on your signature request is the intended party_ before using this feature.
"UnclaimedDraftCreateEmbedded::EXPIRES_AT":  |-
  When the signature request will expire. Unsigned signatures will be moved to the expired status, and no longer signable. See [Signature Request Expiration Date](https://developers.hellosign.com/docs/signature-request/expiration/) for details.

  **Note**: This does not correspond to the **expires_at** returned in the response.
"UnclaimedDraftCreateEmbeddedWithTemplate::SUMMARY": Create Embedded Unclaimed Draft with Template
"UnclaimedDraftCreateEmbeddedWithTemplate::DESCRIPTION": |-
  Creates a new Draft with a previously saved template(s) that can be claimed and used in an embedded iFrame. The first authenticated user to access the URL will claim the Draft and will be shown the "Request signature" page with the Draft loaded. Subsequent access to the claim URL will result in a `404`. For this embedded endpoint the `requester_email_address` parameter is required.

  **NOTE**: Embedded unclaimed drafts can only be accessed in embedded iFrames whereas normal drafts can be used and accessed on Dropbox Sign.
"UnclaimedDraftCreateEmbeddedWithTemplate::ALLOW_DECLINE": Allows signers to decline to sign a document if `true`. Defaults to `false`.
"UnclaimedDraftCreateEmbeddedWithTemplate::ALLOW_REASSIGN": |-
  Allows signers to reassign their signature requests to other signers if set to `true`. Defaults to `false`.

  **Note**: Only available for Premium plan and higher.
"UnclaimedDraftCreateEmbeddedWithTemplate::CLIENT_ID": Client id of the app used to create the draft. Used to apply the branding and callback url defined for the app.
"UnclaimedDraftCreateEmbeddedWithTemplate::FILES": |-
  Use `files[]` to append additional files to the signature request being created from the template. Dropbox Sign will parse the files for [text tags](https://app.hellosign.com/api/textTagsWalkthrough) and append it to the signature request. Text tags for signers not on the template(s) will be ignored.

  **files** or **file_urls[]** is required, but not both.
"UnclaimedDraftCreateEmbeddedWithTemplate::FILE_URLS": |-
  Use file_urls[] to append additional files to the signature request being created from the template. Dropbox Sign will download the file, then parse it for [text tags](https://app.hellosign.com/api/textTagsWalkthrough), and append to the signature request. Text tags for signers not on the template(s) will be ignored.

  **files** or **file_urls[]** is required, but not both.
"UnclaimedDraftCreateEmbeddedWithTemplate::FORCE_SIGNER_ROLES": Provide users the ability to review/edit the template signer roles.
"UnclaimedDraftCreateEmbeddedWithTemplate::FORCE_SUBJECT_MESSAGE": Provide users the ability to review/edit the template subject and message.
"UnclaimedDraftCreateEmbeddedWithTemplate::HOLD_REQUEST": The request from this draft will not automatically send to signers post-claim if set to 1. Requester must [release](/api/reference/operation/signatureRequestReleaseHold/) the request from hold when ready to send. Defaults to `false`.
"UnclaimedDraftCreateEmbeddedWithTemplate::IS_FOR_EMBEDDED_SIGNING": The request created from this draft will also be signable in embedded mode if set to `true`. Defaults to `false`.
"UnclaimedDraftCreateEmbeddedWithTemplate::MESSAGE": The custom message in the email that will be sent to the signers.
"UnclaimedDraftCreateEmbeddedWithTemplate::PREVIEW_ONLY": |-
  This allows the requester to enable the preview experience (i.e. does not allow the requester's end user to add any additional fields via the editor).

  - `preview_only=true`: Allows requesters to enable the preview only experience.
  - `preview_only=false`: Allows requesters to disable the preview only experience.

  **Note**: This parameter overwrites `show_preview=1` (if set).
"UnclaimedDraftCreateEmbeddedWithTemplate::REQUESTER_EMAIL_ADDRESS": The email address of the user that should be designated as the requester of this draft.
"UnclaimedDraftCreateEmbeddedWithTemplate::REQUESTING_REDIRECT_URL": The URL you want signers redirected to after they successfully request a signature.
"UnclaimedDraftCreateEmbeddedWithTemplate::SHOW_PREVIEW": |-
  This allows the requester to enable the editor/preview experience.

  - `show_preview=true`: Allows requesters to enable the editor/preview experience.
  - `show_preview=false`: Allows requesters to disable the editor/preview experience.
"UnclaimedDraftCreateEmbeddedWithTemplate::SHOW_PROGRESS_STEPPER": When only one step remains in the signature request process and this parameter is set to `false` then the progress stepper will be hidden.
"UnclaimedDraftCreateEmbeddedWithTemplate::SIGNING_REDIRECT_URL": The URL you want signers redirected to after they successfully sign.
"UnclaimedDraftCreateEmbeddedWithTemplate::SKIP_ME_NOW": Disables the "Me (Now)" option for the person preparing the document. Does not work with type `send_document`. Defaults to `false`.
"UnclaimedDraftCreateEmbeddedWithTemplate::SUBJECT": The subject in the email that will be sent to the signers.
"UnclaimedDraftCreateEmbeddedWithTemplate::TEMPLATE_IDS": Use `template_ids` to create a SignatureRequest from one or more templates, in the order in which the templates will be used.
"UnclaimedDraftCreateEmbeddedWithTemplate::TEST_MODE": Whether this is a test, the signature request created from this draft will not be legally binding if set to `true`. Defaults to `false`.
"UnclaimedDraftCreateEmbeddedWithTemplate::TITLE": The title you want to assign to the SignatureRequest.
"UnclaimedDraftCreateEmbeddedWithTemplate::POPULATE_AUTO_FILL_FIELDS": |-
  Controls whether [auto fill fields](https://faq.hellosign.com/hc/en-us/articles/360051467511-Auto-Fill-Fields) can automatically populate a signer's information during signing.

  ⚠️ **Note** ⚠️: Keep your signer's information safe by ensuring that the _signer on your signature request is the intended party_ before using this feature.
"UnclaimedDraftEditAndResend::SUMMARY": Edit and Resend Unclaimed Draft
"UnclaimedDraftEditAndResend::DESCRIPTION": |-
  Creates a new signature request from an embedded request that can be edited prior to being sent to the recipients. Parameter `test_mode` can be edited prior to request. Signers can be edited in embedded editor. Requester's email address will remain unchanged if `requester_email_address` parameter is not set.

  **NOTE**: Embedded unclaimed drafts can only be accessed in embedded iFrames whereas normal drafts can be used and accessed on Dropbox Sign.
"UnclaimedDraftEditAndResend::REQUESTER_EMAIL_ADDRESS": The email address of the user that should be designated as the requester of this draft. If not set, original requester's email address will be used.
"UnclaimedDraftEditAndResend::SIGNATURE_REQUEST_ID": The ID of the signature request to edit and resend.
"UnclaimedDraftEditAndResend::CLIENT_ID": Client id of the app used to create the draft. Used to apply the branding and callback url defined for the app.
"UnclaimedDraftEditAndResend::IS_FOR_EMBEDDED_SIGNING": The request created from this draft will also be signable in embedded mode if set to `true`.
"UnclaimedDraftEditAndResend::REQUESTING_REDIRECT_URL": The URL you want signers redirected to after they successfully request a signature.
"UnclaimedDraftEditAndResend::SHOW_PROGRESS_STEPPER": When only one step remains in the signature request process and this parameter is set to `false` then the progress stepper will be hidden.
"UnclaimedDraftEditAndResend::SIGNING_REDIRECT_URL": The URL you want signers redirected to after they successfully sign.
"UnclaimedDraftEditAndResend::TEST_MODE": Whether this is a test, the signature request created from this draft will not be legally binding if set to `true`. Defaults to `false`.

"Sub::Attachment::INSTRUCTIONS": The instructions for uploading the attachment.
"Sub::Attachment::NAME": The name of attachment.
"Sub::Attachment::REQUIRED": Determines if the attachment must be uploaded.
"Sub::Attachment::SIGNER_INDEX": |-
  The signer's index in the `signers` parameter (0-based indexing).

  **NOTE**: Only one signer can be assigned per attachment.

"Sub::BulkCustomField::DESCRIPTION": An array of custom field values.
"Sub::BulkCustomField::NAME": The name of the custom field. Must be the field's `name` or `api_id`.
"Sub::BulkCustomField::VALUE": The value of the custom field.

"Sub::BulkSigner::DESCRIPTION": |-
  Add Signers to your Templated-based Signature Request. Allows the requester to specify editor options when a preparing a document.

  Currently only templates with a single role are supported. All signers must have the same `role` value.

"Sub::CC::DESCRIPTION": Add CC email recipients. Required when a CC role exists for the Template.
"Sub::CC::EMAIL_ADDRESS": The email address of the CC recipient.
"Sub::CC::ROLE": Must match an existing CC role in chosen Template(s). Multiple CC recipients cannot share the same CC role.

"Sub::CustomField::DESCRIPTION": |-
  When used together with merge fields, `custom_fields` allows users to add pre-filled data to their signature requests.

  Pre-filled data can be used with "send-once" signature requests by adding merge fields with `form_fields_per_document` or [Text Tags](https://app.hellosign.com/api/textTagsWalkthrough#TextTagIntro) while passing values back with `custom_fields` together in one API call.

  For using pre-filled on repeatable signature requests, merge fields are added to templates in the Dropbox Sign UI or by calling [/template/create_embedded_draft](/api/reference/operation/templateCreateEmbeddedDraft) and then passing `custom_fields` on subsequent signature requests referencing that template.
"Sub::CustomField::EDITOR": |-
  Used to create editable merge fields. When the value matches a role passed in with `signers`, that role can edit the data that was pre-filled to that field. This field is optional, but required when this custom field object is set to `required = true`.

  **Note**: Editable merge fields are only supported for single signer requests (or the first signer in ordered signature requests). If used when there are multiple signers in an unordered signature request, the editor value is ignored and the field won't be editable.
"Sub::CustomField::NAME": The name of a custom field. When working with pre-filled data, the custom field's name must have a matching merge field name or the field will remain empty on the document during signing.
"Sub::CustomField::REQUIRED": Used to set an editable merge field when working with pre-filled data. When `true`, the custom field must specify a signer role in `editor`.
"Sub::CustomField::TEMPLATE": An array defining values and options for custom fields. Required when a custom field exists in the Template.
"Sub::CustomField::VALUE": The string that resolves (aka "pre-fills") to the merge field on the final document(s) used for signing.

"Sub::EditorOptions::DESCRIPTION": This allows the requester to specify editor options when a preparing a document
"Sub::EditorOptions::ALLOW_EDIT_DOCUMENTS": Allows requesters to edit documents, including delete and add
"Sub::EditorOptions::ALLOW_EDIT_SIGNERS": Allows requesters to edit the list of signers

"Sub::FieldOptions::DESCRIPTION": This allows the requester to specify field options for a signature request.
"Sub::FieldOptions::DATE_FORMAT": |-
  Allows requester to specify the date format (see list of allowed [formats](/api/reference/constants/#date-formats))

  **Note**: Only available for Premium and higher.

"Sub::FormFieldGroup::DESCRIPTION": Group information for fields defined in `form_fields_per_document`. String-indexed JSON array with `group_label` and `requirement` keys. `form_fields_per_document` must contain fields referencing a group defined in `form_field_groups`.
"Sub::FormFieldGroup::GROUP_ID_LABEL": ID of group. Use this to reference a specific group from the `group` value in `form_fields_per_document`.
"Sub::FormFieldGroup::GROUP_LABEL": Name of the group
"Sub::FormFieldGroup::REQUIREMENT": |-
  Examples: `require_0-1` `require_1` `require_1-ormore`

  - Check out the list of [acceptable `requirement` checkbox type values](/api/reference/constants/#checkbox-field-grouping).
  - Check out the list of [acceptable `requirement` radio type fields](/api/reference/constants/#radio-field-grouping).
  - Radio groups require **at least** two fields per group.

"Sub::FormFieldRule::DESCRIPTION": Conditional Logic rules for fields defined in `form_fields_per_document`.
"Sub::FormFieldRule::ID": Must be unique across all defined rules.
"Sub::FormFieldRule::TRIGGER_OPERATOR": Currently only `AND` is supported. Support for `OR` is being worked on.

"Sub::FormFieldRuleAction::DESCRIPTION": An array of action definitions, the "then that" part of "if this, **then that**". Any number of actions may be attached to a single rule.
"Sub::FormFieldRuleAction::FIELD_ID": |-
  **field_id** or **group_id** is required, but not both.

  Must reference the `api_id` of an existing field defined within `form_fields_per_document`.

  Cannot use with `group_id`. Trigger and action fields must belong to the same signer.
"Sub::FormFieldRuleAction::GROUP_ID": |-
  **group_id** or **field_id** is required, but not both.

  Must reference the ID of an existing group defined within `form_field_groups`.

  Cannot use with `field_id`. Trigger and action fields and groups must belong to the same signer.
"Sub::FormFieldRuleAction::HIDDEN": "`true` to hide the target field when rule is satisfied, otherwise `false`."
"Sub::FormFieldRuleAction::TYPE": |-
  - `change-field-visibility` if `field_id` used.
  - `change-group-visibility` if `group_id` used.

"Sub::FormFieldRuleTrigger::DESCRIPTION": An array of trigger definitions, the "if this" part of "**if this**, then that". Currently only a single trigger per rule is allowed.
"Sub::FormFieldRuleTrigger::ID": Must reference the `api_id` of an existing field defined within `form_fields_per_document`. Trigger and action fields and groups must belong to the same signer.
"Sub::FormFieldRuleTrigger::OPERATOR": |-
  Different field types allow different `operator` values:
  - Field type of **text**:
    - **is**: exact match
    - **not**: not exact match
    - **match**: regular expression, without /. Example:
      - OK `[a-zA-Z0-9]`
      - Not OK `/[a-zA-Z0-9]/`
  - Field type of **dropdown**:
    - **is**: exact match, single value
    - **not**: not exact match, single value
    - **any**: exact match, array of values.
    - **none**: not exact match, array of values.
  - Field type of **checkbox**:
    - **is**: exact match, single value
    - **not**: not exact match, single value
  - Field type of **radio**:
    - **is**: exact match, single value
    - **not**: not exact match, single value
"Sub::FormFieldRuleTrigger::VALUE_SINGLE": |-
  **value** or **values** is required, but not both.

  The value to match against **operator**.

  - When **operator** is one of the following, **value** must be `String`:
    - `is`
    - `not`
    - `match`

  Otherwise,
  - **checkbox**: When **type** of trigger is **checkbox**, **value** must be `0` or `1`
  - **radio**: When **type** of trigger is **radio**, **value** must be `1`
"Sub::FormFieldRuleTrigger::VALUE_MULTI": |-
  **values** or **value** is required, but not both.

  The values to match against **operator** when it is one of the following:

  - `any`
  - `none`

"Sub::FormFieldsPerDocument::DESCRIPTION": |-
  The fields that should appear on the document, expressed as an array of objects. (We're currently fixing a bug where this property only accepts a two-dimensional array. You can read about it here: <a href="/docs/openapi/form-fields-per-document" target="_blank">Using Form Fields per Document</a>.)

  **NOTE**: Fields like **text**, **dropdown**, **checkbox**, **radio**, and **hyperlink** have additional required and optional parameters. Check out the list of [additional parameters](/api/reference/constants/#form-fields-per-document) for these field types.

  * Text Field use `SubFormFieldsPerDocumentText`
  * Dropdown Field use `SubFormFieldsPerDocumentDropdown`
  * Hyperlink Field use `SubFormFieldsPerDocumentHyperlink`
  * Checkbox Field use `SubFormFieldsPerDocumentCheckbox`
  * Radio Field use `SubFormFieldsPerDocumentRadio`
  * Signature Field use `SubFormFieldsPerDocumentSignature`
  * Date Signed Field use `SubFormFieldsPerDocumentDateSigned`
  * Initials Field use `SubFormFieldsPerDocumentInitials`
  * Text Merge Field use `SubFormFieldsPerDocumentTextMerge`
  * Checkbox Merge Field use `SubFormFieldsPerDocumentCheckboxMerge`
"Sub::FormFieldsPerDocument::DESCRIPTION_EXTENDS": This class extends `SubFormFieldsPerDocumentBase`.
"Sub::FormFieldsPerDocument::API_ID": An identifier for the field that is unique across all documents in the request.
"Sub::FormFieldsPerDocument::AUTO_FILL_TYPE": Auto fill type for populating fields automatically. Check out the list of [auto fill types](/api/reference/constants/#auto-fill-types) to learn more about the possible values.
"Sub::FormFieldsPerDocument::LINK_ID": Link two or more text fields. Enter data into one linked text field, which automatically fill all other linked text fields.
"Sub::FormFieldsPerDocument::IS_CHECKED_CHECKBOX": "`true` for checking the checkbox field by default, otherwise `false`."
"Sub::FormFieldsPerDocument::IS_CHECKED_RADIO": "`true` for checking the radio field by default, otherwise `false`. Only one radio field per group can be `true`."
"Sub::FormFieldsPerDocument::CONTENT_DROPDOWN": Selected value in `options` array. Value must exist in array.
"Sub::FormFieldsPerDocument::CONTENT_HYPERLINK": Link Text.
"Sub::FormFieldsPerDocument::CONTENT_URL": Link URL.
"Sub::FormFieldsPerDocument::DOCUMENT_INDEX": Represents the integer index of the `file` or `file_url` document the field should be attached to.
"Sub::FormFieldsPerDocument::GROUP": String referencing group defined in `form_field_groups` parameter.
"Sub::FormFieldsPerDocument::HEIGHT": Size of the field in pixels.
"Sub::FormFieldsPerDocument::MASKED": Masks entered data. For more information see [Masking sensitive information](https://faq.hellosign.com/hc/en-us/articles/360040742811-Masking-sensitive-information). `true` for masking the data in a text field, otherwise `false`.
"Sub::FormFieldsPerDocument::NAME": Display name for the field.
"Sub::FormFieldsPerDocument::OPTIONS": Array of string values representing dropdown values.
"Sub::FormFieldsPerDocument::PAGE": |-
  Page in the document where the field should be placed (requires documents be PDF files).

  - When the page number parameter is supplied, the API will use the new coordinate system.
  - Check out the differences between both [coordinate systems](https://faq.hellosign.com/hc/en-us/articles/217115577) and how to use them.
"Sub::FormFieldsPerDocument::PLACEHOLDER": Placeholder value for text field.
"Sub::FormFieldsPerDocument::REQUIRED": Whether this field is required.
"Sub::FormFieldsPerDocument::SIGNER": |-
  Signer index identified by the offset in the signers parameter (0-based indexing), indicating which signer should fill out the field.

  **NOTE**: If type is `text-merge` or `checkbox-merge`, you must set this to sender in order to use pre-filled data.
"Sub::FormFieldsPerDocument::TYPE": One of the [Type](/api/reference/constants/#field-types) options.
"Sub::FormFieldsPerDocument::TYPE_CHECKBOX": A yes/no checkbox. Use the `SubFormFieldsPerDocumentCheckbox` class.
"Sub::FormFieldsPerDocument::TYPE_CHECKBOX_MERGE": A checkbox field that has default value set using pre-filled data. Use the `SubFormFieldsPerDocumentCheckboxMerge` class.
"Sub::FormFieldsPerDocument::TYPE_DATE_SIGNED": A date. Use the `SubFormFieldsPerDocumentDateSigned` class.
"Sub::FormFieldsPerDocument::TYPE_DROPDOWN": An input field for dropdowns. Use the `SubFormFieldsPerDocumentDropdown` class.
"Sub::FormFieldsPerDocument::TYPE_HYPERLINK": A hyperlink field. Use the `SubFormFieldsPerDocumentHyperlink` class.
"Sub::FormFieldsPerDocument::TYPE_INITIALS": An input field for initials. Use the `SubFormFieldsPerDocumentInitials` class.
"Sub::FormFieldsPerDocument::TYPE_RADIO": An input field for radios. Use the `SubFormFieldsPerDocumentRadio` class.
"Sub::FormFieldsPerDocument::TYPE_SIGNATURE": A signature input field. Use the `SubFormFieldsPerDocumentSignature` class.
"Sub::FormFieldsPerDocument::TYPE_TEXT": A text input field. Use the `SubFormFieldsPerDocumentText` class.
"Sub::FormFieldsPerDocument::TYPE_TEXT_MERGE": A text field that has default text set using pre-filled data. Use the `SubFormFieldsPerDocumentTextMerge` class.
"Sub::FormFieldsPerDocument::VALIDATION_TYPE": |-
  Each text field may contain a `validation_type` parameter. Check out the list of [validation types](https://faq.hellosign.com/hc/en-us/articles/217115577) to learn more about the possible values.

  **NOTE**: When using `custom_regex` you are required to pass a second parameter `validation_custom_regex` and you can optionally provide `validation_custom_regex_format_label` for the error message the user will see in case of an invalid value.
"Sub::FormFieldsPerDocument::WIDTH": Size of the field in pixels.
"Sub::FormFieldsPerDocument::X": Location coordinates of the field in pixels.
"Sub::FormFieldsPerDocument::Y": Location coordinates of the field in pixels.

"Sub::SignatureRequestGroupedSigners::DESCRIPTION": |-
  Add Grouped Signers to your Signature Request.

  This endpoint requires either **signers** or **grouped_signers**, but not both.
"Sub::SignatureRequestGroupedSigners::GROUP_NAME": The name of the group.
"Sub::SignatureRequestGroupedSigners::ORDER": The order the group is required to sign in. Use this instead of Signer-level `order`.
"Sub::SignatureRequestGroupedSigners::SIGNERS": |-
  Signers belonging to this Group.
  
  **NOTE**: Only `name`, `email_address`, and `pin` are available to Grouped Signers. We will ignore all other properties, even though they are listed below.

"Sub::MergeField::NAME": The name of the merge field. Must be unique.
"Sub::MergeField::TYPE": The type of merge field.
"Sub::MergeField::EnumDescriptions::TEXT": Sets merge [field type](/api/reference/constants/#field-types) to `text`.
"Sub::MergeField::EnumDescriptions::CHECKBOX": Sets merge [field type](/api/reference/constants/#field-types) to `checkbox`.

"Sub::Metadata::DESCRIPTION": |-
  Key-value data that should be attached to the signature request. This metadata is included in all API responses and events involving the signature request. For example, use the metadata field to store a signer's order number for look up when receiving events for the signature request.

  Each request can include up to 10 metadata keys (or 50 nested metadata keys), with key names up to 40 characters long and values up to 1000 characters long.

"Sub::OAuth::CALLBACK_URL": The callback URL to be used for OAuth flows. (Required if `oauth[scopes]` is provided)
"Sub::OAuth::DESCRIPTION": OAuth related parameters.
"Sub::OAuth::SCOPES": A list of [OAuth scopes](/api/reference/tag/OAuth) to be granted to the app. (Required if `oauth[callback_url]` is provided).

"Sub::Options::CAN_INSERT_EVERYWHERE": Determines if signers can use "Insert Everywhere" when signing a document.
"Sub::Options::DESCRIPTION": Additional options supported by API App.

"Sub::SignatureRequestSigner::DESCRIPTION": |-
  Add Signers to your Signature Request.

  This endpoint requires either **signers** or **grouped_signers**, but not both.
"Sub::SignatureRequestSigner::SIGNER_EMAIL_ADDRESS": The email address of the signer.
"Sub::SignatureRequestSigner::SIGNER_NAME": The name of the signer.
"Sub::SignatureRequestSigner::SIGNER_ORDER": The order the signer is required to sign in.
"Sub::SignatureRequestSigner::SIGNER_PIN": The 4- to 12-character access code that will secure this signer's signature page.
"Sub::SignatureRequestSigner::SIGNER_SMS_PHONE_NUMBER": |-
  An E.164 formatted phone number.

  **Note**: Not available in test mode and requires a Standard plan or higher.

"Sub::SignatureRequestSigner::SIGNER_SMS_PHONE_NUMBER_TYPE": |-
  Specifies the feature used with the `sms_phone_number`. Default `authentication`.

  If `authentication`, signer is sent a verification code via SMS that is required to access the document.

  If `delivery`, a link to complete the signature request is delivered via SMS (_and_ email).

"Sub::SignatureRequestTemplateSigner::DESCRIPTION": Add Signers to your Templated-based Signature Request.
"Sub::SignatureRequestTemplateSigner::EMAIL_ADDRESS": The email address of the signer.
"Sub::SignatureRequestTemplateSigner::NAME": The name of the signer.
"Sub::SignatureRequestTemplateSigner::PIN": The 4- to 12-character access code that will secure this signer's signature page.
"Sub::SignatureRequestTemplateSigner::ROLE": Must match an existing role in chosen Template(s). It's case-sensitive.
"Sub::SignatureRequestTemplateSigner::SMS_PHONE_NUMBER": |-
  An E.164 formatted phone number.

  **Note**: Not available in test mode and requires a Standard plan or higher.

"Sub::SignatureRequestTemplateSigner::SIGNER_SMS_PHONE_NUMBER_TYPE": |-
  Specifies the feature used with the `sms_phone_number`. Default `authentication`.

  If `authentication`, signer is sent a verification code via SMS that is required to access the document.

  If `delivery`, a link to complete the signature request is delivered via SMS (_and_ email).

"Sub::SignerRole::NAME": The role name of the signer that will be displayed when the template is used to create a signature request.
"Sub::SignerRole::ORDER": The order in which this signer role is required to sign.

"Sub::SigningOptions::DESCRIPTION": |-
  This allows the requester to specify the types allowed for creating a signature.

  **Note**: If `signing_options` are not defined in the request, the allowed types will default to those specified in the account settings.
"Sub::SigningOptions::DEFAULT": The default type shown (limited to the listed types)
"Sub::SigningOptions::DRAW": Allows drawing the signature
"Sub::SigningOptions::PHONE": Allows using a smartphone to email the signature
"Sub::SigningOptions::TYPE": Allows typing the signature
"Sub::SigningOptions::UPLOAD": Allows uploading the signature

"Sub::UnclaimedDraftSigner::DESCRIPTION": Add Signers to your Unclaimed Draft Signature Request.
"Sub::UnclaimedDraftSigner::EMAIL_ADDRESS": The email address of the signer.
"Sub::UnclaimedDraftSigner::NAME": The name of the signer.
"Sub::UnclaimedDraftSigner::ORDER": The order the signer is required to sign in.

"Sub::UnclaimedDraftTemplateSigner::DESCRIPTION": Add Signers to your Templated-based Signature Request.
"Sub::UnclaimedDraftTemplateSigner::ROLE": Must match an existing role in chosen Template(s).
"Sub::UnclaimedDraftTemplateSigner::NAME": The name of the signer filling the role of `role`.
"Sub::UnclaimedDraftTemplateSigner::EMAIL_ADDRESS": The email address of the signer filling the role of `role`.

"Sub::WhiteLabelingOptions::DESCRIPTION": |-
  An array of elements and values serialized to a string, to be used to customize the app's signer page. (Only applies to some API plans)

  Take a look at our [white labeling guide](/api/reference/white-labeling/) to learn more.
"Sub::WhiteLabelingOptions::RESET_TO_DEFAULT": Resets white labeling options to defaults. Only useful when updating an API App.

###################
# Response Models #
###################

"AccountCreateResponseExample::SUMMARY": Account Create
"AccountGetResponseExample::SUMMARY": Account Get
"AccountCreateOAuthResponseExample::SUMMARY": Account Create with OAuth Authorization
"AccountUpdateResponseExample::SUMMARY": Account Update
"AccountVerifyFoundResponseExample::SUMMARY": Account Found
"AccountVerifyNotFoundResponseExample::SUMMARY": Account Not Found
"AccountResponse::DESCRIPTION": Contains the Account information
"AccountVerifyResponse::DESCRIPTION": Contains the verified Account's information.
"Account::ACCOUNT_ID": The ID of the Account
"Account::EMAIL_ADDRESS": The email address associated with the Account.
"Account::CALLBACK_URL": The URL that Dropbox Sign events will `POST` to.
"Account::IS_LOCKED": Returns `true` if the user has been locked out of their account by a team admin.
"Account::IS_PAID_HS": Returns `true` if the user has a paid Dropbox Sign account.
"Account::IS_PAID_HF": Returns `true` if the user has a paid HelloFax account.
"Account::ROLE_CODE": The membership role for the team.
"Account::TEAM_ID": The id of the team account belongs to.
"Account::LOCALE": The locale used in this Account. Check out the list of [supported locales](/api/reference/constants/#supported-locales) to learn more about the possible values.
"Account::QUOTA": Details concerning remaining monthly quotas.
"AccountQuota::TEMPLATES_LEFT": API templates remaining.
"AccountQuota::TEMPLATES_TOTAL": Total API templates allowed.
"AccountQuota::API_SIGNATURE_REQUESTS_LEFT": API signature requests remaining.
"AccountQuota::DOCUMENTS_LEFT": Signature requests remaining.
"AccountQuota::SMS_VERIFICATIONS_LEFT": SMS verifications  remaining.

"ApiAppCreateResponseExample::SUMMARY": API App
"ApiAppGetResponseExample::SUMMARY": API App
"ApiAppListResponseExample::SUMMARY": API App List
"ApiAppUpdateResponseExample::SUMMARY": API App Update
"ApiAppResponse::CALLBACK_URL": The app's callback URL (for events)
"ApiAppResponse::CLIENT_ID": The app's client id
"ApiAppResponse::DESCRIPTION": Contains information about an API App.
"ApiAppResponse::CREATED_AT": The time that the app was created
"ApiAppResponse::DOMAINS": The domain name(s) associated with the app
"ApiAppResponse::NAME": The name of the app
"ApiAppResponse::IS_APPROVED": Boolean to indicate if the app has been approved

"ApiAppListResponse::DESCRIPTION": Contains information about API Apps.

"ApiAppResponseOAuth::DESCRIPTION": An object describing the app's OAuth properties, or null if OAuth is not configured for the app.
"ApiAppResponseOAuth::CALLBACK_URL": The app's OAuth callback URL.
"ApiAppResponseOAuth::CHARGES_USERS": Boolean indicating whether the app owner or the account granting permission is billed for OAuth requests.
"ApiAppResponseOAuth::SECRET": The app's OAuth secret, or null if the app does not belong to user.
"ApiAppResponseOAuth::SCOPES": Array of OAuth scopes used by the app.

"ApiAppResponseOptions::DESCRIPTION": An object with options that override account settings.
"ApiAppResponseOptions::CAN_INSERT_EVERYWHERE": Boolean denoting if signers can "Insert Everywhere" in one click while signing a document

"ApiAppResponseOwnerAccount::DESCRIPTION": An object describing the app's owner
"ApiAppResponseOwnerAccount::ACCOUNT_ID": The owner account's ID
"ApiAppResponseOwnerAccount::EMAIL_ADDRESS": The owner account's email address

"ApiAppResponseWhiteLabelingOptions::DESCRIPTION": An object with options to customize the app's signer page

"BulkSendJobGetResponseExample::SUMMARY": Bulk Send Job
"BulkSendJobListResponseExample::SUMMARY": Bulk Send Job List
"BulkSendJobListResponse::BULK_SEND_JOBS": Contains a list of BulkSendJobs that the API caller has access to.
"BulkSendJobResponse::BULK_SEND_JOB_ID": The id of the BulkSendJob.
"BulkSendJobResponse::DESCRIPTION": Contains information about the BulkSendJob such as when it was created and how many signature requests are queued.
"BulkSendJobResponse::TOTAL": The total amount of Signature Requests queued for sending.
"BulkSendJobResponse::IS_CREATOR": True if you are the owner of this BulkSendJob, false if it's been shared with you by a team member.
"BulkSendJobResponse::CREATED_AT": Time that the BulkSendJob was created.
"BulkSendJobGetResponse::SIGNATURE_REQUESTS": Contains information about the Signature Requests sent in bulk.
"BulkSendJobGetResponseSignatureRequests::BULK_SEND_JOB_ID": The id of the BulkSendJob.

"Common::RateLimiting::LIMIT": The maximum number of requests per hour that you can make.
"Common::RateLimiting::REMAINING": The number of requests remaining in the current rate limit window.
"Common::RateLimiting::RESET": The Unix time at which the rate limit will reset to its maximum.

"EmbeddedEditUrlResponseExample::SUMMARY": Embedded Edit URL
"EmbeddedSignUrlResponseExample::SUMMARY": Embedded Sign URL

"EmbeddedSignUrlResponseEmbedded::DESCRIPTION": An object that contains necessary information to set up embedded signing.
"EmbeddedSignUrlResponseEmbedded::SIGN_URL": A signature url that can be opened in an iFrame.
"EmbeddedSignUrlResponseEmbedded::EXPIRES_AT": The specific time that the the `sign_url` link expires, in epoch.

"EmbeddedEditUrlResponseEmbedded::DESCRIPTION": An embedded template object.
"EmbeddedEditUrlResponseEmbedded::EDIT_URL": A template url that can be opened in an iFrame.
"EmbeddedEditUrlResponseEmbedded::EXPIRES_AT":  The specific time that the the `edit_url` link expires, in epoch.

"EventCallbackAccountRequest::DESCRIPTION": |-
  **Account Callback Payloads --**
        Events that are reported at the Account level through the the *Account callback URL* defined in your [API settings](https://app.hellosign.com/home/myAccount#api). The *Account callback URL* can also be updated by calling [Update Account](/api/reference/operation/accountUpdate) and passing a `callback_url`.
"EventCallbackAccountSignatureRequestSentExample::SUMMARY": |-
  Example: signature_request_sent
"EventCallbackAccountTemplateCreatedExample::SUMMARY": |-
  Example: template_created
"EventCallbackAppAccountConfirmedExample::SUMMARY": |-
  Example: account_confirmed
"EventCallbackAppSignatureRequestSentExample::SUMMARY": |-
  Example: signature_request_sent
"EventCallbackAppTemplateCreatedExample::SUMMARY": |-
  Example: template_created
"EventCallbackAppRequest::DESCRIPTION": |-
  **API App Callback Payloads --**
  Events that are reported at the API App level through the *Event callback URL* defined in your [API settings](https://app.hellosign.com/home/myAccount#api) for a specific app. The *Event callback URL* can also be updated by calling [Update API App](/api/reference/operation/apiAppUpdate) and passing a `callback_url`.
"EventCallbackRequestEvent::DESCRIPTION": Basic information about the event that occurred.
"EventCallbackRequestEvent::EVENT_TIME": Time the event was created (using Unix time).
"EventCallbackRequestEvent::EVENT_TYPE": Type of callback event that was triggered.
"EventCallbackRequestEvent::EVENT_HASH": Generated hash used to verify source of event data.
"EventCallbackRequestEventMetadata::DESCRIPTION": Specific metadata about the event.
"EventCallbackRequestEventMetadata::RELATED_SIGNATURE_ID": Signature ID for a specific signer. Applicable to `signature_request_signed` and `signature_request_viewed` events.
"EventCallbackRequestEventMetadata::REPORTED_FOR_ACCOUNT_ID": Account ID the event was reported for.
"EventCallbackRequestEventMetadata::REPORTED_FOR_APP_ID": App ID the event was reported for.
"EventCallbackRequestEventMetadata::EVENT_MESSAGE": Message about a declined or failed (due to error) signature flow.
"EventCallbackSignatureRequestExample::SUMMARY": Event Callback Signature Request Example
"EventCallbackTemplateRequestExample::SUMMARY": Event Callback Template Example

"ListInfoResponse::DESCRIPTION": Contains pagination information about the data returned.
"ListInfoResponse::NUM_PAGES": Total number of pages available.
"ListInfoResponse::NUM_RESULTS": Total number of objects available.
"ListInfoResponse::PAGE": Number of the page being returned.
"ListInfoResponse::PAGE_SIZE": Objects returned per page.

"WarningResponse::LIST_DESCRIPTION": A list of warnings.
"WarningResponse::WARNING_MSG": Warning message
"WarningResponse::WARNING_NAME": Warning name

"SubAttachment::LIST_DESCRIPTION": A list describing the attachments

"OAuthTokenGenerateResponseExample::SUMMARY": Retrieving the OAuth token
"OAuthTokenRefreshResponseExample::SUMMARY": Refresh an existing OAuth token
"OAuthTokenResponse::ACCESS_TOKEN": The access token used for sending API calls on behalf of the user that authorized the API App.
"OAuthTokenResponse::TOKEN_TYPE": The authorization method used with the token. Passed in the `Authorization` header of the HTTP request as `Bearer <hs-oauth-access-token>`.
"OAuthTokenResponse::REFRESH_TOKEN": The long-lived refresh token used to refresh an expired `access_token` without forcing the user through another OAuth approval flow (unless the apps `access_scope` has changed or the user revoked their authorization).
"OAuthTokenResponse::EXPIRES_IN": Number of seconds until the `access_token` expires. Uses epoch time.
"OAuthTokenResponse::STATE": The string that was passed back with `state` during the initial authorization step.

"ReportCreateResponseExample::SUMMARY": Report
"ReportResponse::DESCRIPTION": Contains information about the report request.
"ReportResponse::END_DATE": The (inclusive) end date for the report data in MM/DD/YYYY format.
"ReportResponse::REPORT_TYPE": The type(s) of the report you are requesting. Allowed values are "user_activity" and "document_status". User activity reports contain list of all users and their activity during the specified date range. Document status report contain a list of signature requests created in the specified time range (and their status).
"ReportResponse::START_DATE": The (inclusive) start date for the report data in MM/DD/YYYY format.
"ReportResponse::SUCCESS": A message indicating the requested operation's success

"SignatureRequestCreateEmbeddedResponseExample::SUMMARY": Create Embedded Signature Request
"SignatureRequestCreateEmbeddedWithTemplateResponseExample::SUMMARY": Create Embedded Signature Request With Template
"SignatureRequestGetResponseExample::SUMMARY": Get Signature Request
"SignatureRequestFilesResponseExample::SUMMARY": Signature Requests Files
"SignatureRequestListResponseExample::SUMMARY": List Signature Requests
"SignatureRequestReleaseHoldResponseExample::SUMMARY": Send Signature Release Hold
"SignatureRequestRemindResponseExample::SUMMARY": Send Signature Request Reminder
"SignatureRequestSendResponseExample::SUMMARY": Send Signature Request
"SignatureRequestSendWithTemplateResponseExample::SUMMARY": Send Signature Request With Template
"SignatureRequestBulkSendWithTemplateResponseExample::SUMMARY": Send Signature Request With Template
"SignatureRequestBulkCreateEmbeddedWithTemplateResponseExample::SUMMARY": Bulk Send Create Embedded Signature Request With Template
"SignatureRequestUpdateResponseExample::SUMMARY": Signature Request Update

"SignatureRequestResponse::CC_EMAIL_ADDRESSES": A list of email addresses that were CCed on the SignatureRequest. They will receive a copy of the final PDF once all the signers have signed.
"SignatureRequestResponse::CREATED_AT": Time the signature request was created.
"SignatureRequestResponse::DESCRIPTION": Contains information about a signature request.
"SignatureRequestResponse::DETAILS_URL": The URL where the requester and the signers can view the current status of the SignatureRequest.
"SignatureRequestResponse::FILES_URL": The URL where a copy of the request's documents can be downloaded.
"SignatureRequestResponse::HAS_ERROR": Whether or not an error occurred (either during the creation of the SignatureRequest or during one of the signings).
"SignatureRequestResponse::IS_COMPLETE": Whether or not the SignatureRequest has been fully executed by all signers.
"SignatureRequestResponse::IS_DECLINED": Whether or not the SignatureRequest has been declined by a signer.
"SignatureRequestResponse::MESSAGE": The custom message in the email that was initially sent to the signers.
"SignatureRequestResponse::METADATA": The metadata attached to the signature request.
"SignatureRequestResponse::ORIGINAL_TITLE": Default Label for account.
"SignatureRequestResponse::REQUESTER_EMAIL_ADDRESS": The email address of the initiator of the SignatureRequest.
"SignatureRequestResponse::SIGNATURE_REQUEST_ID": The id of the SignatureRequest.
"SignatureRequestResponse::SIGNING_REDIRECT_URL": The URL you want the signer redirected to after they successfully sign.
"SignatureRequestResponse::SIGNING_URL": The URL where a signer, after authenticating, can sign the documents. This should only be used by users with existing Dropbox Sign accounts as they will be required to log in before signing.
"SignatureRequestResponse::SUBJECT": The subject in the email that was initially sent to the signers.
"SignatureRequestResponse::TEMPLATE_IDS": Templates IDs used in this SignatureRequest (if any).
"SignatureRequestResponse::TEST_MODE": Whether this is a test signature request. Test requests have no legal value. Defaults to `false`.
"SignatureRequestResponse::TITLE": The title the specified Account uses for the SignatureRequest.
"SignatureRequestResponse::EXPIRES_AT": The time when the signature request will expire unsigned signatures. See [Signature Request Expiration Date](https://developers.hellosign.com/docs/signature-request/expiration/) for details.

"SignatureRequestListResponse::DESCRIPTION": Contains information about signature requests.

"SignatureRequestResponseCustomField::DESCRIPTION": |-
  An array of Custom Field objects containing the name and type of each custom field.

  * Text Field uses `SignatureRequestResponseCustomFieldText`
  * Checkbox Field uses `SignatureRequestResponseCustomFieldCheckbox`
"SignatureRequestResponseCustomField::DESCRIPTION_EXTENDS": This class extends `SignatureRequestResponseCustomFieldBase`.
"SignatureRequestResponseCustomField::API_ID": The unique ID for this field.
"SignatureRequestResponseCustomField::EDITOR": The name of the Role that is able to edit this field.
"SignatureRequestResponseCustomField::NAME": The name of the Custom Field.
"SignatureRequestResponseCustomField::REQUIRED": A boolean value denoting if this field is required.
"SignatureRequestResponseCustomField::TYPE": The type of this Custom Field. Only 'text' and 'checkbox' are currently supported.
"SignatureRequestResponseCustomField::VALUE_TEXT": A text string for text fields
"SignatureRequestResponseCustomField::VALUE_CHECKBOX": A true/false for checkbox fields

"SignatureRequestResponseAttachment::DESCRIPTION": Signer attachments.
"SignatureRequestResponseAttachment::ID": The unique ID for this attachment.
"SignatureRequestResponseAttachment::SIGNER": The Signer this attachment is assigned to.
"SignatureRequestResponseAttachment::NAME": The name of this attachment.
"SignatureRequestResponseAttachment::INSTRUCTIONS": Instructions for Signer.
"SignatureRequestResponseAttachment::REQUIRED": A boolean value denoting if this attachment is required.
"SignatureRequestResponseAttachment::UPLOADED_AT": Timestamp when attachment was uploaded by Signer.

"SignatureRequestResponseData::DESCRIPTION": An array of form field objects containing the name, value, and type of each textbox or checkmark field filled in by the signers.
"SignatureRequestResponseData::API_ID": The unique ID for this field.
"SignatureRequestResponseData::NAME": The name of the form field.
"SignatureRequestResponseData::REQUIRED": A boolean value denoting if this field is required.
"SignatureRequestResponseData::SIGNATURE_ID": The ID of the signature to which this response is linked.
"SignatureRequestResponseDataValue::TEXT_TYPE": A text input field
"SignatureRequestResponseDataValue::CHECKBOX_TYPE": A yes/no checkbox
"SignatureRequestResponseDataValue::DATESIGNED_TYPE": A date
"SignatureRequestResponseDataValue::DROPDOWN_TYPE": An input field for dropdowns
"SignatureRequestResponseDataValue::INITIAL_TYPE": An input field for initials
"SignatureRequestResponseDataValue::RADIO_TYPE": An input field for radios
"SignatureRequestResponseDataValue::SIGNATURE_TYPE": A signature input field
"SignatureRequestResponseDataValue::TEXTMERGE_TYPE": A text field that has default text set by the api
"SignatureRequestResponseDataValue::CHECKBOXMERGE_TYPE": A checkbox field that has default value set by the api
"SignatureRequestResponseDataValue::VALUE": The value of the form field.

"SignatureRequestResponseSignatures::DESCRIPTION": An array of signature objects, 1 for each signer.
"SignatureRequestResponseSignatures::DECLINE_REASON": The reason provided by the signer for declining the request.
"SignatureRequestResponseSignatures::ERROR": Error message pertaining to this signer, or null.
"SignatureRequestResponseSignatures::HAS_PIN": Boolean to indicate whether this signature requires a PIN to access.
"SignatureRequestResponseSignatures::HAS_SMS_AUTH": Boolean to indicate whether this signature has SMS authentication enabled.
"SignatureRequestResponseSignatures::HAS_SMS_DELIVERY": Boolean to indicate whether this signature has SMS delivery enabled.
"SignatureRequestResponseSignatures::SMS_PHONE_NUMBER": The SMS phone number used for authentication or signature request delivery.
"SignatureRequestResponseSignatures::LAST_VIEWED_AT": The time that the document was last viewed by this signer or null.
"SignatureRequestResponseSignatures::LAST_REMINDED_AT": The time the last reminder email was sent to the signer or null.
"SignatureRequestResponseSignatures::NUM_PAGES": Total number of pages available
"SignatureRequestResponseSignatures::ORDER": If signer order is assigned this is the 0-based index for this signer.
"SignatureRequestResponseSignatures::REASSIGNED_BY": Email address of original signer who reassigned to this signer.
"SignatureRequestResponseSignatures::REASSIGNMENT_REASON": Reason provided by original signer who reassigned to this signer.
"SignatureRequestResponseSignatures::REASSIGNED_FROM": Previous signature identifier.
"SignatureRequestResponseSignatures::SIGNATURE_ID": Signature identifier.
"SignatureRequestResponseSignatures::SIGNED_AT": Time that the document was signed or null.
"SignatureRequestResponseSignatures::SIGNER_EMAIL_ADDRESS": The email address of the signer.
"SignatureRequestResponseSignatures::SIGNER_GROUP_GUID": Signer Group GUID
"SignatureRequestResponseSignatures::SIGNER_NAME": The name of the signer.
"SignatureRequestResponseSignatures::SIGNER_ROLE": The role of the signer.
"SignatureRequestResponseSignatures::STATUS_CODE": "The current status of the signature. eg: awaiting_signature, signed, declined."

"TeamAddMemberResponseExample::SUMMARY": Team Add Member
"TeamCreateResponseExample::SUMMARY": Team Create
"TeamGetResponseExample::SUMMARY": Team Get
"TeamInfoResponseExample::SUMMARY": Team Get Info
"TeamMembersResponseExample::SUMMARY": Team Members List
"TeamInvitesResponseExample::SUMMARY": Team Invites
"TeamSubTeamsResponseExample::SUMMARY": Team Sub Teams List
"TeamRemoveMemberResponseExample::SUMMARY": Team Remove Member
"TeamUpdateResponseExample::SUMMARY": Team Update
"TeamDoesNotExistResponseExample::SUMMARY": Team Does Not Exist
"Team::NAME": The name of your Team
"Team::INVITED_ACCOUNTS": A list of all Accounts that have an outstanding invitation to join your Team. Note that this response is a subset of the response parameters found in `GET /account`.
"TeamGeneral::TEAM_ID": The id of a team
"TeamGeneral::NAME": The name of a team
"TeamGeneral::NUM_MEMBERS": Number of members within a team
"TeamGeneral::NUM_SUB_TEAMS": Number of sub teams within a team
"TeamResponse::DESCRIPTION": Contains information about your team and its members

"TemplateAddUserResponseExample::SUMMARY": Add User to Template
"TemplateCreateEmbeddedDraftResponseExample::SUMMARY": Create Embedded Draft Template
"TemplateFilesResponseExample::SUMMARY": Template Files
"TemplateGetResponseExample::SUMMARY": Get Template
"TemplateListResponseExample::SUMMARY": List Templates
"TemplateRemoveUserResponseExample::SUMMARY": Remove User from Template
"TemplateUpdateFilesResponseExample::SUMMARY": Update Template Files

"TemplateResponse::DESCRIPTION": Contains information about the templates you and your team have created.
"TemplateResponse::TEMPLATE_ID": The id of the Template.
"TemplateResponse::CAN_EDIT": Indicates whether edit rights have been granted to you by the owner (always `true` if that's you).
"TemplateResponse::IS_CREATOR": "`true` if you are the owner of this template, `false` if it's been shared with you by a team member."
"TemplateResponse::IS_EMBEDDED": "`true` if this template was created using an embedded flow, `false` if it was created on our website."
"TemplateResponse::IS_LOCKED": |-
  Indicates whether the template is locked.
  If `true`, then the template was created outside your quota and can only be used in `test_mode`.
  If `false`, then the template is within your quota and can be used to create signature requests.
"TemplateResponse::MESSAGE": The default message that will be sent to signers when using this Template to send a SignatureRequest. This can be overridden when sending the SignatureRequest.
"TemplateResponse::METADATA": The metadata attached to the template.
"TemplateResponse::SIGNER_ROLES": An array of the designated signer roles that must be specified when sending a SignatureRequest using this Template.
"TemplateResponse::CC_ROLES": An array of the designated CC roles that must be specified when sending a SignatureRequest using this Template.
"TemplateResponse::DOCUMENTS": An array describing each document associated with this Template. Includes form field data for each document.
"TemplateResponse::CUSTOM_FIELDS": An array of Custom Field objects.
"TemplateResponse::NAMED_FORM_FIELDS": Deprecated. Use `form_fields` inside the [documents](https://developers.hellosign.com/api/reference/operation/templateGet/#!c=200&path=template/documents&t=response) array instead.
"TemplateResponse::ACCOUNTS": An array of the Accounts that can use this Template.
"TemplateResponse::TITLE": The title of the Template. This will also be the default subject of the message sent to signers when using this Template to send a SignatureRequest. This can be overridden when sending the SignatureRequest.
"TemplateResponse::UPDATED_AT": Time the template was last updated.

"TemplateListResponse::DESCRIPTION": List of templates that the API caller has access to.

"TemplateCreateEmbeddedDraftResponseTemplate::DESCRIPTION": "Template object with parameters: `template_id`, `edit_url`, `expires_at`."
"TemplateCreateEmbeddedDraftResponseTemplate::EDIT_URL": Link to edit the template.
"TemplateCreateEmbeddedDraftResponseTemplate::EXPIRES_AT": When the link expires.

"TemplateUpdateFilesResponseTemplate::DESCRIPTION": "Contains template id"

"TemplateResponseAccount::ACCOUNT_ID": The id of the Account.
"TemplateResponseAccount::EMAIL_ADDRESS": The email address associated with the Account.
"TemplateResponseAccount::IS_LOCKED": Returns `true` if the user has been locked out of their account by a team admin.
"TemplateResponseAccount::IS_PAID_HS": Returns `true` if the user has a paid Dropbox Sign account.
"TemplateResponseAccount::IS_PAID_HF": Returns `true` if the user has a paid HelloFax account.
"TemplateResponseAccount::QUOTAS": An array of the designated CC roles that must be specified when sending a SignatureRequest using this Template.

"TemplateResponseAccountQuota::DESCRIPTION": An array of the designated CC roles that must be specified when sending a SignatureRequest using this Template.
"TemplateResponseAccountQuota::API_SIGNATURE_REQUESTS_LEFT": API signature requests remaining.
"TemplateResponseAccountQuota::DOCUMENTS_LEFT": Signature requests remaining.
"TemplateResponseAccountQuota::TEMPLATES_LEFT": API templates remaining.
"TemplateResponseAccountQuota::SMS_VERIFICATIONS_LEFT": SMS verifications remaining.

"TemplateResponseCCRole::TEMPLATES_LEFT": The name of the Role.

"TemplateResponseDocument::INDEX": Document ordering, the lowest index is displayed first and the highest last (0-based indexing).
"TemplateResponseDocument::NAME": Name of the associated file.
"TemplateResponseDocument::FIELD_GROUPS": An array of Form Field Group objects.
"TemplateResponseDocument::STATIC_FIELDS": |-
  An array describing static overlay fields.
  <b>Note</b> only available for certain subscriptions.
"TemplateResponseDocument::CUSTOM_FIELDS": An array of Document Custom Field objects.
"TemplateResponseDocument::FORM_FIELDS": An array of Form Field objects containing the name and type of each named textbox and checkmark field.

"TemplateResponseDocumentCustomField::GROUP": The name of the group this field is in. If this field is not a group, this defaults to `null`.
"TemplateResponseDocumentCustomField::HEIGHT": The height in pixels of this form field.
"TemplateResponseDocumentCustomField::NAME": The name of the Custom Field.
"TemplateResponseDocumentCustomField::REQUIRED": Boolean showing whether or not this field is required.
"TemplateResponseDocumentCustomField::TYPE": The type of this Custom Field. Only `text` and `checkbox` are currently supported.
"TemplateResponseDocumentCustomField::WIDTH": The width in pixels of this form field.
"TemplateResponseDocumentCustomField::X": The horizontal offset in pixels for this form field.
"TemplateResponseDocumentCustomField::Y": The vertical offset in pixels for this form field.
"TemplateResponseDocumentCustomField::SIGNER": The signer of the Custom Field.
"TemplateResponseDocumentCustomField::API_ID": The unique ID for this field.
"TemplateResponseDocumentCustomField::IS_MULTILINE": Whether this form field is multiline text.
"TemplateResponseDocumentCustomField::ORIGINAL_FONT_SIZE": Original font size used in this form field's text.
"TemplateResponseDocumentCustomField::FONT_FAMILY": Font family used in this form field's text.
"TemplateResponseDocumentCustomField::NAMED_FORM_FIELDS": Deprecated. Use `form_fields` inside the [documents](https://developers.hellosign.com/api/reference/operation/templateGet/#!c=200&path=template/documents&t=response) array instead.

"TemplateResponseCustomField::NAME": The name of the Custom Field.
"TemplateResponseCustomField::TYPE": The type of this Custom Field. Only `text` and `checkbox` are currently supported.
"TemplateResponseCustomField::X": The horizontal offset in pixels for this form field.
"TemplateResponseCustomField::Y": The vertical offset in pixels for this form field.
"TemplateResponseCustomField::WIDTH": The width in pixels of this form field.
"TemplateResponseCustomField::HEIGHT": The height in pixels of this form field.
"TemplateResponseCustomField::REQUIRED": Boolean showing whether or not this field is required.
"TemplateResponseCustomField::API_ID": The unique ID for this field.
"TemplateResponseCustomField::GROUP": The name of the group this field is in. If this field is not a group, this defaults to `null`.
"TemplateResponseCustomField::IS_MULTILINE": Whether this form field is multiline text.
"TemplateResponseCustomField::ORIGINAL_FONT_SIZE": Original font size used in this form field's text.
"TemplateResponseCustomField::FONT_FAMILY": Font family used in this form field's text.

"TemplateResponseNamedFormField::NAME": The name of the Named Form Field.
"TemplateResponseNamedFormField::TYPE": The type of this Named Form Field. Only `text` and `checkbox` are currently supported.
"TemplateResponseNamedFormField::SIGNER": The signer of the Named Form Field.
"TemplateResponseNamedFormField::X": The horizontal offset in pixels for this form field.
"TemplateResponseNamedFormField::Y": The vertical offset in pixels for this form field.
"TemplateResponseNamedFormField::WIDTH": The width in pixels of this form field.
"TemplateResponseNamedFormField::HEIGHT": The height in pixels of this form field.
"TemplateResponseNamedFormField::REQUIRED": Boolean showing whether or not this field is required.
"TemplateResponseNamedFormField::API_ID": The unique ID for this field.
"TemplateResponseNamedFormField::GROUP": The name of the group this field is in. If this field is not a group, this defaults to `null`.
"TemplateResponseNamedFormField::IS_MULTILINE": Whether this form field is multiline text.
"TemplateResponseNamedFormField::ORIGINAL_FONT_SIZE": Original font size used in this form field's text.
"TemplateResponseNamedFormField::FONT_FAMILY": Font family used in this form field's text.

"TemplateResponseFieldAvgTextLength::DESCRIPTION": Average text length in this field.
"TemplateResponseFieldAvgTextLength::NUM_CHARS_PER_LINE": Number of character per line.
"TemplateResponseFieldAvgTextLength::NUM_LINES": Number of lines.

"TemplateResponseDocumentFieldGroup::NAME": The name of the form field group.
"TemplateResponseDocumentFieldGroup::RULE": The rule used to validate checkboxes in the form field group. See [checkbox field grouping](/api/reference/constants/#checkbox-field-grouping).

"TemplateResponseDocumentFormField::API_ID": A unique id for the form field.
"TemplateResponseDocumentFormField::GROUP": The name of the group this field is in. If this field is not a group, this defaults to `null`.
"TemplateResponseDocumentFormField::HEIGHT": The height in pixels of this form field.
"TemplateResponseDocumentFormField::NAME": The name of the form field.
"TemplateResponseDocumentFormField::REQUIRED": Boolean showing whether or not this field is required.
"TemplateResponseDocumentFormField::TYPE": The type of this form field. See [field types](/api/reference/constants/#field-types).
"TemplateResponseDocumentFormField::SIGNER": The signer of the Form Field.
"TemplateResponseDocumentFormField::WIDTH": The width in pixels of this form field.
"TemplateResponseDocumentFormField::X": The horizontal offset in pixels for this form field.
"TemplateResponseDocumentFormField::Y": The vertical offset in pixels for this form field.
"TemplateResponseDocumentFormField::ORIGINAL_FONT_SIZE": Original font size used in this form field's text.
"TemplateResponseDocumentFormField::AVG_TEXT_LENGTH": Average text length in this field.
"TemplateResponseDocumentFormField::IS_MULTILINE": Whether this form field is multiline text.
"TemplateResponseDocumentFormField::FONT_FAMILY": Font family used in this form field's text.

"TemplateResponseDocumentFormField::DESCRIPTION": Average text length in this field.
"TemplateResponseDocumentFormField::NUM_LINES": Number of lines.
"TemplateResponseDocumentFormField::NUM_CHARS_PER_LINE": Number of character per line.

"TemplateResponseDocumentStaticField::NAME": The name of the static field.
"TemplateResponseDocumentStaticField::TYPE": The type of this static field. See [field types](/api/reference/constants/#field-types).
"TemplateResponseDocumentStaticField::SIGNER": The signer of the Static Field.
"TemplateResponseDocumentStaticField::X": The horizontal offset in pixels for this static field.
"TemplateResponseDocumentStaticField::Y": The vertical offset in pixels for this static field.
"TemplateResponseDocumentStaticField::WIDTH": The width in pixels of this static field.
"TemplateResponseDocumentStaticField::HEIGHT": The height in pixels of this static field.
"TemplateResponseDocumentStaticField::REQUIRED": Boolean showing whether or not this field is required.
"TemplateResponseDocumentStaticField::API_ID": A unique id for the static field.
"TemplateResponseDocumentStaticField::GROUP": The name of the group this field is in. If this field is not a group, this defaults to `null`.

"TemplateResponseSignerRole::DESCRIPTION": An array of the designated signer roles that must be specified when sending a SignatureRequest using this Template.
"TemplateResponseSignerRole::NAME": The name of the Role.
"TemplateResponseSignerRole::ORDER": If signer order is assigned this is the 0-based index for this role.

"FileResponse::FILE_URL": URL to the file.
"FileResponse::EXPIRES_AT": When the link expires.
"FileResponse::DATA_URI": File as base64 encoded string.
"FileResponse::FILE": Requested file. This field is used by SDK only.

"UnclaimedDraftCreateResponseExample::SUMMARY": Unclaimed Draft Create
"UnclaimedDraftCreateEmbeddedResponseExample::SUMMARY": Unclaimed Draft Create Embedded
"UnclaimedDraftCreateEmbeddedWithTemplateResponseExample::SUMMARY": Unclaimed Draft Create Embedded With Template
"UnclaimedDraftEditAndResendExample::SUMMARY": Unclaimed Draft Edit and Resend
"UnclaimedDraft::CLAIM_URL": The URL to be used to claim this UnclaimedDraft.
"UnclaimedDraft::EXPIRES_AT": When the link expires.
"UnclaimedDraft::REQUESTING_REDIRECT_URL": The URL you want signers redirected to after they successfully request a signature (Will only be returned in the response if it is applicable to the request.).
"UnclaimedDraft::SIGNATURE_REQUEST_ID": The ID of the signature request that is represented by this UnclaimedDraft.
"UnclaimedDraft::SIGNING_REDIRECT_URL": The URL you want signers redirected to after they successfully sign.
"UnclaimedDraft::TEST_MODE": Whether this is a test draft. Signature requests made from test drafts have no legal value.

"UnclaimedDraftResponse::DESCRIPTION": A group of documents that a user can take ownership of via the claim URL.

"ErrorResponseError::DESCRIPTION": Contains information about an error that occurred.
"ErrorResponseError::ERROR_MSG": Message describing an error.
"ErrorResponseError::ERROR_PATH": Path at which an error occurred.
"ErrorResponseError::ERROR_NAME": Name of the error.

"Error::400": Error 400 bad_request
"Error::401": Error 401 unauthorized
"Error::402": Error 402 payment_required
"Error::403": Error 403 forbidden
"Error::404": Error 404 not_found
"Error::409": Error 409 conflict
"Error::410": Error 410 deleted
"Error::422": Error 422 unprocessable_entity
"Error::429": Error 429 exceeded_rate
"Error::4XX": Error 4XX failed_operation

#########################
# SEO for API Reference #
#########################
"AccountCreate::SEO::TITLE": "Create Account | API Documentation | Dropbox Sign for Developers"
"AccountCreate::SEO::DESCRIPTION": "The Dropbox Sign API allows you to build with a range of tools. Find out how to create a new Dropbox Sign Account using the specified `email_address` here."
"AccountGet::SEO::TITLE": "Get Account | API Documentation | Dropbox Sign for Developers"
"AccountGet::SEO::DESCRIPTION": "The Dropbox Sign API allows you to build with a wide range of tools. To find out how to return the properties and settings of your Account, click here."
"AccountUpdate::SEO::TITLE": "Update Account | API Documentation | Dropbox Sign for Developers"
"AccountUpdate::SEO::DESCRIPTION": "The Dropbox Sign API allows you to build with a wide range of tools. To find out how update the properties and settings of your Account, click here."
"AccountVerify::SEO::TITLE": "Verify Account | API Documentation | Dropbox Sign for Developers"
"AccountVerify::SEO::DESCRIPTION": "The Dropbox Sign API allows you to build with a wide range of tools. To find out how to verify whether an Account exists, click here."
"ApiAppCreate::SEO::TITLE": "Create API App | API Documentation | Dropbox Sign for Developers"
"ApiAppCreate::SEO::DESCRIPTION": "The Dropbox Sign API allows you to build custom integrations with a wide range of tools. To find out how to create a new API App, click here."
"ApiAppDelete::SEO::TITLE": "Delete API App | API Documentation | Dropbox Sign for Developers"
"ApiAppDelete::SEO::DESCRIPTION": "The Dropbox Sign API allows you to build custom integrations with a wide range of tools. To find out how to delete an API App, click here."
"ApiAppGet::SEO::TITLE": "Get API App | API Documentation | Dropbox Sign for Developers"
"ApiAppGet::SEO::DESCRIPTION": "The Dropbox Sign API allows you to build with a wide range of tools. To find out how to return an object with information about an API App, click here."
"ApiAppList::SEO::TITLE": "List API Apps | API Documentation | Dropbox Sign for Developers"
"ApiAppList::SEO::DESCRIPTION": "The Dropbox Sign API allows you to build with a wide range of tools. To find out how to return a list of API Apps that are accessible by you, click here."
"ApiAppUpdate::SEO::TITLE": "Update API App | API Documentation | Dropbox Sign for Developers"
"ApiAppUpdate::SEO::DESCRIPTION": "The Dropbox Sign API allows you to build custom integrations with a wide range of tools. To find out how to update an App that you own, click here."
"BulkSendJobGet::SEO::TITLE": "Get Bulk Send Job | API Documentation | Dropbox Sign for Developers"
"BulkSendJobGet::SEO::DESCRIPTION": "The Dropbox Sign API allows you to build custom integrations. To find out how to return the status of the BulkSendJob and SignatureRequests, click here."
"BulkSendJobList::SEO::TITLE": "List Bulk Send Jobs | Documentation | Dropbox Sign for Developers"
"BulkSendJobList::SEO::DESCRIPTION": "The Dropbox Sign API allows you to build custom integrations. To find out how to return a list of BulkSendJob that you can access, click here."
"EmbeddedEditUrl::SEO::TITLE": "Get Embedded Template URL | iFrame | Dropbox Sign for Developers"
"EmbeddedEditUrl::SEO::DESCRIPTION": "The Dropbox Sign API allows you to build custom integrations. To find out how to retrieve an embedded iFrame object containing a template url, click here."
"EmbeddedSignUrl::SEO::TITLE": "Get Embedded Sign URL | iFrame | Dropbox Sign for Developers"
"EmbeddedSignUrl::SEO::DESCRIPTION": "The Dropbox Sign API allows you to build custom integrations. To find out how to retrieve an embedded iFrame object containing a signature url, click here."
"OAuthTokenGenerate::SEO::TITLE": "Generate OAuth Token | Documentation | Dropbox Sign for Developers"
"OAuthTokenGenerate::SEO::DESCRIPTION": "The RESTful Dropbox Sign API easily allows you to build custom eSign integrations. To find out how to generate a new OAuth token with the API, click here."
"OAuthTokenRefresh::SEO::TITLE": "OAuth Token Refresh | Documentation | Dropbox Sign for Developers"
"OAuthTokenRefresh::SEO::DESCRIPTION": "The RESTful Dropbox Sign API easily allows you to build custom eSign integrations. To find out how to refresh your OAuth token with the API, click here."
"ReportCreate::SEO::TITLE": "Create Report | API Documentation | Dropbox Sign for Developers"
"ReportCreate::SEO::DESCRIPTION": "The RESTful Dropbox Sign API easily allows you to build custom eSign integrations. To find out how to request the creation of one or more reports, click here."
"SignatureRequestBulkCreateEmbeddedWithTemplate::SEO::TITLE": "Embedded Bulk Send with Template | Dropbox Sign for Developers"
"SignatureRequestBulkCreateEmbeddedWithTemplate::SEO::DESCRIPTION": "The RESTful Dropbox Sign API allows you to build custom integrations. To find out how to create embedded BulkSendJob signature requests, click here."
"SignatureRequestBulkSendWithTemplate::SEO::TITLE": "Bulk Send with Template | REST API | Dropbox Sign for Developers"
"SignatureRequestBulkSendWithTemplate::SEO::DESCRIPTION": "The RESTful Dropbox Sign API allows you to build custom integrations. To find out how to create BulkSendJob for up to 250 signature requests, click here."
"SignatureRequestCancel::SEO::TITLE": "Cancel Incomplete Signature Request | Dropbox Sign for Developers"
"SignatureRequestCancel::SEO::DESCRIPTION": "The RESTful Dropbox Sign API easily allows you to build custom eSign integrations. To find out how to cancel an incomplete signature request, click here."
"SignatureRequestCreateEmbedded::SEO::TITLE": "Create Embedded Signature Request | Dropbox Sign for Developers"
"SignatureRequestCreateEmbedded::SEO::DESCRIPTION": "The RESTful Dropbox Sign API easily allows you to build custom integrations. To find out how to create a new SignatureRequest in an iFrame, click here."
"SignatureRequestCreateEmbeddedWithTemplate::SEO::TITLE": "Signature Request with Template | Dropbox Sign for Developers"
"SignatureRequestCreateEmbeddedWithTemplate::SEO::DESCRIPTION": "The Dropbox Sign API allows you to build custom integrations. To find out how to create a new SignatureRequest based on the given Template, click here."
"SignatureRequestFiles::SEO::TITLE": "Download Files | API Documentation | Dropbox Sign for Developers"
"SignatureRequestFiles::SEO::DESCRIPTION": "The RESTful Dropbox Sign API allows you to build custom integrations. To find out how to get the current documents specified by the parameters, click here"
"SignatureRequestGet::SEO::TITLE": "Get Signature Request | Documentation | Dropbox Sign for Developers"
"SignatureRequestGet::SEO::DESCRIPTION": "The Dropbox Sign API allows you to build custom integrations. To find out how to return the status of SignatureRequest specified by the parameters, click here."
"SignatureRequestList::SEO::TITLE": "List Signature Requests | REST API | Dropbox Sign for Developers"
"SignatureRequestList::SEO::DESCRIPTION": "The Dropbox Sign API allows you to build custom integrations. To find out how to return a list of SignatureRequests that you can access, click here."
"SignatureRequestReleaseHold::SEO::TITLE": "Release On-Hold Signature Request | Dropbox Sign for Developers"
"SignatureRequestReleaseHold::SEO::DESCRIPTION": "The RESTful Dropbox Sign API allows you to build custom eSign integrations. To find out how to release an on-hold SignatureRequest, click here."
"SignatureRequestRemind::SEO::TITLE": "Send Request Reminder | REST API | Dropbox Sign for Developers"
"SignatureRequestRemind::SEO::DESCRIPTION": "The RESTful Dropbox Sign API allows you to build custom eSign integrations. To find out how to send an email reminder to the signer, click here."
"SignatureRequestRemove::SEO::TITLE": "Remove Signature Request Access | Dropbox Sign for Developers"
"SignatureRequestRemove::SEO::DESCRIPTION": "The RESTful Dropbox Sign API allows you to build custom integrations. To find out how to remove your access to a completed signature request, click here."
"SignatureRequestSend::SEO::TITLE": "Send Signature Request | REST API | Dropbox Sign for Developers"
"SignatureRequestSend::SEO::DESCRIPTION": "Dropbox Sign API allows you to build custom integrations. To find out how to create and send new SignatureRequest with the submitted documents, click here."
"SignatureRequestSendWithTemplate::SEO::TITLE": "Send with Template | API Documentation | Dropbox Sign for Developers"
"SignatureRequestSendWithTemplate::SEO::DESCRIPTION": "Dropbox Sign API allows you to build custom integrations. To find out how to create and send a new SignatureRequest based off of the Template, click here."
"SignatureRequestUpdate::SEO::TITLE": "Update Signature Request | REST API | Dropbox Sign for Developers"
"SignatureRequestUpdate::SEO::DESCRIPTION": "Dropbox Sign API allows you to build custom integrations. To find out how to update the email address/name for a signer on a signature request, click here."
"TeamAddMember::SEO::TITLE": "Add User to Team | API Documentation | Dropbox Sign for Developers"
"TeamAddMember::SEO::DESCRIPTION": "The RESTful Dropbox Sign API easily allows you to build custom eSign integrations. To find out how to invite a specified user to your Team, click here."
"TeamCreate::SEO::TITLE": "Create Team | REST API Documentation | Dropbox Sign for Developers"
"TeamCreate::SEO::DESCRIPTION": "The RESTful Dropbox Sign API allows you to build custom eSign integrations. To find out how to create a new team and make yourself a member, click here."
"TeamDelete::SEO::TITLE": "Delete Team | REST API Documentation | Dropbox Sign for Developers"
"TeamDelete::SEO::DESCRIPTION": "The RESTful Dropbox Sign API easily allows you to build custom eSign integrations. To find out how to delete a team you are a member of, click here."
"TeamGet::SEO::TITLE": "Get Team | REST API Documentation | Dropbox Sign for Developers"
"TeamGet::SEO::DESCRIPTION": "The RESTful Dropbox Sign API easily allows you to build custom eSign integrations. To find out how to return information about your Team, click here."
"TeamInfo::SEO::TITLE": "Get Team Info | Dropbox Sign for Developers"
"TeamInfo::SEO::DESCRIPTION": "The Dropbox Sign API allows you automate your team management. To find out how to get information about a specific team, click here."
"TeamMembers::SEO::TITLE": "List Team Members | Dropbox Sign for Developers"
"TeamMembers::SEO::DESCRIPTION": "The Dropbox Sign API allows you automate your team management. To find out how to get a list of team members and their roles for a specific team, click here."
"TeamRemoveMember::SEO::TITLE": "Remove User from Team | REST API | Dropbox Sign for Developers"
"TeamRemoveMember::SEO::DESCRIPTION": "The RESTful Dropbox Sign API easily allows you to build custom eSign integrations. To find out how to remove a user Account from your Team, click here."
"TeamSubTeams::SEO::TITLE": "List Sub Teams | Dropbox Sign for Developers"
"TeamSubTeams::SEO::DESCRIPTION": "The Dropbox Sign API allows you automate your team management. To find out how to get a list of sub teams that exist for a given team, click here."
"TeamUpdate::SEO::TITLE": "Update Team | API Documentation | Dropbox Sign for Developers"
"TeamUpdate::SEO::DESCRIPTION": "The RESTful Dropbox Sign API easily allows you to build custom eSign integrations. To find out how to update the name of your team, click here."
"TemplateAddUser::SEO::TITLE": "Add User to Template | REST API | Dropbox Sign for Developers"
"TemplateAddUser::SEO::DESCRIPTION": "The RESTful Dropbox Sign API easily allows you to build custom eSign integrations. To find out how to give an Account access to a Template, click here."
"TemplateCreateEmbeddedDraft::SEO::TITLE": "Create Embedded Template Draft | Dropbox Sign for Developers"
"TemplateCreateEmbeddedDraft::SEO::DESCRIPTION": "The RESTful Dropbox Sign API easily allows you to build custom eSign integrations. To find out how to create an embedded draft template, click here."
"TemplateDelete::SEO::TITLE": "Delete Template | API Documentation | Dropbox Sign for Developers"
"TemplateDelete::SEO::DESCRIPTION": "The RESTful Dropbox Sign API easily allows you to build custom integrations. To find out how to completely delete a template from the account, click here."
"TemplateFiles::SEO::TITLE": "Get Template Files | API Documentation | Dropbox Sign for Developers"
"TemplateFiles::SEO::DESCRIPTION": "The RESTful Dropbox Sign API easily allows you to build custom integrations. To find out how to get a copy of the current specified documents, click here."
"TemplateGet::SEO::TITLE": "Get Template | API Documentation | Dropbox Sign for Developers"
"TemplateGet::SEO::DESCRIPTION": "The RESTful Dropbox Sign API easily allows you to build custom integrations. To find out how to return the Template specified by the `template_id` parameter, click here."
"TemplateList::SEO::TITLE": "List Templates | API Documentation | Dropbox Sign for Developers"
"TemplateList::SEO::DESCRIPTION": "The Dropbox Sign API easily allows you to build custom integrations. To find out how to return a list of the Templates that can be accessed by you, click here."
"TemplateRemoveUser::SEO::TITLE": "Remove User from Template | REST API | Dropbox Sign for Developers"
"TemplateRemoveUser::SEO::DESCRIPTION": "The Dropbox Sign API easily allows you to build custom integrations. To find out how to remove a specified Account's access to a Template, click here."
"TemplateUpdateFiles::SEO::TITLE": "Update Template Files | REST API | Dropbox Sign for Developers"
"TemplateUpdateFiles::SEO::DESCRIPTION": "Overlays a new file with the overlay of an existing template"
"UnclaimedDraftCreate::SEO::TITLE": "Create Unclaimed Draft | REST API | Dropbox Sign for Developers"
"UnclaimedDraftCreate::SEO::DESCRIPTION": "The Dropbox Sign API allows you to build eSign integrations. To find out how to create a new Signature Request Draft that can be claimed using the claim URL, click here."
"UnclaimedDraftCreateEmbedded::SEO::TITLE": "Create Embedded Unclaimed Draft | Dropbox Sign for Developers"
"UnclaimedDraftCreateEmbedded::SEO::DESCRIPTION": "The Dropbox Sign API allows you to build custom integrations. To find out how to create and embed a the creation of a Signature Request in an iFrame, click here."
"UnclaimedDraftCreateEmbeddedWithTemplate::SEO::TITLE": "Embed Unclaimed Draft with Template | Dropbox Sign for Developers"
"UnclaimedDraftCreateEmbeddedWithTemplate::SEO::DESCRIPTION": "The Dropbox Sign API easily allows you to build custom integrations. To find out how to create a new Draft with a previously saved template, click here."
"UnclaimedDraftEditAndResend::SEO::TITLE": "Edit and Resend Unclaimed Draft | Dropbox Sign for Developers"
"UnclaimedDraftEditAndResend::SEO::DESCRIPTION": "The Dropbox Sign API easily allows you to build custom integrations. To find out how to create a new signature request from an embedded request, click here."
"accountUpdateEventCallback::SEO::TITLE": "Account Callbacks | API Documentation | Dropbox Sign for Developers"
"accountUpdateEventCallback::SEO::DESCRIPTION": "The Dropbox Sign API allows you to build with a wide range of tools. To find out how to consume Dropbox Sign Events at the account level, click here."
"appCreateEventCallback::SEO::TITLE": "App Callbacks | API Documentation | Dropbox Sign for Developers"
"appCreateEventCallback::SEO::DESCRIPTION": "The Dropbox Sign API allows you to build with a wide range of tools. To find out how to consume Dropbox Sign Events at the App level, click here."
