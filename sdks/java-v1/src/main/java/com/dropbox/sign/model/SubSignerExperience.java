/*
 * Dropbox Sign API
 * Dropbox Sign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.dropbox.sign.model;

import com.dropbox.sign.ApiException;
import com.dropbox.sign.JSON;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/**
 * Configuration options for modifying the settings of the signer application. Supports changing the
 * form view behavior.
 */
@JsonPropertyOrder({SubSignerExperience.JSON_PROPERTY_FORM_VIEW})
@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
@JsonIgnoreProperties(ignoreUnknown = true)
public class SubSignerExperience {
    /**
     * Changes the form view setting experienced by the signer. Supported versions are: -
     * &#x60;disabled&#x60; - Form view is disabled, and the signer cannot change it -
     * &#x60;enabled&#x60; - Form view is disabled initially, the signer can turn it on using a
     * toggle - &#x60;enabled_by_default&#x60; - Form view is enabled initially. The signer car turn
     * it off using a toggle - &#x60;forced&#x60; - Form view is enabled initially. The signer
     * cannot change it, the toggle is hidden.
     */
    public enum FormViewEnum {
        DISABLED(String.valueOf("disabled")),

        ENABLED(String.valueOf("enabled")),

        ENABLED_BY_DEFAULT(String.valueOf("enabled_by_default")),

        FORCED(String.valueOf("forced"));

        private String value;

        FormViewEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static FormViewEnum fromValue(String value) {
            for (FormViewEnum b : FormViewEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_FORM_VIEW = "form_view";
    @javax.annotation.Nullable private FormViewEnum formView;

    public SubSignerExperience() {}

    /**
     * Attempt to instantiate and hydrate a new instance of this class
     *
     * @param jsonData String of JSON data representing target object
     */
    public static SubSignerExperience init(String jsonData) throws Exception {
        return new ObjectMapper().readValue(jsonData, SubSignerExperience.class);
    }

    public static SubSignerExperience init(HashMap data) throws Exception {
        return new ObjectMapper()
                .readValue(new ObjectMapper().writeValueAsString(data), SubSignerExperience.class);
    }

    public SubSignerExperience formView(@javax.annotation.Nullable FormViewEnum formView) {
        this.formView = formView;
        return this;
    }

    /**
     * Changes the form view setting experienced by the signer. Supported versions are: -
     * &#x60;disabled&#x60; - Form view is disabled, and the signer cannot change it -
     * &#x60;enabled&#x60; - Form view is disabled initially, the signer can turn it on using a
     * toggle - &#x60;enabled_by_default&#x60; - Form view is enabled initially. The signer car turn
     * it off using a toggle - &#x60;forced&#x60; - Form view is enabled initially. The signer
     * cannot change it, the toggle is hidden.
     *
     * @return formView
     */
    @javax.annotation.Nullable @JsonProperty(JSON_PROPERTY_FORM_VIEW)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public FormViewEnum getFormView() {
        return formView;
    }

    @JsonProperty(JSON_PROPERTY_FORM_VIEW)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setFormView(@javax.annotation.Nullable FormViewEnum formView) {
        this.formView = formView;
    }

    /** Return true if this SubSignerExperience object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SubSignerExperience subSignerExperience = (SubSignerExperience) o;
        return Objects.equals(this.formView, subSignerExperience.formView);
    }

    @Override
    public int hashCode() {
        return Objects.hash(formView);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SubSignerExperience {\n");
        sb.append("    formView: ").append(toIndentedString(formView)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public Map<String, Object> createFormData() throws ApiException {
        Map<String, Object> map = new HashMap<>();
        boolean fileTypeFound = false;
        try {
            if (formView != null) {
                if (isFileTypeOrListOfFiles(formView)) {
                    fileTypeFound = true;
                }

                if (formView.getClass().equals(java.io.File.class)
                        || formView.getClass().equals(Integer.class)
                        || formView.getClass().equals(String.class)
                        || formView.getClass().isEnum()) {
                    map.put("form_view", formView);
                } else if (isListOfFile(formView)) {
                    for (int i = 0; i < getListSize(formView); i++) {
                        map.put("form_view[" + i + "]", getFromList(formView, i));
                    }
                } else {
                    map.put(
                            "form_view",
                            JSON.getDefault().getMapper().writeValueAsString(formView));
                }
            }
        } catch (Exception e) {
            throw new ApiException(e);
        }

        return fileTypeFound ? map : new HashMap<>();
    }

    private boolean isFileTypeOrListOfFiles(Object obj) throws Exception {
        return obj.getClass().equals(java.io.File.class) || isListOfFile(obj);
    }

    private boolean isListOfFile(Object obj) throws Exception {
        return obj instanceof java.util.List
                && !isListEmpty(obj)
                && getFromList(obj, 0) instanceof java.io.File;
    }

    private boolean isListEmpty(Object obj) throws Exception {
        return (boolean)
                Class.forName(java.util.List.class.getName()).getMethod("isEmpty").invoke(obj);
    }

    private Object getFromList(Object obj, int index) throws Exception {
        return Class.forName(java.util.List.class.getName())
                .getMethod("get", int.class)
                .invoke(obj, index);
    }

    private int getListSize(Object obj) throws Exception {
        return (int) Class.forName(java.util.List.class.getName()).getMethod("size").invoke(obj);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
