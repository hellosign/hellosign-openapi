/*
 * Dropbox Sign API
 * Dropbox Sign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.dropbox.sign.model;

import com.dropbox.sign.ApiException;
import com.dropbox.sign.JSON;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/** _t__Account::SETTINGS */
@JsonPropertyOrder({
    AccountResponseSettings.JSON_PROPERTY_SIGNER_ACCESS_CODES,
    AccountResponseSettings.JSON_PROPERTY_SMS_DELIVERY,
    AccountResponseSettings.JSON_PROPERTY_SMS_AUTHENTICATION
})
@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
@JsonIgnoreProperties(ignoreUnknown = true)
public class AccountResponseSettings {
    public static final String JSON_PROPERTY_SIGNER_ACCESS_CODES = "signer_access_codes";
    @javax.annotation.Nullable private Boolean signerAccessCodes;

    public static final String JSON_PROPERTY_SMS_DELIVERY = "sms_delivery";
    @javax.annotation.Nullable private Boolean smsDelivery;

    public static final String JSON_PROPERTY_SMS_AUTHENTICATION = "sms_authentication";
    @javax.annotation.Nullable private Boolean smsAuthentication;

    public AccountResponseSettings() {}

    /**
     * Attempt to instantiate and hydrate a new instance of this class
     *
     * @param jsonData String of JSON data representing target object
     */
    public static AccountResponseSettings init(String jsonData) throws Exception {
        return new ObjectMapper().readValue(jsonData, AccountResponseSettings.class);
    }

    public static AccountResponseSettings init(HashMap data) throws Exception {
        return new ObjectMapper()
                .readValue(
                        new ObjectMapper().writeValueAsString(data), AccountResponseSettings.class);
    }

    public AccountResponseSettings signerAccessCodes(
            @javax.annotation.Nullable Boolean signerAccessCodes) {
        this.signerAccessCodes = signerAccessCodes;
        return this;
    }

    /**
     * _t__AccountSettings::SIGNER_ACCESS_CODES
     *
     * @return signerAccessCodes
     */
    @javax.annotation.Nullable @JsonProperty(JSON_PROPERTY_SIGNER_ACCESS_CODES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getSignerAccessCodes() {
        return signerAccessCodes;
    }

    @JsonProperty(JSON_PROPERTY_SIGNER_ACCESS_CODES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSignerAccessCodes(@javax.annotation.Nullable Boolean signerAccessCodes) {
        this.signerAccessCodes = signerAccessCodes;
    }

    public AccountResponseSettings smsDelivery(@javax.annotation.Nullable Boolean smsDelivery) {
        this.smsDelivery = smsDelivery;
        return this;
    }

    /**
     * _t__AccountSettings::SMS_DELIVERY
     *
     * @return smsDelivery
     */
    @javax.annotation.Nullable @JsonProperty(JSON_PROPERTY_SMS_DELIVERY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getSmsDelivery() {
        return smsDelivery;
    }

    @JsonProperty(JSON_PROPERTY_SMS_DELIVERY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSmsDelivery(@javax.annotation.Nullable Boolean smsDelivery) {
        this.smsDelivery = smsDelivery;
    }

    public AccountResponseSettings smsAuthentication(
            @javax.annotation.Nullable Boolean smsAuthentication) {
        this.smsAuthentication = smsAuthentication;
        return this;
    }

    /**
     * _t__AccountSettings::SMS_AUTHENTICATION
     *
     * @return smsAuthentication
     */
    @javax.annotation.Nullable @JsonProperty(JSON_PROPERTY_SMS_AUTHENTICATION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getSmsAuthentication() {
        return smsAuthentication;
    }

    @JsonProperty(JSON_PROPERTY_SMS_AUTHENTICATION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSmsAuthentication(@javax.annotation.Nullable Boolean smsAuthentication) {
        this.smsAuthentication = smsAuthentication;
    }

    /** Return true if this AccountResponseSettings object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountResponseSettings accountResponseSettings = (AccountResponseSettings) o;
        return Objects.equals(this.signerAccessCodes, accountResponseSettings.signerAccessCodes)
                && Objects.equals(this.smsDelivery, accountResponseSettings.smsDelivery)
                && Objects.equals(
                        this.smsAuthentication, accountResponseSettings.smsAuthentication);
    }

    @Override
    public int hashCode() {
        return Objects.hash(signerAccessCodes, smsDelivery, smsAuthentication);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AccountResponseSettings {\n");
        sb.append("    signerAccessCodes: ")
                .append(toIndentedString(signerAccessCodes))
                .append("\n");
        sb.append("    smsDelivery: ").append(toIndentedString(smsDelivery)).append("\n");
        sb.append("    smsAuthentication: ")
                .append(toIndentedString(smsAuthentication))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    public Map<String, Object> createFormData() throws ApiException {
        Map<String, Object> map = new HashMap<>();
        boolean fileTypeFound = false;
        try {
            if (signerAccessCodes != null) {
                if (isFileTypeOrListOfFiles(signerAccessCodes)) {
                    fileTypeFound = true;
                }

                if (signerAccessCodes.getClass().equals(java.io.File.class)
                        || signerAccessCodes.getClass().equals(Integer.class)
                        || signerAccessCodes.getClass().equals(String.class)
                        || signerAccessCodes.getClass().isEnum()) {
                    map.put("signer_access_codes", signerAccessCodes);
                } else if (isListOfFile(signerAccessCodes)) {
                    for (int i = 0; i < getListSize(signerAccessCodes); i++) {
                        map.put(
                                "signer_access_codes[" + i + "]",
                                getFromList(signerAccessCodes, i));
                    }
                } else {
                    map.put(
                            "signer_access_codes",
                            JSON.getDefault().getMapper().writeValueAsString(signerAccessCodes));
                }
            }
            if (smsDelivery != null) {
                if (isFileTypeOrListOfFiles(smsDelivery)) {
                    fileTypeFound = true;
                }

                if (smsDelivery.getClass().equals(java.io.File.class)
                        || smsDelivery.getClass().equals(Integer.class)
                        || smsDelivery.getClass().equals(String.class)
                        || smsDelivery.getClass().isEnum()) {
                    map.put("sms_delivery", smsDelivery);
                } else if (isListOfFile(smsDelivery)) {
                    for (int i = 0; i < getListSize(smsDelivery); i++) {
                        map.put("sms_delivery[" + i + "]", getFromList(smsDelivery, i));
                    }
                } else {
                    map.put(
                            "sms_delivery",
                            JSON.getDefault().getMapper().writeValueAsString(smsDelivery));
                }
            }
            if (smsAuthentication != null) {
                if (isFileTypeOrListOfFiles(smsAuthentication)) {
                    fileTypeFound = true;
                }

                if (smsAuthentication.getClass().equals(java.io.File.class)
                        || smsAuthentication.getClass().equals(Integer.class)
                        || smsAuthentication.getClass().equals(String.class)
                        || smsAuthentication.getClass().isEnum()) {
                    map.put("sms_authentication", smsAuthentication);
                } else if (isListOfFile(smsAuthentication)) {
                    for (int i = 0; i < getListSize(smsAuthentication); i++) {
                        map.put("sms_authentication[" + i + "]", getFromList(smsAuthentication, i));
                    }
                } else {
                    map.put(
                            "sms_authentication",
                            JSON.getDefault().getMapper().writeValueAsString(smsAuthentication));
                }
            }
        } catch (Exception e) {
            throw new ApiException(e);
        }

        return fileTypeFound ? map : new HashMap<>();
    }

    private boolean isFileTypeOrListOfFiles(Object obj) throws Exception {
        return obj.getClass().equals(java.io.File.class) || isListOfFile(obj);
    }

    private boolean isListOfFile(Object obj) throws Exception {
        return obj instanceof java.util.List
                && !isListEmpty(obj)
                && getFromList(obj, 0) instanceof java.io.File;
    }

    private boolean isListEmpty(Object obj) throws Exception {
        return (boolean)
                Class.forName(java.util.List.class.getName()).getMethod("isEmpty").invoke(obj);
    }

    private Object getFromList(Object obj, int index) throws Exception {
        return Class.forName(java.util.List.class.getName())
                .getMethod("get", int.class)
                .invoke(obj, index);
    }

    private int getListSize(Object obj) throws Exception {
        return (int) Class.forName(java.util.List.class.getName()).getMethod("size").invoke(obj);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
