/*
 * Dropbox Sign API
 * Dropbox Sign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dropbox.sign.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.dropbox.sign.JSON;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.databind.ObjectMapper;


import com.dropbox.sign.ApiException;
/**
 * TemplateEditRequest
 */
@JsonPropertyOrder({
  TemplateEditRequest.JSON_PROPERTY_CC_ROLES,
  TemplateEditRequest.JSON_PROPERTY_ALLOW_FORM_VIEW,
  TemplateEditRequest.JSON_PROPERTY_TITLE,
  TemplateEditRequest.JSON_PROPERTY_SUBJECT,
  TemplateEditRequest.JSON_PROPERTY_MESSAGE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
@JsonIgnoreProperties(ignoreUnknown=true)
public class TemplateEditRequest {
  public static final String JSON_PROPERTY_CC_ROLES = "cc_roles";
  @javax.annotation.Nullable
  private List<String> ccRoles = null;

  public static final String JSON_PROPERTY_ALLOW_FORM_VIEW = "allow_form_view";
  @javax.annotation.Nullable
  private Boolean allowFormView;

  public static final String JSON_PROPERTY_TITLE = "title";
  @javax.annotation.Nullable
  private String title;

  public static final String JSON_PROPERTY_SUBJECT = "subject";
  @javax.annotation.Nullable
  private String subject;

  public static final String JSON_PROPERTY_MESSAGE = "message";
  @javax.annotation.Nullable
  private String message;

  public TemplateEditRequest() { 
  }

  /**
   * Attempt to instantiate and hydrate a new instance of this class
   * @param jsonData String of JSON data representing target object
   */
  static public TemplateEditRequest init(String jsonData) throws Exception {
    return new ObjectMapper().readValue(jsonData, TemplateEditRequest.class);
  }

  static public TemplateEditRequest init(HashMap data) throws Exception {
    return new ObjectMapper().readValue(
      new ObjectMapper().writeValueAsString(data),
      TemplateEditRequest.class
    );
  }

  public TemplateEditRequest ccRoles(@javax.annotation.Nullable List<String> ccRoles) {
    this.ccRoles = ccRoles;
    return this;
  }

  public TemplateEditRequest addCcRolesItem(String ccRolesItem) {
    if (this.ccRoles == null) {
      this.ccRoles = new ArrayList<>();
    }
    this.ccRoles.add(ccRolesItem);
    return this;
  }

  /**
   * _t__TemplateEdit::CC_ROLES
   * @return ccRoles
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CC_ROLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getCcRoles() {
    return ccRoles;
  }


  @JsonProperty(JSON_PROPERTY_CC_ROLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCcRoles(@javax.annotation.Nullable List<String> ccRoles) {
    this.ccRoles = ccRoles;
  }


  public TemplateEditRequest allowFormView(@javax.annotation.Nullable Boolean allowFormView) {
    this.allowFormView = allowFormView;
    return this;
  }

  /**
   * _t__TemplateEdit::ALLOW_FORM_VIEW
   * @return allowFormView
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALLOW_FORM_VIEW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAllowFormView() {
    return allowFormView;
  }


  @JsonProperty(JSON_PROPERTY_ALLOW_FORM_VIEW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllowFormView(@javax.annotation.Nullable Boolean allowFormView) {
    this.allowFormView = allowFormView;
  }


  public TemplateEditRequest title(@javax.annotation.Nullable String title) {
    this.title = title;
    return this;
  }

  /**
   * _t__TemplateEdit::TITLE
   * @return title
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTitle() {
    return title;
  }


  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTitle(@javax.annotation.Nullable String title) {
    this.title = title;
  }


  public TemplateEditRequest subject(@javax.annotation.Nullable String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * _t__TemplateEdit::SUBJECT
   * @return subject
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUBJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSubject() {
    return subject;
  }


  @JsonProperty(JSON_PROPERTY_SUBJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubject(@javax.annotation.Nullable String subject) {
    this.subject = subject;
  }


  public TemplateEditRequest message(@javax.annotation.Nullable String message) {
    this.message = message;
    return this;
  }

  /**
   * _t__TemplateEdit::MESSAGE
   * @return message
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMessage() {
    return message;
  }


  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMessage(@javax.annotation.Nullable String message) {
    this.message = message;
  }


  /**
   * Return true if this TemplateEditRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemplateEditRequest templateEditRequest = (TemplateEditRequest) o;
    return Objects.equals(this.ccRoles, templateEditRequest.ccRoles) &&
        Objects.equals(this.allowFormView, templateEditRequest.allowFormView) &&
        Objects.equals(this.title, templateEditRequest.title) &&
        Objects.equals(this.subject, templateEditRequest.subject) &&
        Objects.equals(this.message, templateEditRequest.message);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ccRoles, allowFormView, title, subject, message);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemplateEditRequest {\n");
    sb.append("    ccRoles: ").append(toIndentedString(ccRoles)).append("\n");
    sb.append("    allowFormView: ").append(toIndentedString(allowFormView)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  public Map<String, Object> createFormData() throws ApiException {
    Map<String, Object> map = new HashMap<>();
    boolean fileTypeFound = false;
    try {
    if (ccRoles != null) {
        if (isFileTypeOrListOfFiles(ccRoles)) {
            fileTypeFound = true;
        }

        if (ccRoles.getClass().equals(java.io.File.class) ||
            ccRoles.getClass().equals(Integer.class) ||
            ccRoles.getClass().equals(String.class) ||
            ccRoles.getClass().isEnum()) {
            map.put("cc_roles", ccRoles);
        } else if (isListOfFile(ccRoles)) {
            for(int i = 0; i< getListSize(ccRoles); i++) {
                map.put("cc_roles[" + i + "]", getFromList(ccRoles, i));
            }
        }
        else {
            map.put("cc_roles", JSON.getDefault().getMapper().writeValueAsString(ccRoles));
        }
    }
    if (allowFormView != null) {
        if (isFileTypeOrListOfFiles(allowFormView)) {
            fileTypeFound = true;
        }

        if (allowFormView.getClass().equals(java.io.File.class) ||
            allowFormView.getClass().equals(Integer.class) ||
            allowFormView.getClass().equals(String.class) ||
            allowFormView.getClass().isEnum()) {
            map.put("allow_form_view", allowFormView);
        } else if (isListOfFile(allowFormView)) {
            for(int i = 0; i< getListSize(allowFormView); i++) {
                map.put("allow_form_view[" + i + "]", getFromList(allowFormView, i));
            }
        }
        else {
            map.put("allow_form_view", JSON.getDefault().getMapper().writeValueAsString(allowFormView));
        }
    }
    if (title != null) {
        if (isFileTypeOrListOfFiles(title)) {
            fileTypeFound = true;
        }

        if (title.getClass().equals(java.io.File.class) ||
            title.getClass().equals(Integer.class) ||
            title.getClass().equals(String.class) ||
            title.getClass().isEnum()) {
            map.put("title", title);
        } else if (isListOfFile(title)) {
            for(int i = 0; i< getListSize(title); i++) {
                map.put("title[" + i + "]", getFromList(title, i));
            }
        }
        else {
            map.put("title", JSON.getDefault().getMapper().writeValueAsString(title));
        }
    }
    if (subject != null) {
        if (isFileTypeOrListOfFiles(subject)) {
            fileTypeFound = true;
        }

        if (subject.getClass().equals(java.io.File.class) ||
            subject.getClass().equals(Integer.class) ||
            subject.getClass().equals(String.class) ||
            subject.getClass().isEnum()) {
            map.put("subject", subject);
        } else if (isListOfFile(subject)) {
            for(int i = 0; i< getListSize(subject); i++) {
                map.put("subject[" + i + "]", getFromList(subject, i));
            }
        }
        else {
            map.put("subject", JSON.getDefault().getMapper().writeValueAsString(subject));
        }
    }
    if (message != null) {
        if (isFileTypeOrListOfFiles(message)) {
            fileTypeFound = true;
        }

        if (message.getClass().equals(java.io.File.class) ||
            message.getClass().equals(Integer.class) ||
            message.getClass().equals(String.class) ||
            message.getClass().isEnum()) {
            map.put("message", message);
        } else if (isListOfFile(message)) {
            for(int i = 0; i< getListSize(message); i++) {
                map.put("message[" + i + "]", getFromList(message, i));
            }
        }
        else {
            map.put("message", JSON.getDefault().getMapper().writeValueAsString(message));
        }
    }
    } catch (Exception e) {
        throw new ApiException(e);
    }

    return fileTypeFound ? map : new HashMap<>();
  }

  private boolean isFileTypeOrListOfFiles(Object obj) throws Exception {
    return obj.getClass().equals(java.io.File.class) || isListOfFile(obj);
  }

  private boolean isListOfFile(Object obj) throws Exception {
      return obj instanceof java.util.List && !isListEmpty(obj) && getFromList(obj, 0) instanceof java.io.File;
  }

  private boolean isListEmpty(Object obj) throws Exception {
    return (boolean) Class.forName(java.util.List.class.getName()).getMethod("isEmpty").invoke(obj);
  }

  private Object getFromList(Object obj, int index) throws Exception {
    return Class.forName(java.util.List.class.getName()).getMethod("get", int.class).invoke(obj, index);
  }

  private int getListSize(Object obj) throws Exception {
    return (int) Class.forName(java.util.List.class.getName()).getMethod("size").invoke(obj);
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

