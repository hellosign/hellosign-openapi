/*
 * Dropbox Sign API
 * Dropbox Sign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.dropbox.sign.model;

import com.dropbox.sign.ApiException;
import com.dropbox.sign.JSON;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/** TemplateUpdateRequest */
@JsonPropertyOrder({
    TemplateUpdateRequest.JSON_PROPERTY_CC_ROLES,
    TemplateUpdateRequest.JSON_PROPERTY_ALLOW_FORM_VIEW,
    TemplateUpdateRequest.JSON_PROPERTY_TITLE,
    TemplateUpdateRequest.JSON_PROPERTY_SUBJECT,
    TemplateUpdateRequest.JSON_PROPERTY_MESSAGE,
    TemplateUpdateRequest.JSON_PROPERTY_FORM_FIELDS
})
@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
@JsonIgnoreProperties(ignoreUnknown = true)
public class TemplateUpdateRequest {
    public static final String JSON_PROPERTY_CC_ROLES = "cc_roles";
    @javax.annotation.Nullable private List<String> ccRoles = null;

    public static final String JSON_PROPERTY_ALLOW_FORM_VIEW = "allow_form_view";
    @javax.annotation.Nullable private Boolean allowFormView;

    public static final String JSON_PROPERTY_TITLE = "title";
    @javax.annotation.Nullable private String title;

    public static final String JSON_PROPERTY_SUBJECT = "subject";
    @javax.annotation.Nullable private String subject;

    public static final String JSON_PROPERTY_MESSAGE = "message";
    @javax.annotation.Nullable private String message;

    public static final String JSON_PROPERTY_FORM_FIELDS = "form_fields";
    @javax.annotation.Nullable private List<SubUpdateFormField> formFields = null;

    public TemplateUpdateRequest() {}

    /**
     * Attempt to instantiate and hydrate a new instance of this class
     *
     * @param jsonData String of JSON data representing target object
     */
    public static TemplateUpdateRequest init(String jsonData) throws Exception {
        return new ObjectMapper().readValue(jsonData, TemplateUpdateRequest.class);
    }

    public static TemplateUpdateRequest init(HashMap data) throws Exception {
        return new ObjectMapper()
                .readValue(
                        new ObjectMapper().writeValueAsString(data), TemplateUpdateRequest.class);
    }

    public TemplateUpdateRequest ccRoles(@javax.annotation.Nullable List<String> ccRoles) {
        this.ccRoles = ccRoles;
        return this;
    }

    public TemplateUpdateRequest addCcRolesItem(String ccRolesItem) {
        if (this.ccRoles == null) {
            this.ccRoles = new ArrayList<>();
        }
        this.ccRoles.add(ccRolesItem);
        return this;
    }

    /**
     * The CC roles that must be assigned when using the template to send a signature request.
     *
     * @return ccRoles
     */
    @javax.annotation.Nullable @JsonProperty(JSON_PROPERTY_CC_ROLES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<String> getCcRoles() {
        return ccRoles;
    }

    @JsonProperty(JSON_PROPERTY_CC_ROLES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCcRoles(@javax.annotation.Nullable List<String> ccRoles) {
        this.ccRoles = ccRoles;
    }

    public TemplateUpdateRequest allowFormView(@javax.annotation.Nullable Boolean allowFormView) {
        this.allowFormView = allowFormView;
        return this;
    }

    /**
     * The CC roles that must be assigned when using the template to send a signature request. If
     * set to &#x60;true&#x60; all the form fields on template document must have non-empty names.
     *
     * @return allowFormView
     */
    @javax.annotation.Nullable @JsonProperty(JSON_PROPERTY_ALLOW_FORM_VIEW)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getAllowFormView() {
        return allowFormView;
    }

    @JsonProperty(JSON_PROPERTY_ALLOW_FORM_VIEW)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAllowFormView(@javax.annotation.Nullable Boolean allowFormView) {
        this.allowFormView = allowFormView;
    }

    public TemplateUpdateRequest title(@javax.annotation.Nullable String title) {
        this.title = title;
        return this;
    }

    /**
     * The title you want to assign to the SignatureRequest.
     *
     * @return title
     */
    @javax.annotation.Nullable @JsonProperty(JSON_PROPERTY_TITLE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getTitle() {
        return title;
    }

    @JsonProperty(JSON_PROPERTY_TITLE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTitle(@javax.annotation.Nullable String title) {
        this.title = title;
    }

    public TemplateUpdateRequest subject(@javax.annotation.Nullable String subject) {
        this.subject = subject;
        return this;
    }

    /**
     * The new default template email subject.
     *
     * @return subject
     */
    @javax.annotation.Nullable @JsonProperty(JSON_PROPERTY_SUBJECT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getSubject() {
        return subject;
    }

    @JsonProperty(JSON_PROPERTY_SUBJECT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSubject(@javax.annotation.Nullable String subject) {
        this.subject = subject;
    }

    public TemplateUpdateRequest message(@javax.annotation.Nullable String message) {
        this.message = message;
        return this;
    }

    /**
     * The new default template email message.
     *
     * @return message
     */
    @javax.annotation.Nullable @JsonProperty(JSON_PROPERTY_MESSAGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getMessage() {
        return message;
    }

    @JsonProperty(JSON_PROPERTY_MESSAGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setMessage(@javax.annotation.Nullable String message) {
        this.message = message;
    }

    public TemplateUpdateRequest formFields(
            @javax.annotation.Nullable List<SubUpdateFormField> formFields) {
        this.formFields = formFields;
        return this;
    }

    public TemplateUpdateRequest addFormFieldsItem(SubUpdateFormField formFieldsItem) {
        if (this.formFields == null) {
            this.formFields = new ArrayList<>();
        }
        this.formFields.add(formFieldsItem);
        return this;
    }

    /**
     * A list of document form fields to update. The endpoint will not create or remove any fields.
     * Every field must be identified by &#x60;api_id&#x60;, and the only supported change is
     * renaming the field.
     *
     * @return formFields
     */
    @javax.annotation.Nullable @JsonProperty(JSON_PROPERTY_FORM_FIELDS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<SubUpdateFormField> getFormFields() {
        return formFields;
    }

    @JsonProperty(JSON_PROPERTY_FORM_FIELDS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setFormFields(@javax.annotation.Nullable List<SubUpdateFormField> formFields) {
        this.formFields = formFields;
    }

    /** Return true if this TemplateUpdateRequest object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TemplateUpdateRequest templateUpdateRequest = (TemplateUpdateRequest) o;
        return Objects.equals(this.ccRoles, templateUpdateRequest.ccRoles)
                && Objects.equals(this.allowFormView, templateUpdateRequest.allowFormView)
                && Objects.equals(this.title, templateUpdateRequest.title)
                && Objects.equals(this.subject, templateUpdateRequest.subject)
                && Objects.equals(this.message, templateUpdateRequest.message)
                && Objects.equals(this.formFields, templateUpdateRequest.formFields);
    }

    @Override
    public int hashCode() {
        return Objects.hash(ccRoles, allowFormView, title, subject, message, formFields);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TemplateUpdateRequest {\n");
        sb.append("    ccRoles: ").append(toIndentedString(ccRoles)).append("\n");
        sb.append("    allowFormView: ").append(toIndentedString(allowFormView)).append("\n");
        sb.append("    title: ").append(toIndentedString(title)).append("\n");
        sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
        sb.append("    message: ").append(toIndentedString(message)).append("\n");
        sb.append("    formFields: ").append(toIndentedString(formFields)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public Map<String, Object> createFormData() throws ApiException {
        Map<String, Object> map = new HashMap<>();
        boolean fileTypeFound = false;
        try {
            if (ccRoles != null) {
                if (isFileTypeOrListOfFiles(ccRoles)) {
                    fileTypeFound = true;
                }

                if (ccRoles.getClass().equals(java.io.File.class)
                        || ccRoles.getClass().equals(Integer.class)
                        || ccRoles.getClass().equals(String.class)
                        || ccRoles.getClass().isEnum()) {
                    map.put("cc_roles", ccRoles);
                } else if (isListOfFile(ccRoles)) {
                    for (int i = 0; i < getListSize(ccRoles); i++) {
                        map.put("cc_roles[" + i + "]", getFromList(ccRoles, i));
                    }
                } else {
                    map.put("cc_roles", JSON.getDefault().getMapper().writeValueAsString(ccRoles));
                }
            }
            if (allowFormView != null) {
                if (isFileTypeOrListOfFiles(allowFormView)) {
                    fileTypeFound = true;
                }

                if (allowFormView.getClass().equals(java.io.File.class)
                        || allowFormView.getClass().equals(Integer.class)
                        || allowFormView.getClass().equals(String.class)
                        || allowFormView.getClass().isEnum()) {
                    map.put("allow_form_view", allowFormView);
                } else if (isListOfFile(allowFormView)) {
                    for (int i = 0; i < getListSize(allowFormView); i++) {
                        map.put("allow_form_view[" + i + "]", getFromList(allowFormView, i));
                    }
                } else {
                    map.put(
                            "allow_form_view",
                            JSON.getDefault().getMapper().writeValueAsString(allowFormView));
                }
            }
            if (title != null) {
                if (isFileTypeOrListOfFiles(title)) {
                    fileTypeFound = true;
                }

                if (title.getClass().equals(java.io.File.class)
                        || title.getClass().equals(Integer.class)
                        || title.getClass().equals(String.class)
                        || title.getClass().isEnum()) {
                    map.put("title", title);
                } else if (isListOfFile(title)) {
                    for (int i = 0; i < getListSize(title); i++) {
                        map.put("title[" + i + "]", getFromList(title, i));
                    }
                } else {
                    map.put("title", JSON.getDefault().getMapper().writeValueAsString(title));
                }
            }
            if (subject != null) {
                if (isFileTypeOrListOfFiles(subject)) {
                    fileTypeFound = true;
                }

                if (subject.getClass().equals(java.io.File.class)
                        || subject.getClass().equals(Integer.class)
                        || subject.getClass().equals(String.class)
                        || subject.getClass().isEnum()) {
                    map.put("subject", subject);
                } else if (isListOfFile(subject)) {
                    for (int i = 0; i < getListSize(subject); i++) {
                        map.put("subject[" + i + "]", getFromList(subject, i));
                    }
                } else {
                    map.put("subject", JSON.getDefault().getMapper().writeValueAsString(subject));
                }
            }
            if (message != null) {
                if (isFileTypeOrListOfFiles(message)) {
                    fileTypeFound = true;
                }

                if (message.getClass().equals(java.io.File.class)
                        || message.getClass().equals(Integer.class)
                        || message.getClass().equals(String.class)
                        || message.getClass().isEnum()) {
                    map.put("message", message);
                } else if (isListOfFile(message)) {
                    for (int i = 0; i < getListSize(message); i++) {
                        map.put("message[" + i + "]", getFromList(message, i));
                    }
                } else {
                    map.put("message", JSON.getDefault().getMapper().writeValueAsString(message));
                }
            }
            if (formFields != null) {
                if (isFileTypeOrListOfFiles(formFields)) {
                    fileTypeFound = true;
                }

                if (formFields.getClass().equals(java.io.File.class)
                        || formFields.getClass().equals(Integer.class)
                        || formFields.getClass().equals(String.class)
                        || formFields.getClass().isEnum()) {
                    map.put("form_fields", formFields);
                } else if (isListOfFile(formFields)) {
                    for (int i = 0; i < getListSize(formFields); i++) {
                        map.put("form_fields[" + i + "]", getFromList(formFields, i));
                    }
                } else {
                    map.put(
                            "form_fields",
                            JSON.getDefault().getMapper().writeValueAsString(formFields));
                }
            }
        } catch (Exception e) {
            throw new ApiException(e);
        }

        return fileTypeFound ? map : new HashMap<>();
    }

    private boolean isFileTypeOrListOfFiles(Object obj) throws Exception {
        return obj.getClass().equals(java.io.File.class) || isListOfFile(obj);
    }

    private boolean isListOfFile(Object obj) throws Exception {
        return obj instanceof java.util.List
                && !isListEmpty(obj)
                && getFromList(obj, 0) instanceof java.io.File;
    }

    private boolean isListEmpty(Object obj) throws Exception {
        return (boolean)
                Class.forName(java.util.List.class.getName()).getMethod("isEmpty").invoke(obj);
    }

    private Object getFromList(Object obj, int index) throws Exception {
        return Class.forName(java.util.List.class.getName())
                .getMethod("get", int.class)
                .invoke(obj, index);
    }

    private int getListSize(Object obj) throws Exception {
        return (int) Class.forName(java.util.List.class.getName()).getMethod("size").invoke(obj);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
