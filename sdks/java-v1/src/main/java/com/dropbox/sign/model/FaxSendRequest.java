/*
 * Dropbox Sign API
 * Dropbox Sign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.dropbox.sign.model;

import com.dropbox.sign.ApiException;
import com.dropbox.sign.JSON;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/** FaxSendRequest */
@JsonPropertyOrder({
    FaxSendRequest.JSON_PROPERTY_TO,
    FaxSendRequest.JSON_PROPERTY_FROM,
    FaxSendRequest.JSON_PROPERTY_FILE,
    FaxSendRequest.JSON_PROPERTY_FILE_URL,
    FaxSendRequest.JSON_PROPERTY_FILE_URL_NAMES,
    FaxSendRequest.JSON_PROPERTY_TEST_MODE,
    FaxSendRequest.JSON_PROPERTY_COVER_PAGE_TO,
    FaxSendRequest.JSON_PROPERTY_COVER_PAGE_FROM,
    FaxSendRequest.JSON_PROPERTY_COVER_PAGE_MESSAGE,
    FaxSendRequest.JSON_PROPERTY_TITLE
})
@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.8.0")
@JsonIgnoreProperties(ignoreUnknown = true)
public class FaxSendRequest {
    public static final String JSON_PROPERTY_TO = "to";
    private String to;

    public static final String JSON_PROPERTY_FROM = "from";
    private String from;

    public static final String JSON_PROPERTY_FILE = "file";
    private List<SubFile> _file = null;

    public static final String JSON_PROPERTY_FILE_URL = "file_url";
    private List<String> fileUrl = null;

    public static final String JSON_PROPERTY_FILE_URL_NAMES = "file_url_names";
    private List<String> fileUrlNames = null;

    public static final String JSON_PROPERTY_TEST_MODE = "test_mode";
    private Boolean testMode;

    public static final String JSON_PROPERTY_COVER_PAGE_TO = "cover_page_to";
    private String coverPageTo;

    public static final String JSON_PROPERTY_COVER_PAGE_FROM = "cover_page_from";
    private String coverPageFrom;

    public static final String JSON_PROPERTY_COVER_PAGE_MESSAGE = "cover_page_message";
    private String coverPageMessage;

    public static final String JSON_PROPERTY_TITLE = "title";
    private String title;

    public FaxSendRequest() {}

    /**
     * Attempt to instantiate and hydrate a new instance of this class
     *
     * @param jsonData String of JSON data representing target object
     */
    public static FaxSendRequest init(String jsonData) throws Exception {
        return new ObjectMapper().readValue(jsonData, FaxSendRequest.class);
    }

    public static FaxSendRequest init(HashMap data) throws Exception {
        return new ObjectMapper()
                .readValue(new ObjectMapper().writeValueAsString(data), FaxSendRequest.class);
    }

    public FaxSendRequest to(String to) {
        this.to = to;
        return this;
    }

    /**
     * Fax Send To Recipient
     *
     * @return to
     */
    @javax.annotation.Nullable @JsonProperty(JSON_PROPERTY_TO)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getTo() {
        return to;
    }

    @JsonProperty(JSON_PROPERTY_TO)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTo(String to) {
        this.to = to;
    }

    public FaxSendRequest from(String from) {
        this.from = from;
        return this;
    }

    /**
     * Fax Send From Sender (used only with fax number)
     *
     * @return from
     */
    @javax.annotation.Nullable @JsonProperty(JSON_PROPERTY_FROM)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getFrom() {
        return from;
    }

    @JsonProperty(JSON_PROPERTY_FROM)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setFrom(String from) {
        this.from = from;
    }

    public FaxSendRequest _file(List<SubFile> _file) {
        this._file = _file;
        return this;
    }

    public FaxSendRequest addFileItem(SubFile _fileItem) {
        if (this._file == null) {
            this._file = new ArrayList<>();
        }
        this._file.add(_fileItem);
        return this;
    }

    /**
     * Fax File to Send
     *
     * @return _file
     */
    @javax.annotation.Nullable @JsonProperty(JSON_PROPERTY_FILE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<SubFile> getFile() {
        return _file;
    }

    @JsonProperty(JSON_PROPERTY_FILE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setFile(List<SubFile> _file) {
        this._file = _file;
    }

    public FaxSendRequest fileUrl(List<String> fileUrl) {
        this.fileUrl = fileUrl;
        return this;
    }

    public FaxSendRequest addFileUrlItem(String fileUrlItem) {
        if (this.fileUrl == null) {
            this.fileUrl = new ArrayList<>();
        }
        this.fileUrl.add(fileUrlItem);
        return this;
    }

    /**
     * Fax File URL to Send
     *
     * @return fileUrl
     */
    @javax.annotation.Nullable @JsonProperty(JSON_PROPERTY_FILE_URL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<String> getFileUrl() {
        return fileUrl;
    }

    @JsonProperty(JSON_PROPERTY_FILE_URL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setFileUrl(List<String> fileUrl) {
        this.fileUrl = fileUrl;
    }

    public FaxSendRequest fileUrlNames(List<String> fileUrlNames) {
        this.fileUrlNames = fileUrlNames;
        return this;
    }

    public FaxSendRequest addFileUrlNamesItem(String fileUrlNamesItem) {
        if (this.fileUrlNames == null) {
            this.fileUrlNames = new ArrayList<>();
        }
        this.fileUrlNames.add(fileUrlNamesItem);
        return this;
    }

    /**
     * Fax File URL Names
     *
     * @return fileUrlNames
     */
    @javax.annotation.Nullable @JsonProperty(JSON_PROPERTY_FILE_URL_NAMES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<String> getFileUrlNames() {
        return fileUrlNames;
    }

    @JsonProperty(JSON_PROPERTY_FILE_URL_NAMES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setFileUrlNames(List<String> fileUrlNames) {
        this.fileUrlNames = fileUrlNames;
    }

    public FaxSendRequest testMode(Boolean testMode) {
        this.testMode = testMode;
        return this;
    }

    /**
     * API Test Mode Setting
     *
     * @return testMode
     */
    @javax.annotation.Nullable @JsonProperty(JSON_PROPERTY_TEST_MODE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getTestMode() {
        return testMode;
    }

    @JsonProperty(JSON_PROPERTY_TEST_MODE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTestMode(Boolean testMode) {
        this.testMode = testMode;
    }

    public FaxSendRequest coverPageTo(String coverPageTo) {
        this.coverPageTo = coverPageTo;
        return this;
    }

    /**
     * Fax Cover Page for Recipient
     *
     * @return coverPageTo
     */
    @javax.annotation.Nullable @JsonProperty(JSON_PROPERTY_COVER_PAGE_TO)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getCoverPageTo() {
        return coverPageTo;
    }

    @JsonProperty(JSON_PROPERTY_COVER_PAGE_TO)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCoverPageTo(String coverPageTo) {
        this.coverPageTo = coverPageTo;
    }

    public FaxSendRequest coverPageFrom(String coverPageFrom) {
        this.coverPageFrom = coverPageFrom;
        return this;
    }

    /**
     * Fax Cover Page for Sender
     *
     * @return coverPageFrom
     */
    @javax.annotation.Nullable @JsonProperty(JSON_PROPERTY_COVER_PAGE_FROM)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getCoverPageFrom() {
        return coverPageFrom;
    }

    @JsonProperty(JSON_PROPERTY_COVER_PAGE_FROM)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCoverPageFrom(String coverPageFrom) {
        this.coverPageFrom = coverPageFrom;
    }

    public FaxSendRequest coverPageMessage(String coverPageMessage) {
        this.coverPageMessage = coverPageMessage;
        return this;
    }

    /**
     * Fax Cover Page Message
     *
     * @return coverPageMessage
     */
    @javax.annotation.Nullable @JsonProperty(JSON_PROPERTY_COVER_PAGE_MESSAGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getCoverPageMessage() {
        return coverPageMessage;
    }

    @JsonProperty(JSON_PROPERTY_COVER_PAGE_MESSAGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCoverPageMessage(String coverPageMessage) {
        this.coverPageMessage = coverPageMessage;
    }

    public FaxSendRequest title(String title) {
        this.title = title;
        return this;
    }

    /**
     * Fax Title
     *
     * @return title
     */
    @javax.annotation.Nullable @JsonProperty(JSON_PROPERTY_TITLE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getTitle() {
        return title;
    }

    @JsonProperty(JSON_PROPERTY_TITLE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTitle(String title) {
        this.title = title;
    }

    /** Return true if this FaxSendRequest object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FaxSendRequest faxSendRequest = (FaxSendRequest) o;
        return Objects.equals(this.to, faxSendRequest.to)
                && Objects.equals(this.from, faxSendRequest.from)
                && Objects.equals(this._file, faxSendRequest._file)
                && Objects.equals(this.fileUrl, faxSendRequest.fileUrl)
                && Objects.equals(this.fileUrlNames, faxSendRequest.fileUrlNames)
                && Objects.equals(this.testMode, faxSendRequest.testMode)
                && Objects.equals(this.coverPageTo, faxSendRequest.coverPageTo)
                && Objects.equals(this.coverPageFrom, faxSendRequest.coverPageFrom)
                && Objects.equals(this.coverPageMessage, faxSendRequest.coverPageMessage)
                && Objects.equals(this.title, faxSendRequest.title);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                to,
                from,
                _file,
                fileUrl,
                fileUrlNames,
                testMode,
                coverPageTo,
                coverPageFrom,
                coverPageMessage,
                title);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class FaxSendRequest {\n");
        sb.append("    to: ").append(toIndentedString(to)).append("\n");
        sb.append("    from: ").append(toIndentedString(from)).append("\n");
        sb.append("    _file: ").append(toIndentedString(_file)).append("\n");
        sb.append("    fileUrl: ").append(toIndentedString(fileUrl)).append("\n");
        sb.append("    fileUrlNames: ").append(toIndentedString(fileUrlNames)).append("\n");
        sb.append("    testMode: ").append(toIndentedString(testMode)).append("\n");
        sb.append("    coverPageTo: ").append(toIndentedString(coverPageTo)).append("\n");
        sb.append("    coverPageFrom: ").append(toIndentedString(coverPageFrom)).append("\n");
        sb.append("    coverPageMessage: ").append(toIndentedString(coverPageMessage)).append("\n");
        sb.append("    title: ").append(toIndentedString(title)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public Map<String, Object> createFormData() throws ApiException {
        Map<String, Object> map = new HashMap<>();
        boolean fileTypeFound = false;
        try {
            if (to != null) {
                if (isFileTypeOrListOfFiles(to)) {
                    fileTypeFound = true;
                }

                if (to.getClass().equals(java.io.File.class)
                        || to.getClass().equals(Integer.class)
                        || to.getClass().equals(String.class)
                        || to.getClass().isEnum()) {
                    map.put("to", to);
                } else if (isListOfFile(to)) {
                    for (int i = 0; i < getListSize(to); i++) {
                        map.put("to[" + i + "]", getFromList(to, i));
                    }
                } else {
                    map.put("to", JSON.getDefault().getMapper().writeValueAsString(to));
                }
            }
            if (from != null) {
                if (isFileTypeOrListOfFiles(from)) {
                    fileTypeFound = true;
                }

                if (from.getClass().equals(java.io.File.class)
                        || from.getClass().equals(Integer.class)
                        || from.getClass().equals(String.class)
                        || from.getClass().isEnum()) {
                    map.put("from", from);
                } else if (isListOfFile(from)) {
                    for (int i = 0; i < getListSize(from); i++) {
                        map.put("from[" + i + "]", getFromList(from, i));
                    }
                } else {
                    map.put("from", JSON.getDefault().getMapper().writeValueAsString(from));
                }
            }
            if (_file != null) {
                if (isFileTypeOrListOfFiles(_file)) {
                    fileTypeFound = true;
                }

                if (_file.getClass().equals(java.io.File.class)
                        || _file.getClass().equals(Integer.class)
                        || _file.getClass().equals(String.class)
                        || _file.getClass().isEnum()) {
                    map.put("file", _file);
                } else if (isListOfFile(_file)) {
                    for (int i = 0; i < getListSize(_file); i++) {
                        map.put("file[" + i + "]", getFromList(_file, i));
                    }
                } else {
                    map.put("file", JSON.getDefault().getMapper().writeValueAsString(_file));
                }
            }
            if (fileUrl != null) {
                if (isFileTypeOrListOfFiles(fileUrl)) {
                    fileTypeFound = true;
                }

                if (fileUrl.getClass().equals(java.io.File.class)
                        || fileUrl.getClass().equals(Integer.class)
                        || fileUrl.getClass().equals(String.class)
                        || fileUrl.getClass().isEnum()) {
                    map.put("file_url", fileUrl);
                } else if (isListOfFile(fileUrl)) {
                    for (int i = 0; i < getListSize(fileUrl); i++) {
                        map.put("file_url[" + i + "]", getFromList(fileUrl, i));
                    }
                } else {
                    map.put("file_url", JSON.getDefault().getMapper().writeValueAsString(fileUrl));
                }
            }
            if (fileUrlNames != null) {
                if (isFileTypeOrListOfFiles(fileUrlNames)) {
                    fileTypeFound = true;
                }

                if (fileUrlNames.getClass().equals(java.io.File.class)
                        || fileUrlNames.getClass().equals(Integer.class)
                        || fileUrlNames.getClass().equals(String.class)
                        || fileUrlNames.getClass().isEnum()) {
                    map.put("file_url_names", fileUrlNames);
                } else if (isListOfFile(fileUrlNames)) {
                    for (int i = 0; i < getListSize(fileUrlNames); i++) {
                        map.put("file_url_names[" + i + "]", getFromList(fileUrlNames, i));
                    }
                } else {
                    map.put(
                            "file_url_names",
                            JSON.getDefault().getMapper().writeValueAsString(fileUrlNames));
                }
            }
            if (testMode != null) {
                if (isFileTypeOrListOfFiles(testMode)) {
                    fileTypeFound = true;
                }

                if (testMode.getClass().equals(java.io.File.class)
                        || testMode.getClass().equals(Integer.class)
                        || testMode.getClass().equals(String.class)
                        || testMode.getClass().isEnum()) {
                    map.put("test_mode", testMode);
                } else if (isListOfFile(testMode)) {
                    for (int i = 0; i < getListSize(testMode); i++) {
                        map.put("test_mode[" + i + "]", getFromList(testMode, i));
                    }
                } else {
                    map.put(
                            "test_mode",
                            JSON.getDefault().getMapper().writeValueAsString(testMode));
                }
            }
            if (coverPageTo != null) {
                if (isFileTypeOrListOfFiles(coverPageTo)) {
                    fileTypeFound = true;
                }

                if (coverPageTo.getClass().equals(java.io.File.class)
                        || coverPageTo.getClass().equals(Integer.class)
                        || coverPageTo.getClass().equals(String.class)
                        || coverPageTo.getClass().isEnum()) {
                    map.put("cover_page_to", coverPageTo);
                } else if (isListOfFile(coverPageTo)) {
                    for (int i = 0; i < getListSize(coverPageTo); i++) {
                        map.put("cover_page_to[" + i + "]", getFromList(coverPageTo, i));
                    }
                } else {
                    map.put(
                            "cover_page_to",
                            JSON.getDefault().getMapper().writeValueAsString(coverPageTo));
                }
            }
            if (coverPageFrom != null) {
                if (isFileTypeOrListOfFiles(coverPageFrom)) {
                    fileTypeFound = true;
                }

                if (coverPageFrom.getClass().equals(java.io.File.class)
                        || coverPageFrom.getClass().equals(Integer.class)
                        || coverPageFrom.getClass().equals(String.class)
                        || coverPageFrom.getClass().isEnum()) {
                    map.put("cover_page_from", coverPageFrom);
                } else if (isListOfFile(coverPageFrom)) {
                    for (int i = 0; i < getListSize(coverPageFrom); i++) {
                        map.put("cover_page_from[" + i + "]", getFromList(coverPageFrom, i));
                    }
                } else {
                    map.put(
                            "cover_page_from",
                            JSON.getDefault().getMapper().writeValueAsString(coverPageFrom));
                }
            }
            if (coverPageMessage != null) {
                if (isFileTypeOrListOfFiles(coverPageMessage)) {
                    fileTypeFound = true;
                }

                if (coverPageMessage.getClass().equals(java.io.File.class)
                        || coverPageMessage.getClass().equals(Integer.class)
                        || coverPageMessage.getClass().equals(String.class)
                        || coverPageMessage.getClass().isEnum()) {
                    map.put("cover_page_message", coverPageMessage);
                } else if (isListOfFile(coverPageMessage)) {
                    for (int i = 0; i < getListSize(coverPageMessage); i++) {
                        map.put("cover_page_message[" + i + "]", getFromList(coverPageMessage, i));
                    }
                } else {
                    map.put(
                            "cover_page_message",
                            JSON.getDefault().getMapper().writeValueAsString(coverPageMessage));
                }
            }
            if (title != null) {
                if (isFileTypeOrListOfFiles(title)) {
                    fileTypeFound = true;
                }

                if (title.getClass().equals(java.io.File.class)
                        || title.getClass().equals(Integer.class)
                        || title.getClass().equals(String.class)
                        || title.getClass().isEnum()) {
                    map.put("title", title);
                } else if (isListOfFile(title)) {
                    for (int i = 0; i < getListSize(title); i++) {
                        map.put("title[" + i + "]", getFromList(title, i));
                    }
                } else {
                    map.put("title", JSON.getDefault().getMapper().writeValueAsString(title));
                }
            }
        } catch (Exception e) {
            throw new ApiException(e);
        }

        return fileTypeFound ? map : new HashMap<>();
    }

    private boolean isFileTypeOrListOfFiles(Object obj) throws Exception {
        return obj.getClass().equals(java.io.File.class) || isListOfFile(obj);
    }

    private boolean isListOfFile(Object obj) throws Exception {
        return obj instanceof java.util.List
                && !isListEmpty(obj)
                && getFromList(obj, 0) instanceof java.io.File;
    }

    private boolean isListEmpty(Object obj) throws Exception {
        return (boolean)
                Class.forName(java.util.List.class.getName()).getMethod("isEmpty").invoke(obj);
    }

    private Object getFromList(Object obj, int index) throws Exception {
        return Class.forName(java.util.List.class.getName())
                .getMethod("get", int.class)
                .invoke(obj, index);
    }

    private int getListSize(Object obj) throws Exception {
        return (int) Class.forName(java.util.List.class.getName()).getMethod("size").invoke(obj);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
