buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.+'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
        classpath 'com.diffplug.spotless:spotless-plugin-gradle:5.17.1'
    }
}

plugins {
    id 'com.vanniktech.maven.publish' version '0.18.0'
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'com.diffplug.spotless'
apply plugin: 'signing'

group = '{{groupId}}'
archivesBaseName = '{{artifactId}}'
version = '{{artifactVersion}}'
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        // disable the crazy super-strict doclint tool in Java 8
        //noinspection SpellCheckingInspection
    options.addStringOption('Xdoclint:none', '-quiet')
    }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task fatJar(type: Jar) {
    classifier = 'all'
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}

processResources {
    expand(project.properties)
}

artifacts {
    archives javadocJar, sourcesJar, fatJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName:  findProperty('ossrhUsername'), password:  findProperty('ossrhPassword'))
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName:  findProperty('ossrhUsername'), password:  findProperty('ossrhPassword'))
            }

            pom.project {
                name 'Dropbox Sign'
                packaging 'jar'
                // optionally artifactId can be defined here
                artifactId '{{artifactId}}'
                description 'Use the Dropbox SIgn Java SDK to connect your Java app to Dropbox Sign\'s service in microseconds!'
                url 'https://www.hellosign.com/'

                scm {
                    connection '{{scmConnection}}'
                    developerConnection '{{scmDeveloperConnection}}'
                    url '{{scmUrl}}'
                }

                licenses {
                    license {
                        name '{{licenseName}}'
                        url 'http://www.opensource.org/licenses/mit-license.php'
                    }
                }

                developers {
                    developer {
                        name '{{developerName}}'
                        email '{{developerEmail}}'
                        url 'https://www.hellosign.com'
                    }
                }
            }
        }
    }
}

ext {
    swagger_annotations_version = "1.6.3"
    jackson_version = "2.13.0"
    jackson_databind_version = "2.13.0"
    {{#openApiNullable}}
    jackson_databind_nullable_version = "0.2.2"
    {{/openApiNullable}}
    jakarta_annotation_version = "1.3.5"
    jersey_version = "2.35"
    junit_version = "4.13.2"
    {{#threetenbp}}
    threetenbp_version = "2.9.10"
    {{/threetenbp}}
    {{#hasOAuthMethods}}
    scribejava_apis_version = "8.3.1"
    {{/hasOAuthMethods}}
    {{#hasHttpSignatureMethods}}
    tomitribe_http_signatures_version = "1.7"
    {{/hasHttpSignatureMethods}}
    mockito_version = "3.12.4"
}

dependencies {
    implementation "io.swagger:swagger-annotations:$swagger_annotations_version"
    implementation 'commons-codec:commons-codec:1.15'
    implementation "com.google.code.findbugs:jsr305:3.0.2"
    implementation "org.glassfish.jersey.core:jersey-client:$jersey_version"
    implementation "org.glassfish.jersey.inject:jersey-hk2:$jersey_version"
    implementation "org.glassfish.jersey.media:jersey-media-multipart:$jersey_version"
    implementation "org.glassfish.jersey.media:jersey-media-json-jackson:$jersey_version"
    implementation "org.glassfish.jersey.connectors:jersey-apache-connector:$jersey_version"
    implementation "com.fasterxml.jackson.core:jackson-core:$jackson_version"
    implementation "com.fasterxml.jackson.core:jackson-annotations:$jackson_version"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jackson_databind_version"
    {{#openApiNullable}}
    implementation "org.openapitools:jackson-databind-nullable:$jackson_databind_nullable_version"
    {{/openApiNullable}}
    {{#joda}}
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-joda:$jackson_version"
    {{/joda}}
    {{#java8}}
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_version"
    {{/java8}}
    {{#hasOAuthMethods}}
    implementation "com.github.scribejava:scribejava-apis:$scribejava_apis_version"
    {{/hasOAuthMethods}}
    {{#hasHttpSignatureMethods}}
    implementation "org.tomitribe:tomitribe-http-signatures:$tomitribe_http_signatures_version"
    {{/hasHttpSignatureMethods}}
    {{#threetenbp}}
    implementation "com.github.joschi.jackson:jackson-datatype-threetenbp:$threetenbp_version"
    {{/threetenbp}}
    {{^java8}}
    implementation "com.brsanthu:migbase64:2.2"
    {{/java8}}
    implementation "jakarta.annotation:jakarta.annotation-api:$jakarta_annotation_version"
    testImplementation "junit:junit:$junit_version"
    testImplementation "org.mockito:mockito-core:$mockito_version"
}

javadoc {
    options.tags = [ "http.response.details:a:Http Response Details" ]
}

// Use spotless plugin to automatically format code, remove unused import, etc
// To apply changes directly to the file, run `gradlew spotlessApply`
// Ref: https://github.com/diffplug/spotless/tree/main/plugin-gradle
spotless {
    // comment out below to run spotless as part of the `check` task
    enforceCheck false

    format 'misc', {
        // define the files (e.g. '*.gradle', '*.md') to apply `misc` to
        target '.gitignore'
        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces() // Takes an integer argument if you don't like 4
        endWithNewline()
    }
    java {
        // don't need to set target, it is inferred from java
        // apply a specific flavor of google-java-format
        googleJavaFormat('1.8').aosp().reflowLongStrings()
        removeUnusedImports()
        importOrder()
    }
}
