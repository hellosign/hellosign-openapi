/*
 * HelloSign API
 * HelloSign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hellosign.openapi.api;

import com.hellosign.openapi.ApiClient;
import com.hellosign.openapi.ApiException;
import com.hellosign.openapi.TestHelper;
import com.hellosign.openapi.auth.*;
import com.hellosign.openapi.model.*;
import org.junit.Assert;
import org.junit.Test;

/**
 * API tests for TeamApi
 */
public class TeamApiTest {

    /**
     * Adds or invites a user to your Team.
     *
     * Invites a user (specified using the &#x60;email_address&#x60; parameter) to your Team. If the user does not currently have a HelloSign Account, a new one will be created for them. If a user is already a part of another Team, a &#x60;team_invite_failed&#x60; error will be returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void teamAddMemberTest() throws Exception {
        TeamAddMemberRequest request = TestHelper.getFixtureData(TeamAddMemberRequest.class, "default");
        TeamGetResponse expected = TestHelper.getFixtureData(TeamGetResponse.class, "default");
        ApiClient apiClient = TestHelper.setUpMock(200, expected);
        TeamApi api = new TeamApi(apiClient);
        TeamGetResponse actual = api.teamAddMember(request, null);
        Assert.assertEquals(expected, actual);
    }

    /**
     * Creates a new Team.
     *
     * Creates a new Team and makes you a member. You must not currently belong to a Team to invoke.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void teamCreateTest() throws Exception {
        TeamCreateRequest request = TestHelper.getFixtureData(TeamCreateRequest.class, "default");
        TeamGetResponse expected = TestHelper.getFixtureData(TeamGetResponse.class, "default");
        ApiClient apiClient = TestHelper.setUpMock(200, expected);
        TeamApi api = new TeamApi(apiClient);
        TeamGetResponse actual = api.teamCreate(request);
        Assert.assertEquals(expected, actual);
    }

    /**
     * Deletes your Team.
     *
     * Deletes your Team. Can only be invoked when you have a Team with only one member (yourself).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void teamDeleteTest() throws ApiException {
        //api.teamDelete();
        // TODO: test validations
    }

    /**
     * Gets your Team and a list of its members.
     *
     * Returns information about your Team as well as a list of its members. If you do not belong to a Team, a 404 error with an error_name of \&quot;not_found\&quot; will be returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void teamGetTest() throws Exception {
        TeamGetResponse expected = TestHelper.getFixtureData(TeamGetResponse.class, "default");
        ApiClient apiClient = TestHelper.setUpMock(200, expected);
        TeamApi api = new TeamApi(apiClient);
        TeamGetResponse actual = api.teamGet();
        Assert.assertEquals(expected, actual);
    }

    /**
     * Removes a user from your Team.
     *
     * Removes the provided user Account from your Team. If the Account had an outstanding invitation to your Team, the invitation will be expired. If you choose to transfer documents from the removed Account to an Account provided in the &#x60;new_owner_email_address&#x60; parameter (available only for Enterprise plans), the response status code will be 201, which indicates that your request has been queued but not fully executed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void teamRemoveMemberTest() throws Exception {
        TeamRemoveMemberRequest request = TestHelper.getFixtureData(TeamRemoveMemberRequest.class, "default");
        TeamGetResponse expected = TestHelper.getFixtureData(TeamGetResponse.class, "default");
        ApiClient apiClient = TestHelper.setUpMock(200, expected);
        TeamApi api = new TeamApi(apiClient);
        TeamGetResponse actual = api.teamRemoveMember(request);
        Assert.assertEquals(expected, actual);
    }

    /**
     * Updates a Team&#39;s name.
     *
     * Updates the name of your Team.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void teamUpdateTest() throws Exception {
        TeamUpdateRequest request = TestHelper.getFixtureData(TeamUpdateRequest.class, "default");
        TeamGetResponse expected = TestHelper.getFixtureData(TeamGetResponse.class, "default");
        ApiClient apiClient = TestHelper.setUpMock(200, expected);
        TeamApi api = new TeamApi(apiClient);
        TeamGetResponse actual = api.teamUpdate(request);
        Assert.assertEquals(expected, actual);
    }

}
