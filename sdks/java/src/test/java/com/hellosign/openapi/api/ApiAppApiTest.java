/*
 * HelloSign API
 * HelloSign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hellosign.openapi.api;

import com.hellosign.openapi.ApiClient;
import com.hellosign.openapi.ApiException;
import com.hellosign.openapi.TestHelper;
import com.hellosign.openapi.auth.*;
import com.hellosign.openapi.model.*;
import org.junit.Assert;
import org.junit.Test;

/**
 * API tests for ApiAppApi
 */
public class ApiAppApiTest {

    /**
     * Creates a new API App.
     *
     * Creates a new API App.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAppCreateTest() throws Exception {
        ApiAppCreateRequest request = TestHelper.getFixtureData(ApiAppCreateRequest.class, "default");
        ApiAppGetResponse expected = TestHelper.getFixtureData(ApiAppGetResponse.class, "default");
        ApiClient apiClient = TestHelper.setUpMock(200, expected);
        ApiAppApi api = new ApiAppApi(apiClient);
        ApiAppGetResponse actual = api.apiAppCreate(request);
        Assert.assertEquals(expected, actual);
    }

    /**
     * Deletes an API App.
     *
     * Deletes an API App. Can only be invoked for apps you own.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAppDeleteTest() throws ApiException {
        //String clientId = null;
        //api.apiAppDelete(clientId);
        // TODO: test validations
    }

    /**
     * Gets an API App.
     *
     * Returns an object with information about an API App.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAppGetTest() throws Exception {
        String clientId = "0dd3b823a682527788c4e40cb7b6f7e9";
        ApiAppGetResponse expected = TestHelper.getFixtureData(ApiAppGetResponse.class, "default");
        ApiClient apiClient = TestHelper.setUpMock(200, expected);
        ApiAppApi api = new ApiAppApi(apiClient);
        ApiAppGetResponse actual = api.apiAppGet(clientId);
        Assert.assertEquals(expected, actual);
    }

    /**
     * Lists your API Apps.
     *
     * Returns a list of API Apps that are accessible by you. If you are on a team with an Admin or Developer role, this list will include apps owned by teammates.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAppListTest() throws Exception {
        ApiAppListResponse expected = TestHelper.getFixtureData(ApiAppListResponse.class, "default");
        ApiClient apiClient = TestHelper.setUpMock(200, expected);
        ApiAppApi api = new ApiAppApi(apiClient);
        ApiAppListResponse actual = api.apiAppList(1, 20);
        Assert.assertEquals(expected, actual);
    }

    /**
     * Updates an existing API App.
     *
     * Updates an existing API App. Can only be invoked for apps you own. Only the fields you provide will be updated. If you wish to clear an existing optional field, provide an empty string.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAppUpdateTest() throws Exception {
        String clientId = "0dd3b823a682527788c4e40cb7b6f7e9";
        ApiAppUpdateRequest request = TestHelper.getFixtureData(ApiAppUpdateRequest.class, "default");
        ApiAppGetResponse expected = TestHelper.getFixtureData(ApiAppGetResponse.class, "default");
        ApiClient apiClient = TestHelper.setUpMock(200, expected);
        ApiAppApi api = new ApiAppApi(apiClient);
        ApiAppGetResponse actual = api.apiAppUpdate(clientId, request);
        Assert.assertEquals(expected, actual);
    }

}
