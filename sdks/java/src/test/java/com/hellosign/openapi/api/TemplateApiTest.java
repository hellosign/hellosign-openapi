/*
 * HelloSign API
 * HelloSign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hellosign.openapi.api;

import com.hellosign.openapi.ApiClient;
import com.hellosign.openapi.ApiException;
import com.hellosign.openapi.TestHelper;
import com.hellosign.openapi.auth.*;
import com.hellosign.openapi.model.*;
import org.junit.Assert;
import org.junit.Test;

/**
 * API tests for TemplateApi
 */
public class TemplateApiTest {

    /**
     * Gives the specified Account access to the specified Template.
     *
     * Gives the specified Account access to the specified Template. The specified Account must be a part of your Team.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void templateAddUserTest() throws Exception {
        String templateId = "f57db65d3f933b5316d398057a36176831451a35";
        TemplateAddUserRequest request = TestHelper.getFixtureData(TemplateAddUserRequest.class, "default");
        TemplateGetResponse expected = TestHelper.getFixtureData(TemplateGetResponse.class, "default");
        ApiClient apiClient = TestHelper.setUpMock(200, expected);
        TemplateApi api = new TemplateApi(apiClient);
        TemplateGetResponse actual = api.templateAddUser(templateId, request);
        Assert.assertEquals(expected, actual);
    }

    /**
     * Creates an embedded template draft for further editing.
     *
     * The first step in an embedded template workflow. Creates a draft template that can then be further set up in the template &#39;edit&#39; stage.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void templateCreateEmbeddedDraftTest() throws Exception {
        TemplateCreateEmbeddedDraftRequest request = TestHelper.getFixtureData(TemplateCreateEmbeddedDraftRequest.class, "default");
        TemplateCreateEmbeddedDraftResponse expected = TestHelper.getFixtureData(TemplateCreateEmbeddedDraftResponse.class, "default");
        ApiClient apiClient = TestHelper.setUpMock(200, expected);
        TemplateApi api = new TemplateApi(apiClient);
        TemplateCreateEmbeddedDraftResponse actual = api.templateCreateEmbeddedDraft(request);
        Assert.assertEquals(expected, actual);
    }

    /**
     * Deletes the specified template.
     *
     * Completely deletes the template specified from the account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void templateDeleteTest() throws ApiException {
        //String templateId = null;
        //api.templateDelete(templateId);
        // TODO: test validations
    }

    /**
     * Obtain a copy of a template&#39;s original files.
     *
     * Obtain a copy of the current documents specified by the &#x60;template_id&#x60; parameter.  Returns a PDF or ZIP file, or if &#x60;get_url&#x60; is set, a JSON object with a url to the file (PDFs only). If &#x60;get_data_uri&#x60; is set, a JSON object with a &#x60;data_uri&#x60; representing the base64 encoded file (PDFs only) is returned.  If the files are currently being prepared, a status code of &#x60;409&#x60; will be returned instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void templateFilesTest() throws Exception {
        // TODO: test validations
    }

    /**
     * Gets a Template which includes a list of Accounts that can access it.
     *
     * Returns the Template specified by the id parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void templateGetTest() throws Exception {
        String templateId = "f57db65d3f933b5316d398057a36176831451a35";

        TemplateGetResponse expected = TestHelper.getFixtureData(TemplateGetResponse.class, "default");
        ApiClient apiClient = TestHelper.setUpMock(200, expected);
        TemplateApi api = new TemplateApi(apiClient);
        TemplateGetResponse actual = api.templateGet(templateId);
        Assert.assertEquals(expected, actual);
    }

    /**
     * Lists your Templates.
     *
     * Returns a list of the Templates that are accessible by you.  Take a look at our [search guide](https://app.hellosign.com/api/reference#Search) to learn more about querying templates.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void templateListTest() throws Exception {
        String accountId = "all";

        TemplateListResponse expected = TestHelper.getFixtureData(TemplateListResponse.class, "default");
        ApiClient apiClient = TestHelper.setUpMock(200, expected);
        TemplateApi api = new TemplateApi(apiClient);
        TemplateListResponse actual = api.templateList(accountId, 1, 20, null);
        Assert.assertEquals(expected, actual);
    }

    /**
     * Removes the specified Account&#39;s access to the specified Template.
     *
     * Removes the specified Account&#39;s access to the specified Template.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void templateRemoveUserTest() throws Exception {
        String templateId = "f57db65d3f933b5316d398057a36176831451a35";
        TemplateRemoveUserRequest request = TestHelper.getFixtureData(TemplateRemoveUserRequest.class, "default");
        TemplateGetResponse expected = TestHelper.getFixtureData(TemplateGetResponse.class, "default");
        ApiClient apiClient = TestHelper.setUpMock(200, expected);
        TemplateApi api = new TemplateApi(apiClient);
        TemplateGetResponse actual = api.templateRemoveUser(templateId, request);
        Assert.assertEquals(expected, actual);
    }

    /**
     * Overlays a new file with the overlay of an existing template.
     *
     * Overlays a new file with the overlay of an existing template. The new file(s) must:  1. have the same or higher page count 2. the same orientation as the file(s) being replaced.  This will not overwrite or in any way affect the existing template. Both the existing template and new template will be available for use after executing this endpoint. Also note that this will decrement your template quota.  Overlaying new files is asynchronous and a successful call to this endpoint will return an empty 200 OK response if the request passes initial validation checks.  It is recommended that a callback be implemented to listen for the callback event. A &#x60;template_created&#x60; event will be sent when the files are updated or a &#x60;template_error&#x60; event will be sent if there was a problem while updating the files. If a callback handler has been configured and the event has not been received within 60 minutes of making the call, check the status of the request in the API dashboard and retry the request if necessary.  If the page orientation or page count is different from the original template document, we will notify you with a &#x60;template_error&#x60; [callback event](https://app.hellosign.com/api/eventsAndCallbacksWalkthrough).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void templateUpdateFilesTest() throws Exception {
        String templateId = "f57db65d3f933b5316d398057a36176831451a35";
        TemplateUpdateFilesRequest request = TestHelper.getFixtureData(TemplateUpdateFilesRequest.class, "default");
        TemplateUpdateFilesResponse expected = TestHelper.getFixtureData(TemplateUpdateFilesResponse.class, "default");
        ApiClient apiClient = TestHelper.setUpMock(200, expected);
        TemplateApi api = new TemplateApi(apiClient);
        TemplateUpdateFilesResponse actual = api.templateUpdateFiles(templateId, request);
        Assert.assertEquals(expected, actual);
    }

}
