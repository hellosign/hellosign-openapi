/*
 * Dropbox Sign API
 *
 * Dropbox Sign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Dropbox.Sign.Client;
using Dropbox.Sign.Model;

namespace Dropbox.Sign.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFaxApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete Fax
        /// </summary>
        /// <remarks>
        /// Deletes the specified Fax from the system
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxId">Fax ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void FaxDelete(string faxId, int operationIndex = 0);

        /// <summary>
        /// Delete Fax
        /// </summary>
        /// <remarks>
        /// Deletes the specified Fax from the system
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxId">Fax ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FaxDeleteWithHttpInfo(string faxId, int operationIndex = 0);
        /// <summary>
        /// Download Fax Files
        /// </summary>
        /// <remarks>
        /// Downloads files associated with a Fax
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxId">Fax ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream FaxFiles(string faxId, int operationIndex = 0);

        /// <summary>
        /// Download Fax Files
        /// </summary>
        /// <remarks>
        /// Downloads files associated with a Fax
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxId">Fax ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> FaxFilesWithHttpInfo(string faxId, int operationIndex = 0);
        /// <summary>
        /// Get Fax
        /// </summary>
        /// <remarks>
        /// Returns information about a Fax
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxId">Fax ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FaxGetResponse</returns>
        FaxGetResponse FaxGet(string faxId, int operationIndex = 0);

        /// <summary>
        /// Get Fax
        /// </summary>
        /// <remarks>
        /// Returns information about a Fax
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxId">Fax ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FaxGetResponse</returns>
        ApiResponse<FaxGetResponse> FaxGetWithHttpInfo(string faxId, int operationIndex = 0);
        /// <summary>
        /// Lists Faxes
        /// </summary>
        /// <remarks>
        /// Returns properties of multiple Faxes
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Which page number of the Fax List to return. Defaults to &#x60;1&#x60;. (optional, default to 1)</param>
        /// <param name="pageSize">Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FaxListResponse</returns>
        FaxListResponse FaxList(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// Lists Faxes
        /// </summary>
        /// <remarks>
        /// Returns properties of multiple Faxes
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Which page number of the Fax List to return. Defaults to &#x60;1&#x60;. (optional, default to 1)</param>
        /// <param name="pageSize">Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FaxListResponse</returns>
        ApiResponse<FaxListResponse> FaxListWithHttpInfo(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Send Fax
        /// </summary>
        /// <remarks>
        /// Creates and sends a new Fax with the submitted file(s)
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxSendRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FaxGetResponse</returns>
        FaxGetResponse FaxSend(FaxSendRequest faxSendRequest, int operationIndex = 0);

        /// <summary>
        /// Send Fax
        /// </summary>
        /// <remarks>
        /// Creates and sends a new Fax with the submitted file(s)
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxSendRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FaxGetResponse</returns>
        ApiResponse<FaxGetResponse> FaxSendWithHttpInfo(FaxSendRequest faxSendRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFaxApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete Fax
        /// </summary>
        /// <remarks>
        /// Deletes the specified Fax from the system
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxId">Fax ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FaxDeleteAsync(string faxId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete Fax
        /// </summary>
        /// <remarks>
        /// Deletes the specified Fax from the system
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxId">Fax ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FaxDeleteWithHttpInfoAsync(string faxId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Download Fax Files
        /// </summary>
        /// <remarks>
        /// Downloads files associated with a Fax
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxId">Fax ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> FaxFilesAsync(string faxId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Download Fax Files
        /// </summary>
        /// <remarks>
        /// Downloads files associated with a Fax
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxId">Fax ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> FaxFilesWithHttpInfoAsync(string faxId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Fax
        /// </summary>
        /// <remarks>
        /// Returns information about a Fax
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxId">Fax ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FaxGetResponse</returns>
        System.Threading.Tasks.Task<FaxGetResponse> FaxGetAsync(string faxId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Fax
        /// </summary>
        /// <remarks>
        /// Returns information about a Fax
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxId">Fax ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FaxGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FaxGetResponse>> FaxGetWithHttpInfoAsync(string faxId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Lists Faxes
        /// </summary>
        /// <remarks>
        /// Returns properties of multiple Faxes
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Which page number of the Fax List to return. Defaults to &#x60;1&#x60;. (optional, default to 1)</param>
        /// <param name="pageSize">Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FaxListResponse</returns>
        System.Threading.Tasks.Task<FaxListResponse> FaxListAsync(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Lists Faxes
        /// </summary>
        /// <remarks>
        /// Returns properties of multiple Faxes
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Which page number of the Fax List to return. Defaults to &#x60;1&#x60;. (optional, default to 1)</param>
        /// <param name="pageSize">Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FaxListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FaxListResponse>> FaxListWithHttpInfoAsync(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Send Fax
        /// </summary>
        /// <remarks>
        /// Creates and sends a new Fax with the submitted file(s)
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxSendRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FaxGetResponse</returns>
        System.Threading.Tasks.Task<FaxGetResponse> FaxSendAsync(FaxSendRequest faxSendRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Send Fax
        /// </summary>
        /// <remarks>
        /// Creates and sends a new Fax with the submitted file(s)
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxSendRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FaxGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FaxGetResponse>> FaxSendWithHttpInfoAsync(FaxSendRequest faxSendRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFaxApi : IFaxApiSync, IFaxApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FaxApi : IFaxApi
    {
        private Dropbox.Sign.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FaxApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FaxApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FaxApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FaxApi(string basePath)
        {
            this.Configuration = Dropbox.Sign.Client.Configuration.MergeConfigurations(
                Dropbox.Sign.Client.GlobalConfiguration.Instance,
                new Dropbox.Sign.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Dropbox.Sign.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Dropbox.Sign.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Dropbox.Sign.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FaxApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FaxApi(Dropbox.Sign.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Dropbox.Sign.Client.Configuration.MergeConfigurations(
                Dropbox.Sign.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Dropbox.Sign.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Dropbox.Sign.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Dropbox.Sign.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FaxApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FaxApi(Dropbox.Sign.Client.ISynchronousClient client, Dropbox.Sign.Client.IAsynchronousClient asyncClient, Dropbox.Sign.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Dropbox.Sign.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Dropbox.Sign.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Dropbox.Sign.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Dropbox.Sign.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Dropbox.Sign.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete Fax Deletes the specified Fax from the system
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxId">Fax ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void FaxDelete(string faxId, int operationIndex = 0)
        {
            FaxDeleteWithHttpInfo(faxId);
        }

        /// <summary>
        /// Delete Fax Deletes the specified Fax from the system
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxId">Fax ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Dropbox.Sign.Client.ApiResponse<Object> FaxDeleteWithHttpInfo(string faxId, int operationIndex = 0)
        {
            // verify the required parameter 'faxId' is set
            if (faxId == null)
            {
                throw new Dropbox.Sign.Client.ApiException(400, "Missing required parameter 'faxId' when calling FaxApi->FaxDelete");
            }

            Dropbox.Sign.Client.RequestOptions localVarRequestOptions = new Dropbox.Sign.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };
            var localVarContentType = Dropbox.Sign.Client.ClientUtils.SelectHeaderContentType(_contentTypes);

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dropbox.Sign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fax_id", Dropbox.Sign.Client.ClientUtils.ParameterToString(faxId)); // path parameter

            localVarRequestOptions.Operation = "FaxApi.FaxDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Dropbox.Sign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/fax/{fax_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FaxDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Fax Deletes the specified Fax from the system
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxId">Fax ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FaxDeleteAsync(string faxId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await FaxDeleteWithHttpInfoAsync(faxId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Fax Deletes the specified Fax from the system
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxId">Fax ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Dropbox.Sign.Client.ApiResponse<Object>> FaxDeleteWithHttpInfoAsync(string faxId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'faxId' is set
            if (faxId == null)
            {
                throw new Dropbox.Sign.Client.ApiException(400, "Missing required parameter 'faxId' when calling FaxApi->FaxDelete");
            }


            Dropbox.Sign.Client.RequestOptions localVarRequestOptions = new Dropbox.Sign.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };
            var localVarContentType = Dropbox.Sign.Client.ClientUtils.SelectHeaderContentType(_contentTypes);

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dropbox.Sign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fax_id", Dropbox.Sign.Client.ClientUtils.ParameterToString(faxId)); // path parameter

            localVarRequestOptions.Operation = "FaxApi.FaxDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Dropbox.Sign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/fax/{fax_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FaxDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download Fax Files Downloads files associated with a Fax
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxId">Fax ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream FaxFiles(string faxId, int operationIndex = 0)
        {
            Dropbox.Sign.Client.ApiResponse<System.IO.Stream> localVarResponse = FaxFilesWithHttpInfo(faxId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download Fax Files Downloads files associated with a Fax
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxId">Fax ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Dropbox.Sign.Client.ApiResponse<System.IO.Stream> FaxFilesWithHttpInfo(string faxId, int operationIndex = 0)
        {
            // verify the required parameter 'faxId' is set
            if (faxId == null)
            {
                throw new Dropbox.Sign.Client.ApiException(400, "Missing required parameter 'faxId' when calling FaxApi->FaxFiles");
            }

            Dropbox.Sign.Client.RequestOptions localVarRequestOptions = new Dropbox.Sign.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };
            var localVarContentType = Dropbox.Sign.Client.ClientUtils.SelectHeaderContentType(_contentTypes);

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/pdf",
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dropbox.Sign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fax_id", Dropbox.Sign.Client.ClientUtils.ParameterToString(faxId)); // path parameter

            localVarRequestOptions.Operation = "FaxApi.FaxFiles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Dropbox.Sign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/fax/files/{fax_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FaxFiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download Fax Files Downloads files associated with a Fax
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxId">Fax ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> FaxFilesAsync(string faxId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Dropbox.Sign.Client.ApiResponse<System.IO.Stream> localVarResponse = await FaxFilesWithHttpInfoAsync(faxId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download Fax Files Downloads files associated with a Fax
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxId">Fax ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Dropbox.Sign.Client.ApiResponse<System.IO.Stream>> FaxFilesWithHttpInfoAsync(string faxId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'faxId' is set
            if (faxId == null)
            {
                throw new Dropbox.Sign.Client.ApiException(400, "Missing required parameter 'faxId' when calling FaxApi->FaxFiles");
            }


            Dropbox.Sign.Client.RequestOptions localVarRequestOptions = new Dropbox.Sign.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };
            var localVarContentType = Dropbox.Sign.Client.ClientUtils.SelectHeaderContentType(_contentTypes);

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/pdf",
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dropbox.Sign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fax_id", Dropbox.Sign.Client.ClientUtils.ParameterToString(faxId)); // path parameter

            localVarRequestOptions.Operation = "FaxApi.FaxFiles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Dropbox.Sign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/fax/files/{fax_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FaxFiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Fax Returns information about a Fax
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxId">Fax ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FaxGetResponse</returns>
        public FaxGetResponse FaxGet(string faxId, int operationIndex = 0)
        {
            Dropbox.Sign.Client.ApiResponse<FaxGetResponse> localVarResponse = FaxGetWithHttpInfo(faxId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Fax Returns information about a Fax
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxId">Fax ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FaxGetResponse</returns>
        public Dropbox.Sign.Client.ApiResponse<FaxGetResponse> FaxGetWithHttpInfo(string faxId, int operationIndex = 0)
        {
            // verify the required parameter 'faxId' is set
            if (faxId == null)
            {
                throw new Dropbox.Sign.Client.ApiException(400, "Missing required parameter 'faxId' when calling FaxApi->FaxGet");
            }

            Dropbox.Sign.Client.RequestOptions localVarRequestOptions = new Dropbox.Sign.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };
            var localVarContentType = Dropbox.Sign.Client.ClientUtils.SelectHeaderContentType(_contentTypes);

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dropbox.Sign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fax_id", Dropbox.Sign.Client.ClientUtils.ParameterToString(faxId)); // path parameter

            localVarRequestOptions.Operation = "FaxApi.FaxGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Dropbox.Sign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FaxGetResponse>("/fax/{fax_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FaxGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Fax Returns information about a Fax
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxId">Fax ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FaxGetResponse</returns>
        public async System.Threading.Tasks.Task<FaxGetResponse> FaxGetAsync(string faxId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Dropbox.Sign.Client.ApiResponse<FaxGetResponse> localVarResponse = await FaxGetWithHttpInfoAsync(faxId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Fax Returns information about a Fax
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxId">Fax ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FaxGetResponse)</returns>
        public async System.Threading.Tasks.Task<Dropbox.Sign.Client.ApiResponse<FaxGetResponse>> FaxGetWithHttpInfoAsync(string faxId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'faxId' is set
            if (faxId == null)
            {
                throw new Dropbox.Sign.Client.ApiException(400, "Missing required parameter 'faxId' when calling FaxApi->FaxGet");
            }


            Dropbox.Sign.Client.RequestOptions localVarRequestOptions = new Dropbox.Sign.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };
            var localVarContentType = Dropbox.Sign.Client.ClientUtils.SelectHeaderContentType(_contentTypes);

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dropbox.Sign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fax_id", Dropbox.Sign.Client.ClientUtils.ParameterToString(faxId)); // path parameter

            localVarRequestOptions.Operation = "FaxApi.FaxGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Dropbox.Sign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FaxGetResponse>("/fax/{fax_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FaxGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists Faxes Returns properties of multiple Faxes
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Which page number of the Fax List to return. Defaults to &#x60;1&#x60;. (optional, default to 1)</param>
        /// <param name="pageSize">Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FaxListResponse</returns>
        public FaxListResponse FaxList(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            Dropbox.Sign.Client.ApiResponse<FaxListResponse> localVarResponse = FaxListWithHttpInfo(page, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lists Faxes Returns properties of multiple Faxes
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Which page number of the Fax List to return. Defaults to &#x60;1&#x60;. (optional, default to 1)</param>
        /// <param name="pageSize">Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FaxListResponse</returns>
        public Dropbox.Sign.Client.ApiResponse<FaxListResponse> FaxListWithHttpInfo(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            Dropbox.Sign.Client.RequestOptions localVarRequestOptions = new Dropbox.Sign.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };
            var localVarContentType = Dropbox.Sign.Client.ClientUtils.SelectHeaderContentType(_contentTypes);

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dropbox.Sign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dropbox.Sign.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dropbox.Sign.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "FaxApi.FaxList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Dropbox.Sign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FaxListResponse>("/fax/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FaxList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists Faxes Returns properties of multiple Faxes
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Which page number of the Fax List to return. Defaults to &#x60;1&#x60;. (optional, default to 1)</param>
        /// <param name="pageSize">Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FaxListResponse</returns>
        public async System.Threading.Tasks.Task<FaxListResponse> FaxListAsync(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Dropbox.Sign.Client.ApiResponse<FaxListResponse> localVarResponse = await FaxListWithHttpInfoAsync(page, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lists Faxes Returns properties of multiple Faxes
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Which page number of the Fax List to return. Defaults to &#x60;1&#x60;. (optional, default to 1)</param>
        /// <param name="pageSize">Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FaxListResponse)</returns>
        public async System.Threading.Tasks.Task<Dropbox.Sign.Client.ApiResponse<FaxListResponse>> FaxListWithHttpInfoAsync(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Dropbox.Sign.Client.RequestOptions localVarRequestOptions = new Dropbox.Sign.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };
            var localVarContentType = Dropbox.Sign.Client.ClientUtils.SelectHeaderContentType(_contentTypes);

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dropbox.Sign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dropbox.Sign.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dropbox.Sign.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "FaxApi.FaxList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Dropbox.Sign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FaxListResponse>("/fax/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FaxList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Fax Creates and sends a new Fax with the submitted file(s)
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxSendRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FaxGetResponse</returns>
        public FaxGetResponse FaxSend(FaxSendRequest faxSendRequest, int operationIndex = 0)
        {
            Dropbox.Sign.Client.ApiResponse<FaxGetResponse> localVarResponse = FaxSendWithHttpInfo(faxSendRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send Fax Creates and sends a new Fax with the submitted file(s)
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxSendRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FaxGetResponse</returns>
        public Dropbox.Sign.Client.ApiResponse<FaxGetResponse> FaxSendWithHttpInfo(FaxSendRequest faxSendRequest, int operationIndex = 0)
        {
            // verify the required parameter 'faxSendRequest' is set
            if (faxSendRequest == null)
            {
                throw new Dropbox.Sign.Client.ApiException(400, "Missing required parameter 'faxSendRequest' when calling FaxApi->FaxSend");
            }

            Dropbox.Sign.Client.RequestOptions localVarRequestOptions = new Dropbox.Sign.Client.RequestOptions();

            var localVarContentType = "";
            var openApiTypes = faxSendRequest.GetOpenApiTypes();
            if (ClientUtils.HasFileType(openApiTypes))
            {
                ClientUtils.SetFormData(localVarRequestOptions, openApiTypes);
                localVarContentType = "multipart/form-data";
            }
            else
            {
                localVarContentType = "application/json";
                localVarRequestOptions.Data = faxSendRequest;
            }

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dropbox.Sign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "FaxApi.FaxSend";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Dropbox.Sign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<FaxGetResponse>("/fax/send", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FaxSend", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Fax Creates and sends a new Fax with the submitted file(s)
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxSendRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FaxGetResponse</returns>
        public async System.Threading.Tasks.Task<FaxGetResponse> FaxSendAsync(FaxSendRequest faxSendRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Dropbox.Sign.Client.ApiResponse<FaxGetResponse> localVarResponse = await FaxSendWithHttpInfoAsync(faxSendRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send Fax Creates and sends a new Fax with the submitted file(s)
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxSendRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FaxGetResponse)</returns>
        public async System.Threading.Tasks.Task<Dropbox.Sign.Client.ApiResponse<FaxGetResponse>> FaxSendWithHttpInfoAsync(FaxSendRequest faxSendRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'faxSendRequest' is set
            if (faxSendRequest == null)
            {
                throw new Dropbox.Sign.Client.ApiException(400, "Missing required parameter 'faxSendRequest' when calling FaxApi->FaxSend");
            }


            Dropbox.Sign.Client.RequestOptions localVarRequestOptions = new Dropbox.Sign.Client.RequestOptions();

            var localVarContentType = "";
            var openApiTypes = faxSendRequest.GetOpenApiTypes();
            if (ClientUtils.HasFileType(openApiTypes))
            {
                ClientUtils.SetFormData(localVarRequestOptions, openApiTypes);
                localVarContentType = "multipart/form-data";
            }
            else
            {
                localVarContentType = "application/json";
                localVarRequestOptions.Data = faxSendRequest;
            }

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dropbox.Sign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "FaxApi.FaxSend";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Dropbox.Sign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<FaxGetResponse>("/fax/send", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FaxSend", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
