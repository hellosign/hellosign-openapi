/*
 * Dropbox Sign API
 *
 * Dropbox Sign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Dropbox.Sign.Client;
using Dropbox.Sign.Model;

namespace Dropbox.Sign.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFaxLineApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add Fax Line User
        /// </summary>
        /// <remarks>
        /// Grants a user access to the specified Fax Line.
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxLineAddUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FaxLineResponse</returns>
        FaxLineResponse FaxLineAddUser(FaxLineAddUserRequest faxLineAddUserRequest, int operationIndex = 0);

        /// <summary>
        /// Add Fax Line User
        /// </summary>
        /// <remarks>
        /// Grants a user access to the specified Fax Line.
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxLineAddUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FaxLineResponse</returns>
        ApiResponse<FaxLineResponse> FaxLineAddUserWithHttpInfo(FaxLineAddUserRequest faxLineAddUserRequest, int operationIndex = 0);
        /// <summary>
        /// Get Available Fax Line Area Codes
        /// </summary>
        /// <remarks>
        /// Returns a list of available area codes for a given state/province and city
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Filter area codes by country</param>
        /// <param name="state">Filter area codes by state (optional)</param>
        /// <param name="province">Filter area codes by province (optional)</param>
        /// <param name="city">Filter area codes by city (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FaxLineAreaCodeGetResponse</returns>
        FaxLineAreaCodeGetResponse FaxLineAreaCodeGet(string country, string? state = default(string?), string? province = default(string?), string? city = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get Available Fax Line Area Codes
        /// </summary>
        /// <remarks>
        /// Returns a list of available area codes for a given state/province and city
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Filter area codes by country</param>
        /// <param name="state">Filter area codes by state (optional)</param>
        /// <param name="province">Filter area codes by province (optional)</param>
        /// <param name="city">Filter area codes by city (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FaxLineAreaCodeGetResponse</returns>
        ApiResponse<FaxLineAreaCodeGetResponse> FaxLineAreaCodeGetWithHttpInfo(string country, string? state = default(string?), string? province = default(string?), string? city = default(string?), int operationIndex = 0);
        /// <summary>
        /// Purchase Fax Line
        /// </summary>
        /// <remarks>
        /// Purchases a new Fax Line
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxLineCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FaxLineResponse</returns>
        FaxLineResponse FaxLineCreate(FaxLineCreateRequest faxLineCreateRequest, int operationIndex = 0);

        /// <summary>
        /// Purchase Fax Line
        /// </summary>
        /// <remarks>
        /// Purchases a new Fax Line
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxLineCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FaxLineResponse</returns>
        ApiResponse<FaxLineResponse> FaxLineCreateWithHttpInfo(FaxLineCreateRequest faxLineCreateRequest, int operationIndex = 0);
        /// <summary>
        /// Delete Fax Line
        /// </summary>
        /// <remarks>
        /// Deletes the specified Fax Line from the subscription.
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxLineDeleteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void FaxLineDelete(FaxLineDeleteRequest faxLineDeleteRequest, int operationIndex = 0);

        /// <summary>
        /// Delete Fax Line
        /// </summary>
        /// <remarks>
        /// Deletes the specified Fax Line from the subscription.
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxLineDeleteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FaxLineDeleteWithHttpInfo(FaxLineDeleteRequest faxLineDeleteRequest, int operationIndex = 0);
        /// <summary>
        /// Get Fax Line
        /// </summary>
        /// <remarks>
        /// Returns the properties and settings of a Fax Line.
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The Fax Line number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FaxLineResponse</returns>
        FaxLineResponse FaxLineGet(string number, int operationIndex = 0);

        /// <summary>
        /// Get Fax Line
        /// </summary>
        /// <remarks>
        /// Returns the properties and settings of a Fax Line.
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The Fax Line number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FaxLineResponse</returns>
        ApiResponse<FaxLineResponse> FaxLineGetWithHttpInfo(string number, int operationIndex = 0);
        /// <summary>
        /// List Fax Lines
        /// </summary>
        /// <remarks>
        /// Returns the properties and settings of multiple Fax Lines.
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID (optional)</param>
        /// <param name="page">Which page number of the Fax Line List to return. Defaults to &#x60;1&#x60;. (optional, default to 1)</param>
        /// <param name="pageSize">Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)</param>
        /// <param name="showTeamLines">Include Fax Lines belonging to team members in the list (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FaxLineListResponse</returns>
        FaxLineListResponse FaxLineList(string? accountId = default(string?), int? page = default(int?), int? pageSize = default(int?), bool? showTeamLines = default(bool?), int operationIndex = 0);

        /// <summary>
        /// List Fax Lines
        /// </summary>
        /// <remarks>
        /// Returns the properties and settings of multiple Fax Lines.
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID (optional)</param>
        /// <param name="page">Which page number of the Fax Line List to return. Defaults to &#x60;1&#x60;. (optional, default to 1)</param>
        /// <param name="pageSize">Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)</param>
        /// <param name="showTeamLines">Include Fax Lines belonging to team members in the list (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FaxLineListResponse</returns>
        ApiResponse<FaxLineListResponse> FaxLineListWithHttpInfo(string? accountId = default(string?), int? page = default(int?), int? pageSize = default(int?), bool? showTeamLines = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Remove Fax Line Access
        /// </summary>
        /// <remarks>
        /// Removes a user&#39;s access to the specified Fax Line
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxLineRemoveUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FaxLineResponse</returns>
        FaxLineResponse FaxLineRemoveUser(FaxLineRemoveUserRequest faxLineRemoveUserRequest, int operationIndex = 0);

        /// <summary>
        /// Remove Fax Line Access
        /// </summary>
        /// <remarks>
        /// Removes a user&#39;s access to the specified Fax Line
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxLineRemoveUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FaxLineResponse</returns>
        ApiResponse<FaxLineResponse> FaxLineRemoveUserWithHttpInfo(FaxLineRemoveUserRequest faxLineRemoveUserRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFaxLineApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add Fax Line User
        /// </summary>
        /// <remarks>
        /// Grants a user access to the specified Fax Line.
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxLineAddUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FaxLineResponse</returns>
        System.Threading.Tasks.Task<FaxLineResponse> FaxLineAddUserAsync(FaxLineAddUserRequest faxLineAddUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Add Fax Line User
        /// </summary>
        /// <remarks>
        /// Grants a user access to the specified Fax Line.
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxLineAddUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FaxLineResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FaxLineResponse>> FaxLineAddUserWithHttpInfoAsync(FaxLineAddUserRequest faxLineAddUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Available Fax Line Area Codes
        /// </summary>
        /// <remarks>
        /// Returns a list of available area codes for a given state/province and city
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Filter area codes by country</param>
        /// <param name="state">Filter area codes by state (optional)</param>
        /// <param name="province">Filter area codes by province (optional)</param>
        /// <param name="city">Filter area codes by city (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FaxLineAreaCodeGetResponse</returns>
        System.Threading.Tasks.Task<FaxLineAreaCodeGetResponse> FaxLineAreaCodeGetAsync(string country, string? state = default(string?), string? province = default(string?), string? city = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Available Fax Line Area Codes
        /// </summary>
        /// <remarks>
        /// Returns a list of available area codes for a given state/province and city
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Filter area codes by country</param>
        /// <param name="state">Filter area codes by state (optional)</param>
        /// <param name="province">Filter area codes by province (optional)</param>
        /// <param name="city">Filter area codes by city (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FaxLineAreaCodeGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FaxLineAreaCodeGetResponse>> FaxLineAreaCodeGetWithHttpInfoAsync(string country, string? state = default(string?), string? province = default(string?), string? city = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Purchase Fax Line
        /// </summary>
        /// <remarks>
        /// Purchases a new Fax Line
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxLineCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FaxLineResponse</returns>
        System.Threading.Tasks.Task<FaxLineResponse> FaxLineCreateAsync(FaxLineCreateRequest faxLineCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Purchase Fax Line
        /// </summary>
        /// <remarks>
        /// Purchases a new Fax Line
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxLineCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FaxLineResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FaxLineResponse>> FaxLineCreateWithHttpInfoAsync(FaxLineCreateRequest faxLineCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete Fax Line
        /// </summary>
        /// <remarks>
        /// Deletes the specified Fax Line from the subscription.
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxLineDeleteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FaxLineDeleteAsync(FaxLineDeleteRequest faxLineDeleteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete Fax Line
        /// </summary>
        /// <remarks>
        /// Deletes the specified Fax Line from the subscription.
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxLineDeleteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FaxLineDeleteWithHttpInfoAsync(FaxLineDeleteRequest faxLineDeleteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Fax Line
        /// </summary>
        /// <remarks>
        /// Returns the properties and settings of a Fax Line.
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The Fax Line number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FaxLineResponse</returns>
        System.Threading.Tasks.Task<FaxLineResponse> FaxLineGetAsync(string number, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Fax Line
        /// </summary>
        /// <remarks>
        /// Returns the properties and settings of a Fax Line.
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The Fax Line number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FaxLineResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FaxLineResponse>> FaxLineGetWithHttpInfoAsync(string number, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Fax Lines
        /// </summary>
        /// <remarks>
        /// Returns the properties and settings of multiple Fax Lines.
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID (optional)</param>
        /// <param name="page">Which page number of the Fax Line List to return. Defaults to &#x60;1&#x60;. (optional, default to 1)</param>
        /// <param name="pageSize">Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)</param>
        /// <param name="showTeamLines">Include Fax Lines belonging to team members in the list (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FaxLineListResponse</returns>
        System.Threading.Tasks.Task<FaxLineListResponse> FaxLineListAsync(string? accountId = default(string?), int? page = default(int?), int? pageSize = default(int?), bool? showTeamLines = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Fax Lines
        /// </summary>
        /// <remarks>
        /// Returns the properties and settings of multiple Fax Lines.
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID (optional)</param>
        /// <param name="page">Which page number of the Fax Line List to return. Defaults to &#x60;1&#x60;. (optional, default to 1)</param>
        /// <param name="pageSize">Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)</param>
        /// <param name="showTeamLines">Include Fax Lines belonging to team members in the list (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FaxLineListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FaxLineListResponse>> FaxLineListWithHttpInfoAsync(string? accountId = default(string?), int? page = default(int?), int? pageSize = default(int?), bool? showTeamLines = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Remove Fax Line Access
        /// </summary>
        /// <remarks>
        /// Removes a user&#39;s access to the specified Fax Line
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxLineRemoveUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FaxLineResponse</returns>
        System.Threading.Tasks.Task<FaxLineResponse> FaxLineRemoveUserAsync(FaxLineRemoveUserRequest faxLineRemoveUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Remove Fax Line Access
        /// </summary>
        /// <remarks>
        /// Removes a user&#39;s access to the specified Fax Line
        /// </remarks>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxLineRemoveUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FaxLineResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FaxLineResponse>> FaxLineRemoveUserWithHttpInfoAsync(FaxLineRemoveUserRequest faxLineRemoveUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFaxLineApi : IFaxLineApiSync, IFaxLineApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FaxLineApi : IFaxLineApi
    {
        private Dropbox.Sign.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FaxLineApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FaxLineApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FaxLineApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FaxLineApi(string basePath)
        {
            this.Configuration = Dropbox.Sign.Client.Configuration.MergeConfigurations(
                Dropbox.Sign.Client.GlobalConfiguration.Instance,
                new Dropbox.Sign.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Dropbox.Sign.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Dropbox.Sign.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Dropbox.Sign.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FaxLineApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FaxLineApi(Dropbox.Sign.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Dropbox.Sign.Client.Configuration.MergeConfigurations(
                Dropbox.Sign.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Dropbox.Sign.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Dropbox.Sign.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Dropbox.Sign.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FaxLineApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FaxLineApi(Dropbox.Sign.Client.ISynchronousClient client, Dropbox.Sign.Client.IAsynchronousClient asyncClient, Dropbox.Sign.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Dropbox.Sign.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Dropbox.Sign.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Dropbox.Sign.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Dropbox.Sign.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Dropbox.Sign.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add Fax Line User Grants a user access to the specified Fax Line.
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxLineAddUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FaxLineResponse</returns>
        public FaxLineResponse FaxLineAddUser(FaxLineAddUserRequest faxLineAddUserRequest, int operationIndex = 0)
        {
            Dropbox.Sign.Client.ApiResponse<FaxLineResponse> localVarResponse = FaxLineAddUserWithHttpInfo(faxLineAddUserRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Fax Line User Grants a user access to the specified Fax Line.
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxLineAddUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FaxLineResponse</returns>
        public Dropbox.Sign.Client.ApiResponse<FaxLineResponse> FaxLineAddUserWithHttpInfo(FaxLineAddUserRequest faxLineAddUserRequest, int operationIndex = 0)
        {
            // verify the required parameter 'faxLineAddUserRequest' is set
            if (faxLineAddUserRequest == null)
            {
                throw new Dropbox.Sign.Client.ApiException(400, "Missing required parameter 'faxLineAddUserRequest' when calling FaxLineApi->FaxLineAddUser");
            }

            Dropbox.Sign.Client.RequestOptions localVarRequestOptions = new Dropbox.Sign.Client.RequestOptions();

            var localVarContentType = "";
            var openApiTypes = faxLineAddUserRequest.GetOpenApiTypes();
            if (ClientUtils.HasFileType(openApiTypes))
            {
                ClientUtils.SetFormData(localVarRequestOptions, openApiTypes);
                localVarContentType = "multipart/form-data";
            }
            else
            {
                localVarContentType = "application/json";
                localVarRequestOptions.Data = faxLineAddUserRequest;
            }

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dropbox.Sign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "FaxLineApi.FaxLineAddUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Dropbox.Sign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<FaxLineResponse>("/fax_line/add_user", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FaxLineAddUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Fax Line User Grants a user access to the specified Fax Line.
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxLineAddUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FaxLineResponse</returns>
        public async System.Threading.Tasks.Task<FaxLineResponse> FaxLineAddUserAsync(FaxLineAddUserRequest faxLineAddUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Dropbox.Sign.Client.ApiResponse<FaxLineResponse> localVarResponse = await FaxLineAddUserWithHttpInfoAsync(faxLineAddUserRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Fax Line User Grants a user access to the specified Fax Line.
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxLineAddUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FaxLineResponse)</returns>
        public async System.Threading.Tasks.Task<Dropbox.Sign.Client.ApiResponse<FaxLineResponse>> FaxLineAddUserWithHttpInfoAsync(FaxLineAddUserRequest faxLineAddUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'faxLineAddUserRequest' is set
            if (faxLineAddUserRequest == null)
            {
                throw new Dropbox.Sign.Client.ApiException(400, "Missing required parameter 'faxLineAddUserRequest' when calling FaxLineApi->FaxLineAddUser");
            }


            Dropbox.Sign.Client.RequestOptions localVarRequestOptions = new Dropbox.Sign.Client.RequestOptions();

            var localVarContentType = "";
            var openApiTypes = faxLineAddUserRequest.GetOpenApiTypes();
            if (ClientUtils.HasFileType(openApiTypes))
            {
                ClientUtils.SetFormData(localVarRequestOptions, openApiTypes);
                localVarContentType = "multipart/form-data";
            }
            else
            {
                localVarContentType = "application/json";
                localVarRequestOptions.Data = faxLineAddUserRequest;
            }

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dropbox.Sign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "FaxLineApi.FaxLineAddUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Dropbox.Sign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<FaxLineResponse>("/fax_line/add_user", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FaxLineAddUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Available Fax Line Area Codes Returns a list of available area codes for a given state/province and city
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Filter area codes by country</param>
        /// <param name="state">Filter area codes by state (optional)</param>
        /// <param name="province">Filter area codes by province (optional)</param>
        /// <param name="city">Filter area codes by city (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FaxLineAreaCodeGetResponse</returns>
        public FaxLineAreaCodeGetResponse FaxLineAreaCodeGet(string country, string? state = default(string?), string? province = default(string?), string? city = default(string?), int operationIndex = 0)
        {
            Dropbox.Sign.Client.ApiResponse<FaxLineAreaCodeGetResponse> localVarResponse = FaxLineAreaCodeGetWithHttpInfo(country, state, province, city);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Available Fax Line Area Codes Returns a list of available area codes for a given state/province and city
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Filter area codes by country</param>
        /// <param name="state">Filter area codes by state (optional)</param>
        /// <param name="province">Filter area codes by province (optional)</param>
        /// <param name="city">Filter area codes by city (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FaxLineAreaCodeGetResponse</returns>
        public Dropbox.Sign.Client.ApiResponse<FaxLineAreaCodeGetResponse> FaxLineAreaCodeGetWithHttpInfo(string country, string? state = default(string?), string? province = default(string?), string? city = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'country' is set
            if (country == null)
            {
                throw new Dropbox.Sign.Client.ApiException(400, "Missing required parameter 'country' when calling FaxLineApi->FaxLineAreaCodeGet");
            }

            Dropbox.Sign.Client.RequestOptions localVarRequestOptions = new Dropbox.Sign.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };
            var localVarContentType = Dropbox.Sign.Client.ClientUtils.SelectHeaderContentType(_contentTypes);

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dropbox.Sign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Dropbox.Sign.Client.ClientUtils.ParameterToMultiMap("", "country", country));
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dropbox.Sign.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (province != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dropbox.Sign.Client.ClientUtils.ParameterToMultiMap("", "province", province));
            }
            if (city != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dropbox.Sign.Client.ClientUtils.ParameterToMultiMap("", "city", city));
            }

            localVarRequestOptions.Operation = "FaxLineApi.FaxLineAreaCodeGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Dropbox.Sign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FaxLineAreaCodeGetResponse>("/fax_line/area_codes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FaxLineAreaCodeGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Available Fax Line Area Codes Returns a list of available area codes for a given state/province and city
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Filter area codes by country</param>
        /// <param name="state">Filter area codes by state (optional)</param>
        /// <param name="province">Filter area codes by province (optional)</param>
        /// <param name="city">Filter area codes by city (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FaxLineAreaCodeGetResponse</returns>
        public async System.Threading.Tasks.Task<FaxLineAreaCodeGetResponse> FaxLineAreaCodeGetAsync(string country, string? state = default(string?), string? province = default(string?), string? city = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Dropbox.Sign.Client.ApiResponse<FaxLineAreaCodeGetResponse> localVarResponse = await FaxLineAreaCodeGetWithHttpInfoAsync(country, state, province, city, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Available Fax Line Area Codes Returns a list of available area codes for a given state/province and city
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Filter area codes by country</param>
        /// <param name="state">Filter area codes by state (optional)</param>
        /// <param name="province">Filter area codes by province (optional)</param>
        /// <param name="city">Filter area codes by city (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FaxLineAreaCodeGetResponse)</returns>
        public async System.Threading.Tasks.Task<Dropbox.Sign.Client.ApiResponse<FaxLineAreaCodeGetResponse>> FaxLineAreaCodeGetWithHttpInfoAsync(string country, string? state = default(string?), string? province = default(string?), string? city = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'country' is set
            if (country == null)
            {
                throw new Dropbox.Sign.Client.ApiException(400, "Missing required parameter 'country' when calling FaxLineApi->FaxLineAreaCodeGet");
            }


            Dropbox.Sign.Client.RequestOptions localVarRequestOptions = new Dropbox.Sign.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };
            var localVarContentType = Dropbox.Sign.Client.ClientUtils.SelectHeaderContentType(_contentTypes);

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dropbox.Sign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Dropbox.Sign.Client.ClientUtils.ParameterToMultiMap("", "country", country));
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dropbox.Sign.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (province != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dropbox.Sign.Client.ClientUtils.ParameterToMultiMap("", "province", province));
            }
            if (city != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dropbox.Sign.Client.ClientUtils.ParameterToMultiMap("", "city", city));
            }

            localVarRequestOptions.Operation = "FaxLineApi.FaxLineAreaCodeGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Dropbox.Sign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FaxLineAreaCodeGetResponse>("/fax_line/area_codes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FaxLineAreaCodeGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Purchase Fax Line Purchases a new Fax Line
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxLineCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FaxLineResponse</returns>
        public FaxLineResponse FaxLineCreate(FaxLineCreateRequest faxLineCreateRequest, int operationIndex = 0)
        {
            Dropbox.Sign.Client.ApiResponse<FaxLineResponse> localVarResponse = FaxLineCreateWithHttpInfo(faxLineCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Purchase Fax Line Purchases a new Fax Line
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxLineCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FaxLineResponse</returns>
        public Dropbox.Sign.Client.ApiResponse<FaxLineResponse> FaxLineCreateWithHttpInfo(FaxLineCreateRequest faxLineCreateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'faxLineCreateRequest' is set
            if (faxLineCreateRequest == null)
            {
                throw new Dropbox.Sign.Client.ApiException(400, "Missing required parameter 'faxLineCreateRequest' when calling FaxLineApi->FaxLineCreate");
            }

            Dropbox.Sign.Client.RequestOptions localVarRequestOptions = new Dropbox.Sign.Client.RequestOptions();

            var localVarContentType = "";
            var openApiTypes = faxLineCreateRequest.GetOpenApiTypes();
            if (ClientUtils.HasFileType(openApiTypes))
            {
                ClientUtils.SetFormData(localVarRequestOptions, openApiTypes);
                localVarContentType = "multipart/form-data";
            }
            else
            {
                localVarContentType = "application/json";
                localVarRequestOptions.Data = faxLineCreateRequest;
            }

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dropbox.Sign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "FaxLineApi.FaxLineCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Dropbox.Sign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<FaxLineResponse>("/fax_line/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FaxLineCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Purchase Fax Line Purchases a new Fax Line
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxLineCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FaxLineResponse</returns>
        public async System.Threading.Tasks.Task<FaxLineResponse> FaxLineCreateAsync(FaxLineCreateRequest faxLineCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Dropbox.Sign.Client.ApiResponse<FaxLineResponse> localVarResponse = await FaxLineCreateWithHttpInfoAsync(faxLineCreateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Purchase Fax Line Purchases a new Fax Line
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxLineCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FaxLineResponse)</returns>
        public async System.Threading.Tasks.Task<Dropbox.Sign.Client.ApiResponse<FaxLineResponse>> FaxLineCreateWithHttpInfoAsync(FaxLineCreateRequest faxLineCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'faxLineCreateRequest' is set
            if (faxLineCreateRequest == null)
            {
                throw new Dropbox.Sign.Client.ApiException(400, "Missing required parameter 'faxLineCreateRequest' when calling FaxLineApi->FaxLineCreate");
            }


            Dropbox.Sign.Client.RequestOptions localVarRequestOptions = new Dropbox.Sign.Client.RequestOptions();

            var localVarContentType = "";
            var openApiTypes = faxLineCreateRequest.GetOpenApiTypes();
            if (ClientUtils.HasFileType(openApiTypes))
            {
                ClientUtils.SetFormData(localVarRequestOptions, openApiTypes);
                localVarContentType = "multipart/form-data";
            }
            else
            {
                localVarContentType = "application/json";
                localVarRequestOptions.Data = faxLineCreateRequest;
            }

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dropbox.Sign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "FaxLineApi.FaxLineCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Dropbox.Sign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<FaxLineResponse>("/fax_line/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FaxLineCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Fax Line Deletes the specified Fax Line from the subscription.
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxLineDeleteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void FaxLineDelete(FaxLineDeleteRequest faxLineDeleteRequest, int operationIndex = 0)
        {
            FaxLineDeleteWithHttpInfo(faxLineDeleteRequest);
        }

        /// <summary>
        /// Delete Fax Line Deletes the specified Fax Line from the subscription.
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxLineDeleteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Dropbox.Sign.Client.ApiResponse<Object> FaxLineDeleteWithHttpInfo(FaxLineDeleteRequest faxLineDeleteRequest, int operationIndex = 0)
        {
            // verify the required parameter 'faxLineDeleteRequest' is set
            if (faxLineDeleteRequest == null)
            {
                throw new Dropbox.Sign.Client.ApiException(400, "Missing required parameter 'faxLineDeleteRequest' when calling FaxLineApi->FaxLineDelete");
            }

            Dropbox.Sign.Client.RequestOptions localVarRequestOptions = new Dropbox.Sign.Client.RequestOptions();

            var localVarContentType = "";
            var openApiTypes = faxLineDeleteRequest.GetOpenApiTypes();
            if (ClientUtils.HasFileType(openApiTypes))
            {
                ClientUtils.SetFormData(localVarRequestOptions, openApiTypes);
                localVarContentType = "multipart/form-data";
            }
            else
            {
                localVarContentType = "application/json";
                localVarRequestOptions.Data = faxLineDeleteRequest;
            }

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dropbox.Sign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "FaxLineApi.FaxLineDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Dropbox.Sign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/fax_line", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FaxLineDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Fax Line Deletes the specified Fax Line from the subscription.
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxLineDeleteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FaxLineDeleteAsync(FaxLineDeleteRequest faxLineDeleteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await FaxLineDeleteWithHttpInfoAsync(faxLineDeleteRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Fax Line Deletes the specified Fax Line from the subscription.
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxLineDeleteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Dropbox.Sign.Client.ApiResponse<Object>> FaxLineDeleteWithHttpInfoAsync(FaxLineDeleteRequest faxLineDeleteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'faxLineDeleteRequest' is set
            if (faxLineDeleteRequest == null)
            {
                throw new Dropbox.Sign.Client.ApiException(400, "Missing required parameter 'faxLineDeleteRequest' when calling FaxLineApi->FaxLineDelete");
            }


            Dropbox.Sign.Client.RequestOptions localVarRequestOptions = new Dropbox.Sign.Client.RequestOptions();

            var localVarContentType = "";
            var openApiTypes = faxLineDeleteRequest.GetOpenApiTypes();
            if (ClientUtils.HasFileType(openApiTypes))
            {
                ClientUtils.SetFormData(localVarRequestOptions, openApiTypes);
                localVarContentType = "multipart/form-data";
            }
            else
            {
                localVarContentType = "application/json";
                localVarRequestOptions.Data = faxLineDeleteRequest;
            }

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dropbox.Sign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "FaxLineApi.FaxLineDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Dropbox.Sign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/fax_line", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FaxLineDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Fax Line Returns the properties and settings of a Fax Line.
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The Fax Line number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FaxLineResponse</returns>
        public FaxLineResponse FaxLineGet(string number, int operationIndex = 0)
        {
            Dropbox.Sign.Client.ApiResponse<FaxLineResponse> localVarResponse = FaxLineGetWithHttpInfo(number);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Fax Line Returns the properties and settings of a Fax Line.
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The Fax Line number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FaxLineResponse</returns>
        public Dropbox.Sign.Client.ApiResponse<FaxLineResponse> FaxLineGetWithHttpInfo(string number, int operationIndex = 0)
        {
            // verify the required parameter 'number' is set
            if (number == null)
            {
                throw new Dropbox.Sign.Client.ApiException(400, "Missing required parameter 'number' when calling FaxLineApi->FaxLineGet");
            }

            Dropbox.Sign.Client.RequestOptions localVarRequestOptions = new Dropbox.Sign.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };
            var localVarContentType = Dropbox.Sign.Client.ClientUtils.SelectHeaderContentType(_contentTypes);

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dropbox.Sign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Dropbox.Sign.Client.ClientUtils.ParameterToMultiMap("", "number", number));

            localVarRequestOptions.Operation = "FaxLineApi.FaxLineGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Dropbox.Sign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FaxLineResponse>("/fax_line", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FaxLineGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Fax Line Returns the properties and settings of a Fax Line.
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The Fax Line number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FaxLineResponse</returns>
        public async System.Threading.Tasks.Task<FaxLineResponse> FaxLineGetAsync(string number, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Dropbox.Sign.Client.ApiResponse<FaxLineResponse> localVarResponse = await FaxLineGetWithHttpInfoAsync(number, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Fax Line Returns the properties and settings of a Fax Line.
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The Fax Line number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FaxLineResponse)</returns>
        public async System.Threading.Tasks.Task<Dropbox.Sign.Client.ApiResponse<FaxLineResponse>> FaxLineGetWithHttpInfoAsync(string number, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'number' is set
            if (number == null)
            {
                throw new Dropbox.Sign.Client.ApiException(400, "Missing required parameter 'number' when calling FaxLineApi->FaxLineGet");
            }


            Dropbox.Sign.Client.RequestOptions localVarRequestOptions = new Dropbox.Sign.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };
            var localVarContentType = Dropbox.Sign.Client.ClientUtils.SelectHeaderContentType(_contentTypes);

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dropbox.Sign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Dropbox.Sign.Client.ClientUtils.ParameterToMultiMap("", "number", number));

            localVarRequestOptions.Operation = "FaxLineApi.FaxLineGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Dropbox.Sign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FaxLineResponse>("/fax_line", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FaxLineGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Fax Lines Returns the properties and settings of multiple Fax Lines.
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID (optional)</param>
        /// <param name="page">Which page number of the Fax Line List to return. Defaults to &#x60;1&#x60;. (optional, default to 1)</param>
        /// <param name="pageSize">Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)</param>
        /// <param name="showTeamLines">Include Fax Lines belonging to team members in the list (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FaxLineListResponse</returns>
        public FaxLineListResponse FaxLineList(string? accountId = default(string?), int? page = default(int?), int? pageSize = default(int?), bool? showTeamLines = default(bool?), int operationIndex = 0)
        {
            Dropbox.Sign.Client.ApiResponse<FaxLineListResponse> localVarResponse = FaxLineListWithHttpInfo(accountId, page, pageSize, showTeamLines);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Fax Lines Returns the properties and settings of multiple Fax Lines.
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID (optional)</param>
        /// <param name="page">Which page number of the Fax Line List to return. Defaults to &#x60;1&#x60;. (optional, default to 1)</param>
        /// <param name="pageSize">Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)</param>
        /// <param name="showTeamLines">Include Fax Lines belonging to team members in the list (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FaxLineListResponse</returns>
        public Dropbox.Sign.Client.ApiResponse<FaxLineListResponse> FaxLineListWithHttpInfo(string? accountId = default(string?), int? page = default(int?), int? pageSize = default(int?), bool? showTeamLines = default(bool?), int operationIndex = 0)
        {
            Dropbox.Sign.Client.RequestOptions localVarRequestOptions = new Dropbox.Sign.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };
            var localVarContentType = Dropbox.Sign.Client.ClientUtils.SelectHeaderContentType(_contentTypes);

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dropbox.Sign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (accountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dropbox.Sign.Client.ClientUtils.ParameterToMultiMap("", "account_id", accountId));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dropbox.Sign.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dropbox.Sign.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (showTeamLines != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dropbox.Sign.Client.ClientUtils.ParameterToMultiMap("", "show_team_lines", showTeamLines));
            }

            localVarRequestOptions.Operation = "FaxLineApi.FaxLineList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Dropbox.Sign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FaxLineListResponse>("/fax_line/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FaxLineList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Fax Lines Returns the properties and settings of multiple Fax Lines.
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID (optional)</param>
        /// <param name="page">Which page number of the Fax Line List to return. Defaults to &#x60;1&#x60;. (optional, default to 1)</param>
        /// <param name="pageSize">Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)</param>
        /// <param name="showTeamLines">Include Fax Lines belonging to team members in the list (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FaxLineListResponse</returns>
        public async System.Threading.Tasks.Task<FaxLineListResponse> FaxLineListAsync(string? accountId = default(string?), int? page = default(int?), int? pageSize = default(int?), bool? showTeamLines = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Dropbox.Sign.Client.ApiResponse<FaxLineListResponse> localVarResponse = await FaxLineListWithHttpInfoAsync(accountId, page, pageSize, showTeamLines, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Fax Lines Returns the properties and settings of multiple Fax Lines.
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID (optional)</param>
        /// <param name="page">Which page number of the Fax Line List to return. Defaults to &#x60;1&#x60;. (optional, default to 1)</param>
        /// <param name="pageSize">Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)</param>
        /// <param name="showTeamLines">Include Fax Lines belonging to team members in the list (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FaxLineListResponse)</returns>
        public async System.Threading.Tasks.Task<Dropbox.Sign.Client.ApiResponse<FaxLineListResponse>> FaxLineListWithHttpInfoAsync(string? accountId = default(string?), int? page = default(int?), int? pageSize = default(int?), bool? showTeamLines = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Dropbox.Sign.Client.RequestOptions localVarRequestOptions = new Dropbox.Sign.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };
            var localVarContentType = Dropbox.Sign.Client.ClientUtils.SelectHeaderContentType(_contentTypes);

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dropbox.Sign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (accountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dropbox.Sign.Client.ClientUtils.ParameterToMultiMap("", "account_id", accountId));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dropbox.Sign.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dropbox.Sign.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (showTeamLines != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dropbox.Sign.Client.ClientUtils.ParameterToMultiMap("", "show_team_lines", showTeamLines));
            }

            localVarRequestOptions.Operation = "FaxLineApi.FaxLineList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Dropbox.Sign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FaxLineListResponse>("/fax_line/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FaxLineList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Fax Line Access Removes a user&#39;s access to the specified Fax Line
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxLineRemoveUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FaxLineResponse</returns>
        public FaxLineResponse FaxLineRemoveUser(FaxLineRemoveUserRequest faxLineRemoveUserRequest, int operationIndex = 0)
        {
            Dropbox.Sign.Client.ApiResponse<FaxLineResponse> localVarResponse = FaxLineRemoveUserWithHttpInfo(faxLineRemoveUserRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Fax Line Access Removes a user&#39;s access to the specified Fax Line
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxLineRemoveUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FaxLineResponse</returns>
        public Dropbox.Sign.Client.ApiResponse<FaxLineResponse> FaxLineRemoveUserWithHttpInfo(FaxLineRemoveUserRequest faxLineRemoveUserRequest, int operationIndex = 0)
        {
            // verify the required parameter 'faxLineRemoveUserRequest' is set
            if (faxLineRemoveUserRequest == null)
            {
                throw new Dropbox.Sign.Client.ApiException(400, "Missing required parameter 'faxLineRemoveUserRequest' when calling FaxLineApi->FaxLineRemoveUser");
            }

            Dropbox.Sign.Client.RequestOptions localVarRequestOptions = new Dropbox.Sign.Client.RequestOptions();

            var localVarContentType = "";
            var openApiTypes = faxLineRemoveUserRequest.GetOpenApiTypes();
            if (ClientUtils.HasFileType(openApiTypes))
            {
                ClientUtils.SetFormData(localVarRequestOptions, openApiTypes);
                localVarContentType = "multipart/form-data";
            }
            else
            {
                localVarContentType = "application/json";
                localVarRequestOptions.Data = faxLineRemoveUserRequest;
            }

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dropbox.Sign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "FaxLineApi.FaxLineRemoveUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Dropbox.Sign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<FaxLineResponse>("/fax_line/remove_user", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FaxLineRemoveUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Fax Line Access Removes a user&#39;s access to the specified Fax Line
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxLineRemoveUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FaxLineResponse</returns>
        public async System.Threading.Tasks.Task<FaxLineResponse> FaxLineRemoveUserAsync(FaxLineRemoveUserRequest faxLineRemoveUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Dropbox.Sign.Client.ApiResponse<FaxLineResponse> localVarResponse = await FaxLineRemoveUserWithHttpInfoAsync(faxLineRemoveUserRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Fax Line Access Removes a user&#39;s access to the specified Fax Line
        /// </summary>
        /// <exception cref="Dropbox.Sign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxLineRemoveUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FaxLineResponse)</returns>
        public async System.Threading.Tasks.Task<Dropbox.Sign.Client.ApiResponse<FaxLineResponse>> FaxLineRemoveUserWithHttpInfoAsync(FaxLineRemoveUserRequest faxLineRemoveUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'faxLineRemoveUserRequest' is set
            if (faxLineRemoveUserRequest == null)
            {
                throw new Dropbox.Sign.Client.ApiException(400, "Missing required parameter 'faxLineRemoveUserRequest' when calling FaxLineApi->FaxLineRemoveUser");
            }


            Dropbox.Sign.Client.RequestOptions localVarRequestOptions = new Dropbox.Sign.Client.RequestOptions();

            var localVarContentType = "";
            var openApiTypes = faxLineRemoveUserRequest.GetOpenApiTypes();
            if (ClientUtils.HasFileType(openApiTypes))
            {
                ClientUtils.SetFormData(localVarRequestOptions, openApiTypes);
                localVarContentType = "multipart/form-data";
            }
            else
            {
                localVarContentType = "application/json";
                localVarRequestOptions.Data = faxLineRemoveUserRequest;
            }

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dropbox.Sign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "FaxLineApi.FaxLineRemoveUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Dropbox.Sign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<FaxLineResponse>("/fax_line/remove_user", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FaxLineRemoveUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
