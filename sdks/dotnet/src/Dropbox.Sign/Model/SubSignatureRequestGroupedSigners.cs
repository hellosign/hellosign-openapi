/*
 * Dropbox Sign API
 *
 * Dropbox Sign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Dropbox.Sign.Client.OpenAPIDateConverter;

namespace Dropbox.Sign.Model
{
    /// <summary>
    /// SubSignatureRequestGroupedSigners
    /// </summary>
    [DataContract(Name = "SubSignatureRequestGroupedSigners")]
    [JsonObject(ItemNullValueHandling = NullValueHandling.Ignore)]
    public partial class SubSignatureRequestGroupedSigners : IOpenApiTyped, IEquatable<SubSignatureRequestGroupedSigners>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubSignatureRequestGroupedSigners" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubSignatureRequestGroupedSigners() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubSignatureRequestGroupedSigners" /> class.
        /// </summary>
        /// <param name="group">The name of the group. (required).</param>
        /// <param name="order">The order the group is required to sign in. Use this instead of Signer-level &#x60;order&#x60;..</param>
        /// <param name="signers">Signers belonging to this Group.  **NOTE**: Only &#x60;name&#x60;, &#x60;email_address&#x60;, and &#x60;pin&#x60; are available to Grouped Signers. We will ignore all other properties, even though they are listed below. (required).</param>
        public SubSignatureRequestGroupedSigners(string group = default(string), int? order = default(int?), List<SubSignatureRequestSigner> signers = default(List<SubSignatureRequestSigner>))
        {
            
            // to ensure "group" is required (not null)
            if (group == null)
            {
                throw new ArgumentNullException("group is a required property for SubSignatureRequestGroupedSigners and cannot be null");
            }
            this.Group = group;
            // to ensure "signers" is required (not null)
            if (signers == null)
            {
                throw new ArgumentNullException("signers is a required property for SubSignatureRequestGroupedSigners and cannot be null");
            }
            this.Signers = signers;
            this.Order = order;
        }

        /// <summary>
        /// Attempt to instantiate and hydrate a new instance of this class
        /// </summary>
        /// <param name="jsonData">String of JSON data representing target object</param>
        public static SubSignatureRequestGroupedSigners Init(string jsonData)
        {
            var obj = JsonConvert.DeserializeObject<SubSignatureRequestGroupedSigners>(jsonData);

            if (obj == null)
            {
                throw new Exception("Unable to deserialize JSON to instance of SubSignatureRequestGroupedSigners");
            }

            return obj;
        }

        /// <summary>
        /// The name of the group.
        /// </summary>
        /// <value>The name of the group.</value>
        [DataMember(Name = "group", IsRequired = true, EmitDefaultValue = true)]
        public string Group { get; set; }

        /// <summary>
        /// Signers belonging to this Group.  **NOTE**: Only &#x60;name&#x60;, &#x60;email_address&#x60;, and &#x60;pin&#x60; are available to Grouped Signers. We will ignore all other properties, even though they are listed below.
        /// </summary>
        /// <value>Signers belonging to this Group.  **NOTE**: Only &#x60;name&#x60;, &#x60;email_address&#x60;, and &#x60;pin&#x60; are available to Grouped Signers. We will ignore all other properties, even though they are listed below.</value>
        [DataMember(Name = "signers", IsRequired = true, EmitDefaultValue = true)]
        public List<SubSignatureRequestSigner> Signers { get; set; }

        /// <summary>
        /// The order the group is required to sign in. Use this instead of Signer-level &#x60;order&#x60;.
        /// </summary>
        /// <value>The order the group is required to sign in. Use this instead of Signer-level &#x60;order&#x60;.</value>
        [DataMember(Name = "order", EmitDefaultValue = true)]
        public int? Order { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubSignatureRequestGroupedSigners {\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Signers: ").Append(Signers).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubSignatureRequestGroupedSigners);
        }

        /// <summary>
        /// Returns true if SubSignatureRequestGroupedSigners instances are equal
        /// </summary>
        /// <param name="input">Instance of SubSignatureRequestGroupedSigners to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubSignatureRequestGroupedSigners input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && 
                (
                    this.Signers == input.Signers ||
                    this.Signers != null &&
                    input.Signers != null &&
                    this.Signers.SequenceEqual(input.Signers)
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Group != null)
                {
                    hashCode = (hashCode * 59) + this.Group.GetHashCode();
                }
                if (this.Signers != null)
                {
                    hashCode = (hashCode * 59) + this.Signers.GetHashCode();
                }
                if (this.Order != null)
                {
                    hashCode = (hashCode * 59) + this.Order.GetHashCode();
                }
                return hashCode;
            }
        }

        public List<OpenApiType> GetOpenApiTypes()
        {
            var types = new List<OpenApiType>();
            types.Add(new OpenApiType(){
                Name = "group",
                Property = "Group",
                Type = "string",
                Value = Group,
            });
            types.Add(new OpenApiType(){
                Name = "signers",
                Property = "Signers",
                Type = "List<SubSignatureRequestSigner>",
                Value = Signers,
            });
            types.Add(new OpenApiType(){
                Name = "order",
                Property = "Order",
                Type = "int?",
                Value = Order,
            });

            return types;
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
