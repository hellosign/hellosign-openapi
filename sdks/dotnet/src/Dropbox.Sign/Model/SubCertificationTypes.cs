/*
 * Dropbox Sign API
 *
 * Dropbox Sign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Dropbox.Sign.Client.OpenAPIDateConverter;

namespace Dropbox.Sign.Model
{
    /// <summary>
    /// Optional certification types to be applied to your Signature Request after completion.  After all parties have signed and completed identity verification (if &#x60;is_eid&#x60; is &#x60;true&#x60;), your document&#39;s hash will be sent to the specified certificate authority for archiving and integrity verification.  At this time only a single certification type can be selected per Signature Request.
    /// </summary>
    [DataContract(Name = "SubCertificationTypes")]
    [JsonObject(ItemNullValueHandling = NullValueHandling.Ignore)]
    public partial class SubCertificationTypes : IOpenApiTyped, IEquatable<SubCertificationTypes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubCertificationTypes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubCertificationTypes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubCertificationTypes" /> class.
        /// </summary>
        /// <param name="nom151">NOM 151, or Normativa 151, is a certificate which verifies the integrity of an electronically signed document in compliance with Mexican regulations. (default to false).</param>
        public SubCertificationTypes(bool nom151 = false)
        {
            
            this.Nom151 = nom151;
        }

        /// <summary>
        /// Attempt to instantiate and hydrate a new instance of this class
        /// </summary>
        /// <param name="jsonData">String of JSON data representing target object</param>
        public static SubCertificationTypes Init(string jsonData)
        {
            var obj = JsonConvert.DeserializeObject<SubCertificationTypes>(jsonData);

            if (obj == null)
            {
                throw new Exception("Unable to deserialize JSON to instance of SubCertificationTypes");
            }

            return obj;
        }

        /// <summary>
        /// NOM 151, or Normativa 151, is a certificate which verifies the integrity of an electronically signed document in compliance with Mexican regulations.
        /// </summary>
        /// <value>NOM 151, or Normativa 151, is a certificate which verifies the integrity of an electronically signed document in compliance with Mexican regulations.</value>
        [DataMember(Name = "nom_151", EmitDefaultValue = true)]
        public bool Nom151 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubCertificationTypes {\n");
            sb.Append("  Nom151: ").Append(Nom151).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubCertificationTypes);
        }

        /// <summary>
        /// Returns true if SubCertificationTypes instances are equal
        /// </summary>
        /// <param name="input">Instance of SubCertificationTypes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubCertificationTypes input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Nom151 == input.Nom151 ||
                    this.Nom151.Equals(input.Nom151)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Nom151.GetHashCode();
                return hashCode;
            }
        }

        public List<OpenApiType> GetOpenApiTypes()
        {
            var types = new List<OpenApiType>();
            types.Add(new OpenApiType(){
                Name = "nom_151",
                Property = "Nom151",
                Type = "bool",
                Value = Nom151,
            });

            return types;
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
