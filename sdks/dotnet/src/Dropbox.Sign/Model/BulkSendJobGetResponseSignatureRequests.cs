/*
 * Dropbox Sign API
 *
 * Dropbox Sign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Dropbox.Sign.Client.OpenAPIDateConverter;

namespace Dropbox.Sign.Model
{
    /// <summary>
    /// BulkSendJobGetResponseSignatureRequests
    /// </summary>
    [DataContract(Name = "BulkSendJobGetResponseSignatureRequests")]
    [JsonObject(ItemNullValueHandling = NullValueHandling.Ignore)]
    public partial class BulkSendJobGetResponseSignatureRequests : IEquatable<BulkSendJobGetResponseSignatureRequests>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BulkSendJobGetResponseSignatureRequests" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BulkSendJobGetResponseSignatureRequests() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BulkSendJobGetResponseSignatureRequests" /> class.
        /// </summary>
        /// <param name="testMode">_t__SignatureRequestResponse::TEST_MODE (default to false).</param>
        /// <param name="signatureRequestId">_t__SignatureRequestResponse::SIGNATURE_REQUEST_ID.</param>
        /// <param name="requesterEmailAddress">_t__SignatureRequestResponse::REQUESTER_EMAIL_ADDRESS.</param>
        /// <param name="title">_t__SignatureRequestResponse::TITLE.</param>
        /// <param name="originalTitle">_t__SignatureRequestResponse::ORIGINAL_TITLE.</param>
        /// <param name="subject">_t__SignatureRequestResponse::SUBJECT.</param>
        /// <param name="message">_t__SignatureRequestResponse::MESSAGE.</param>
        /// <param name="metadata">_t__SignatureRequestResponse::METADATA.</param>
        /// <param name="createdAt">_t__SignatureRequestResponse::CREATED_AT.</param>
        /// <param name="expiresAt">_t__SignatureRequestResponse::EXPIRES_AT.</param>
        /// <param name="isComplete">_t__SignatureRequestResponse::IS_COMPLETE.</param>
        /// <param name="isDeclined">_t__SignatureRequestResponse::IS_DECLINED.</param>
        /// <param name="hasError">_t__SignatureRequestResponse::HAS_ERROR.</param>
        /// <param name="filesUrl">_t__SignatureRequestResponse::FILES_URL.</param>
        /// <param name="signingUrl">_t__SignatureRequestResponse::SIGNING_URL.</param>
        /// <param name="detailsUrl">_t__SignatureRequestResponse::DETAILS_URL.</param>
        /// <param name="ccEmailAddresses">_t__SignatureRequestResponse::CC_EMAIL_ADDRESSES.</param>
        /// <param name="signingRedirectUrl">_t__SignatureRequestResponse::SIGNING_REDIRECT_URL.</param>
        /// <param name="finalCopyUri">_t__SignatureRequestResponse::FINAL_COPY_URI.</param>
        /// <param name="templateIds">_t__SignatureRequestResponse::TEMPLATE_IDS.</param>
        /// <param name="customFields">_t__SignatureRequestResponseCustomField::DESCRIPTION.</param>
        /// <param name="attachments">_t__SignatureRequestResponseAttachment::DESCRIPTION.</param>
        /// <param name="responseData">_t__SignatureRequestResponseData::DESCRIPTION.</param>
        /// <param name="signatures">_t__SignatureRequestResponseSignatures::DESCRIPTION.</param>
        /// <param name="bulkSendJobId">_t__BulkSendJobGetResponseSignatureRequests::BULK_SEND_JOB_ID.</param>
        public BulkSendJobGetResponseSignatureRequests(bool testMode = false, string signatureRequestId = default(string), string requesterEmailAddress = default(string), string title = default(string), string originalTitle = default(string), string subject = default(string), string message = default(string), Dictionary<string, Object> metadata = default(Dictionary<string, Object>), int createdAt = default(int), int? expiresAt = default(int?), bool isComplete = default(bool), bool isDeclined = default(bool), bool hasError = default(bool), string filesUrl = default(string), string signingUrl = default(string), string detailsUrl = default(string), List<string> ccEmailAddresses = default(List<string>), string signingRedirectUrl = default(string), string finalCopyUri = default(string), List<string> templateIds = default(List<string>), List<SignatureRequestResponseCustomFieldBase> customFields = default(List<SignatureRequestResponseCustomFieldBase>), List<SignatureRequestResponseAttachment> attachments = default(List<SignatureRequestResponseAttachment>), List<SignatureRequestResponseDataBase> responseData = default(List<SignatureRequestResponseDataBase>), List<SignatureRequestResponseSignatures> signatures = default(List<SignatureRequestResponseSignatures>), string bulkSendJobId = default(string))
        {

            this.TestMode = testMode;
            this.SignatureRequestId = signatureRequestId;
            this.RequesterEmailAddress = requesterEmailAddress;
            this.Title = title;
            this.OriginalTitle = originalTitle;
            this.Subject = subject;
            this.Message = message;
            this.Metadata = metadata;
            this.CreatedAt = createdAt;
            this.ExpiresAt = expiresAt;
            this.IsComplete = isComplete;
            this.IsDeclined = isDeclined;
            this.HasError = hasError;
            this.FilesUrl = filesUrl;
            this.SigningUrl = signingUrl;
            this.DetailsUrl = detailsUrl;
            this.CcEmailAddresses = ccEmailAddresses;
            this.SigningRedirectUrl = signingRedirectUrl;
            this.FinalCopyUri = finalCopyUri;
            this.TemplateIds = templateIds;
            this.CustomFields = customFields;
            this.Attachments = attachments;
            this.ResponseData = responseData;
            this.Signatures = signatures;
            this.BulkSendJobId = bulkSendJobId;
        }

        /// <summary>
        /// Attempt to instantiate and hydrate a new instance of this class
        /// </summary>
        /// <param name="jsonData">String of JSON data representing target object</param>
        public static BulkSendJobGetResponseSignatureRequests Init(string jsonData)
        {
            var obj = JsonConvert.DeserializeObject<BulkSendJobGetResponseSignatureRequests>(jsonData);

            if (obj == null)
            {
                throw new Exception("Unable to deserialize JSON to instance of BulkSendJobGetResponseSignatureRequests");
            }

            return obj;
        }

        /// <summary>
        /// _t__SignatureRequestResponse::TEST_MODE
        /// </summary>
        /// <value>_t__SignatureRequestResponse::TEST_MODE</value>
        [DataMember(Name = "test_mode", EmitDefaultValue = true)]
        public bool TestMode { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponse::SIGNATURE_REQUEST_ID
        /// </summary>
        /// <value>_t__SignatureRequestResponse::SIGNATURE_REQUEST_ID</value>
        [DataMember(Name = "signature_request_id", EmitDefaultValue = true)]
        public string SignatureRequestId { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponse::REQUESTER_EMAIL_ADDRESS
        /// </summary>
        /// <value>_t__SignatureRequestResponse::REQUESTER_EMAIL_ADDRESS</value>
        [DataMember(Name = "requester_email_address", EmitDefaultValue = true)]
        public string RequesterEmailAddress { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponse::TITLE
        /// </summary>
        /// <value>_t__SignatureRequestResponse::TITLE</value>
        [DataMember(Name = "title", EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponse::ORIGINAL_TITLE
        /// </summary>
        /// <value>_t__SignatureRequestResponse::ORIGINAL_TITLE</value>
        [DataMember(Name = "original_title", EmitDefaultValue = true)]
        public string OriginalTitle { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponse::SUBJECT
        /// </summary>
        /// <value>_t__SignatureRequestResponse::SUBJECT</value>
        [DataMember(Name = "subject", EmitDefaultValue = true)]
        public string Subject { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponse::MESSAGE
        /// </summary>
        /// <value>_t__SignatureRequestResponse::MESSAGE</value>
        [DataMember(Name = "message", EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponse::METADATA
        /// </summary>
        /// <value>_t__SignatureRequestResponse::METADATA</value>
        [DataMember(Name = "metadata", EmitDefaultValue = true)]
        public Dictionary<string, Object> Metadata { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponse::CREATED_AT
        /// </summary>
        /// <value>_t__SignatureRequestResponse::CREATED_AT</value>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public int CreatedAt { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponse::EXPIRES_AT
        /// </summary>
        /// <value>_t__SignatureRequestResponse::EXPIRES_AT</value>
        [DataMember(Name = "expires_at", EmitDefaultValue = true)]
        public int? ExpiresAt { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponse::IS_COMPLETE
        /// </summary>
        /// <value>_t__SignatureRequestResponse::IS_COMPLETE</value>
        [DataMember(Name = "is_complete", EmitDefaultValue = true)]
        public bool IsComplete { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponse::IS_DECLINED
        /// </summary>
        /// <value>_t__SignatureRequestResponse::IS_DECLINED</value>
        [DataMember(Name = "is_declined", EmitDefaultValue = true)]
        public bool IsDeclined { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponse::HAS_ERROR
        /// </summary>
        /// <value>_t__SignatureRequestResponse::HAS_ERROR</value>
        [DataMember(Name = "has_error", EmitDefaultValue = true)]
        public bool HasError { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponse::FILES_URL
        /// </summary>
        /// <value>_t__SignatureRequestResponse::FILES_URL</value>
        [DataMember(Name = "files_url", EmitDefaultValue = true)]
        public string FilesUrl { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponse::SIGNING_URL
        /// </summary>
        /// <value>_t__SignatureRequestResponse::SIGNING_URL</value>
        [DataMember(Name = "signing_url", EmitDefaultValue = true)]
        public string SigningUrl { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponse::DETAILS_URL
        /// </summary>
        /// <value>_t__SignatureRequestResponse::DETAILS_URL</value>
        [DataMember(Name = "details_url", EmitDefaultValue = true)]
        public string DetailsUrl { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponse::CC_EMAIL_ADDRESSES
        /// </summary>
        /// <value>_t__SignatureRequestResponse::CC_EMAIL_ADDRESSES</value>
        [DataMember(Name = "cc_email_addresses", EmitDefaultValue = true)]
        public List<string> CcEmailAddresses { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponse::SIGNING_REDIRECT_URL
        /// </summary>
        /// <value>_t__SignatureRequestResponse::SIGNING_REDIRECT_URL</value>
        [DataMember(Name = "signing_redirect_url", EmitDefaultValue = true)]
        public string SigningRedirectUrl { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponse::FINAL_COPY_URI
        /// </summary>
        /// <value>_t__SignatureRequestResponse::FINAL_COPY_URI</value>
        [DataMember(Name = "final_copy_uri", EmitDefaultValue = true)]
        public string FinalCopyUri { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponse::TEMPLATE_IDS
        /// </summary>
        /// <value>_t__SignatureRequestResponse::TEMPLATE_IDS</value>
        [DataMember(Name = "template_ids", EmitDefaultValue = true)]
        public List<string> TemplateIds { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponseCustomField::DESCRIPTION
        /// </summary>
        /// <value>_t__SignatureRequestResponseCustomField::DESCRIPTION</value>
        [DataMember(Name = "custom_fields", EmitDefaultValue = true)]
        public List<SignatureRequestResponseCustomFieldBase> CustomFields { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponseAttachment::DESCRIPTION
        /// </summary>
        /// <value>_t__SignatureRequestResponseAttachment::DESCRIPTION</value>
        [DataMember(Name = "attachments", EmitDefaultValue = true)]
        public List<SignatureRequestResponseAttachment> Attachments { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponseData::DESCRIPTION
        /// </summary>
        /// <value>_t__SignatureRequestResponseData::DESCRIPTION</value>
        [DataMember(Name = "response_data", EmitDefaultValue = true)]
        public List<SignatureRequestResponseDataBase> ResponseData { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponseSignatures::DESCRIPTION
        /// </summary>
        /// <value>_t__SignatureRequestResponseSignatures::DESCRIPTION</value>
        [DataMember(Name = "signatures", EmitDefaultValue = true)]
        public List<SignatureRequestResponseSignatures> Signatures { get; set; }

        /// <summary>
        /// _t__BulkSendJobGetResponseSignatureRequests::BULK_SEND_JOB_ID
        /// </summary>
        /// <value>_t__BulkSendJobGetResponseSignatureRequests::BULK_SEND_JOB_ID</value>
        [DataMember(Name = "bulk_send_job_id", EmitDefaultValue = true)]
        public string BulkSendJobId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BulkSendJobGetResponseSignatureRequests {\n");
            sb.Append("  TestMode: ").Append(TestMode).Append("\n");
            sb.Append("  SignatureRequestId: ").Append(SignatureRequestId).Append("\n");
            sb.Append("  RequesterEmailAddress: ").Append(RequesterEmailAddress).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  OriginalTitle: ").Append(OriginalTitle).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  IsComplete: ").Append(IsComplete).Append("\n");
            sb.Append("  IsDeclined: ").Append(IsDeclined).Append("\n");
            sb.Append("  HasError: ").Append(HasError).Append("\n");
            sb.Append("  FilesUrl: ").Append(FilesUrl).Append("\n");
            sb.Append("  SigningUrl: ").Append(SigningUrl).Append("\n");
            sb.Append("  DetailsUrl: ").Append(DetailsUrl).Append("\n");
            sb.Append("  CcEmailAddresses: ").Append(CcEmailAddresses).Append("\n");
            sb.Append("  SigningRedirectUrl: ").Append(SigningRedirectUrl).Append("\n");
            sb.Append("  FinalCopyUri: ").Append(FinalCopyUri).Append("\n");
            sb.Append("  TemplateIds: ").Append(TemplateIds).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  ResponseData: ").Append(ResponseData).Append("\n");
            sb.Append("  Signatures: ").Append(Signatures).Append("\n");
            sb.Append("  BulkSendJobId: ").Append(BulkSendJobId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BulkSendJobGetResponseSignatureRequests);
        }

        /// <summary>
        /// Returns true if BulkSendJobGetResponseSignatureRequests instances are equal
        /// </summary>
        /// <param name="input">Instance of BulkSendJobGetResponseSignatureRequests to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BulkSendJobGetResponseSignatureRequests input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.TestMode == input.TestMode ||
                    this.TestMode.Equals(input.TestMode)
                ) &&
                (
                    this.SignatureRequestId == input.SignatureRequestId ||
                    (this.SignatureRequestId != null &&
                    this.SignatureRequestId.Equals(input.SignatureRequestId))
                ) &&
                (
                    this.RequesterEmailAddress == input.RequesterEmailAddress ||
                    (this.RequesterEmailAddress != null &&
                    this.RequesterEmailAddress.Equals(input.RequesterEmailAddress))
                ) &&
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) &&
                (
                    this.OriginalTitle == input.OriginalTitle ||
                    (this.OriginalTitle != null &&
                    this.OriginalTitle.Equals(input.OriginalTitle))
                ) &&
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) &&
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) &&
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) &&
                (
                    this.CreatedAt == input.CreatedAt ||
                    this.CreatedAt.Equals(input.CreatedAt)
                ) &&
                (
                    this.ExpiresAt == input.ExpiresAt ||
                    (this.ExpiresAt != null &&
                    this.ExpiresAt.Equals(input.ExpiresAt))
                ) &&
                (
                    this.IsComplete == input.IsComplete ||
                    this.IsComplete.Equals(input.IsComplete)
                ) &&
                (
                    this.IsDeclined == input.IsDeclined ||
                    this.IsDeclined.Equals(input.IsDeclined)
                ) &&
                (
                    this.HasError == input.HasError ||
                    this.HasError.Equals(input.HasError)
                ) &&
                (
                    this.FilesUrl == input.FilesUrl ||
                    (this.FilesUrl != null &&
                    this.FilesUrl.Equals(input.FilesUrl))
                ) &&
                (
                    this.SigningUrl == input.SigningUrl ||
                    (this.SigningUrl != null &&
                    this.SigningUrl.Equals(input.SigningUrl))
                ) &&
                (
                    this.DetailsUrl == input.DetailsUrl ||
                    (this.DetailsUrl != null &&
                    this.DetailsUrl.Equals(input.DetailsUrl))
                ) &&
                (
                    this.CcEmailAddresses == input.CcEmailAddresses ||
                    this.CcEmailAddresses != null &&
                    input.CcEmailAddresses != null &&
                    this.CcEmailAddresses.SequenceEqual(input.CcEmailAddresses)
                ) &&
                (
                    this.SigningRedirectUrl == input.SigningRedirectUrl ||
                    (this.SigningRedirectUrl != null &&
                    this.SigningRedirectUrl.Equals(input.SigningRedirectUrl))
                ) &&
                (
                    this.FinalCopyUri == input.FinalCopyUri ||
                    (this.FinalCopyUri != null &&
                    this.FinalCopyUri.Equals(input.FinalCopyUri))
                ) &&
                (
                    this.TemplateIds == input.TemplateIds ||
                    this.TemplateIds != null &&
                    input.TemplateIds != null &&
                    this.TemplateIds.SequenceEqual(input.TemplateIds)
                ) &&
                (
                    this.CustomFields == input.CustomFields ||
                    this.CustomFields != null &&
                    input.CustomFields != null &&
                    this.CustomFields.SequenceEqual(input.CustomFields)
                ) &&
                (
                    this.Attachments == input.Attachments ||
                    this.Attachments != null &&
                    input.Attachments != null &&
                    this.Attachments.SequenceEqual(input.Attachments)
                ) &&
                (
                    this.ResponseData == input.ResponseData ||
                    this.ResponseData != null &&
                    input.ResponseData != null &&
                    this.ResponseData.SequenceEqual(input.ResponseData)
                ) &&
                (
                    this.Signatures == input.Signatures ||
                    this.Signatures != null &&
                    input.Signatures != null &&
                    this.Signatures.SequenceEqual(input.Signatures)
                ) &&
                (
                    this.BulkSendJobId == input.BulkSendJobId ||
                    (this.BulkSendJobId != null &&
                    this.BulkSendJobId.Equals(input.BulkSendJobId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.TestMode.GetHashCode();
                if (this.SignatureRequestId != null)
                {
                    hashCode = (hashCode * 59) + this.SignatureRequestId.GetHashCode();
                }
                if (this.RequesterEmailAddress != null)
                {
                    hashCode = (hashCode * 59) + this.RequesterEmailAddress.GetHashCode();
                }
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.OriginalTitle != null)
                {
                    hashCode = (hashCode * 59) + this.OriginalTitle.GetHashCode();
                }
                if (this.Subject != null)
                {
                    hashCode = (hashCode * 59) + this.Subject.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                if (this.ExpiresAt != null)
                {
                    hashCode = (hashCode * 59) + this.ExpiresAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsComplete.GetHashCode();
                hashCode = (hashCode * 59) + this.IsDeclined.GetHashCode();
                hashCode = (hashCode * 59) + this.HasError.GetHashCode();
                if (this.FilesUrl != null)
                {
                    hashCode = (hashCode * 59) + this.FilesUrl.GetHashCode();
                }
                if (this.SigningUrl != null)
                {
                    hashCode = (hashCode * 59) + this.SigningUrl.GetHashCode();
                }
                if (this.DetailsUrl != null)
                {
                    hashCode = (hashCode * 59) + this.DetailsUrl.GetHashCode();
                }
                if (this.CcEmailAddresses != null)
                {
                    hashCode = (hashCode * 59) + this.CcEmailAddresses.GetHashCode();
                }
                if (this.SigningRedirectUrl != null)
                {
                    hashCode = (hashCode * 59) + this.SigningRedirectUrl.GetHashCode();
                }
                if (this.FinalCopyUri != null)
                {
                    hashCode = (hashCode * 59) + this.FinalCopyUri.GetHashCode();
                }
                if (this.TemplateIds != null)
                {
                    hashCode = (hashCode * 59) + this.TemplateIds.GetHashCode();
                }
                if (this.CustomFields != null)
                {
                    hashCode = (hashCode * 59) + this.CustomFields.GetHashCode();
                }
                if (this.Attachments != null)
                {
                    hashCode = (hashCode * 59) + this.Attachments.GetHashCode();
                }
                if (this.ResponseData != null)
                {
                    hashCode = (hashCode * 59) + this.ResponseData.GetHashCode();
                }
                if (this.Signatures != null)
                {
                    hashCode = (hashCode * 59) + this.Signatures.GetHashCode();
                }
                if (this.BulkSendJobId != null)
                {
                    hashCode = (hashCode * 59) + this.BulkSendJobId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
        public List<OpenApiType> GetOpenApiTypes()
        {
            var types = new List<OpenApiType>();
            types.Add(new OpenApiType()
            {
                Name = "test_mode",
                Property = "TestMode",
                Type = "bool",
                Value = TestMode,
            });
            types.Add(new OpenApiType()
            {
                Name = "signature_request_id",
                Property = "SignatureRequestId",
                Type = "string",
                Value = SignatureRequestId,
            });
            types.Add(new OpenApiType()
            {
                Name = "requester_email_address",
                Property = "RequesterEmailAddress",
                Type = "string",
                Value = RequesterEmailAddress,
            });
            types.Add(new OpenApiType()
            {
                Name = "title",
                Property = "Title",
                Type = "string",
                Value = Title,
            });
            types.Add(new OpenApiType()
            {
                Name = "original_title",
                Property = "OriginalTitle",
                Type = "string",
                Value = OriginalTitle,
            });
            types.Add(new OpenApiType()
            {
                Name = "subject",
                Property = "Subject",
                Type = "string",
                Value = Subject,
            });
            types.Add(new OpenApiType()
            {
                Name = "message",
                Property = "Message",
                Type = "string",
                Value = Message,
            });
            types.Add(new OpenApiType()
            {
                Name = "metadata",
                Property = "Metadata",
                Type = "Dictionary<string, Object>",
                Value = Metadata,
            });
            types.Add(new OpenApiType()
            {
                Name = "created_at",
                Property = "CreatedAt",
                Type = "int",
                Value = CreatedAt,
            });
            types.Add(new OpenApiType()
            {
                Name = "expires_at",
                Property = "ExpiresAt",
                Type = "int?",
                Value = ExpiresAt,
            });
            types.Add(new OpenApiType()
            {
                Name = "is_complete",
                Property = "IsComplete",
                Type = "bool",
                Value = IsComplete,
            });
            types.Add(new OpenApiType()
            {
                Name = "is_declined",
                Property = "IsDeclined",
                Type = "bool",
                Value = IsDeclined,
            });
            types.Add(new OpenApiType()
            {
                Name = "has_error",
                Property = "HasError",
                Type = "bool",
                Value = HasError,
            });
            types.Add(new OpenApiType()
            {
                Name = "files_url",
                Property = "FilesUrl",
                Type = "string",
                Value = FilesUrl,
            });
            types.Add(new OpenApiType()
            {
                Name = "signing_url",
                Property = "SigningUrl",
                Type = "string",
                Value = SigningUrl,
            });
            types.Add(new OpenApiType()
            {
                Name = "details_url",
                Property = "DetailsUrl",
                Type = "string",
                Value = DetailsUrl,
            });
            types.Add(new OpenApiType()
            {
                Name = "cc_email_addresses",
                Property = "CcEmailAddresses",
                Type = "List<string>",
                Value = CcEmailAddresses,
            });
            types.Add(new OpenApiType()
            {
                Name = "signing_redirect_url",
                Property = "SigningRedirectUrl",
                Type = "string",
                Value = SigningRedirectUrl,
            });
            types.Add(new OpenApiType()
            {
                Name = "final_copy_uri",
                Property = "FinalCopyUri",
                Type = "string",
                Value = FinalCopyUri,
            });
            types.Add(new OpenApiType()
            {
                Name = "template_ids",
                Property = "TemplateIds",
                Type = "List<string>",
                Value = TemplateIds,
            });
            types.Add(new OpenApiType()
            {
                Name = "custom_fields",
                Property = "CustomFields",
                Type = "List<SignatureRequestResponseCustomFieldBase>",
                Value = CustomFields,
            });
            types.Add(new OpenApiType()
            {
                Name = "attachments",
                Property = "Attachments",
                Type = "List<SignatureRequestResponseAttachment>",
                Value = Attachments,
            });
            types.Add(new OpenApiType()
            {
                Name = "response_data",
                Property = "ResponseData",
                Type = "List<SignatureRequestResponseDataBase>",
                Value = ResponseData,
            });
            types.Add(new OpenApiType()
            {
                Name = "signatures",
                Property = "Signatures",
                Type = "List<SignatureRequestResponseSignatures>",
                Value = Signatures,
            });
            types.Add(new OpenApiType()
            {
                Name = "bulk_send_job_id",
                Property = "BulkSendJobId",
                Type = "string",
                Value = BulkSendJobId,
            });

            return types;
        }
    }

}
