/*
 * Dropbox Sign API
 *
 * Dropbox Sign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Dropbox.Sign.Client.OpenAPIDateConverter;

namespace Dropbox.Sign.Model
{
    /// <summary>
    /// FaxLineRemoveUserRequest
    /// </summary>
    [DataContract(Name = "FaxLineRemoveUserRequest")]
    [JsonObject(ItemNullValueHandling = NullValueHandling.Ignore)]
    public partial class FaxLineRemoveUserRequest : IEquatable<FaxLineRemoveUserRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FaxLineRemoveUserRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FaxLineRemoveUserRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FaxLineRemoveUserRequest" /> class.
        /// </summary>
        /// <param name="number">The Fax Line number (required).</param>
        /// <param name="accountId">Account ID of the user to remove access.</param>
        /// <param name="emailAddress">Email address of the user to remove access.</param>
        public FaxLineRemoveUserRequest(string number = default(string), string accountId = default(string), string emailAddress = default(string))
        {

            // to ensure "number" is required (not null)
            if (number == null)
            {
                throw new ArgumentNullException("number is a required property for FaxLineRemoveUserRequest and cannot be null");
            }
            this.Number = number;
            this.AccountId = accountId;
            this.EmailAddress = emailAddress;
        }

        /// <summary>
        /// Attempt to instantiate and hydrate a new instance of this class
        /// </summary>
        /// <param name="jsonData">String of JSON data representing target object</param>
        public static FaxLineRemoveUserRequest Init(string jsonData)
        {
            var obj = JsonConvert.DeserializeObject<FaxLineRemoveUserRequest>(jsonData);

            if (obj == null)
            {
                throw new Exception("Unable to deserialize JSON to instance of FaxLineRemoveUserRequest");
            }

            return obj;
        }

        /// <summary>
        /// The Fax Line number
        /// </summary>
        /// <value>The Fax Line number</value>
        [DataMember(Name = "number", IsRequired = true, EmitDefaultValue = true)]
        public string Number { get; set; }

        /// <summary>
        /// Account ID of the user to remove access
        /// </summary>
        /// <value>Account ID of the user to remove access</value>
        /// <example>ab55cd14a97219e36b5ff5fe23f2f9329b0c1e97</example>
        [DataMember(Name = "account_id", EmitDefaultValue = true)]
        public string AccountId { get; set; }

        /// <summary>
        /// Email address of the user to remove access
        /// </summary>
        /// <value>Email address of the user to remove access</value>
        [DataMember(Name = "email_address", EmitDefaultValue = true)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FaxLineRemoveUserRequest {\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FaxLineRemoveUserRequest);
        }

        /// <summary>
        /// Returns true if FaxLineRemoveUserRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of FaxLineRemoveUserRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FaxLineRemoveUserRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) &&
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) &&
                (
                    this.EmailAddress == input.EmailAddress ||
                    (this.EmailAddress != null &&
                    this.EmailAddress.Equals(input.EmailAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Number != null)
                {
                    hashCode = (hashCode * 59) + this.Number.GetHashCode();
                }
                if (this.AccountId != null)
                {
                    hashCode = (hashCode * 59) + this.AccountId.GetHashCode();
                }
                if (this.EmailAddress != null)
                {
                    hashCode = (hashCode * 59) + this.EmailAddress.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
        public List<OpenApiType> GetOpenApiTypes()
        {
            var types = new List<OpenApiType>();
            types.Add(new OpenApiType()
            {
                Name = "number",
                Property = "Number",
                Type = "string",
                Value = Number,
            });
            types.Add(new OpenApiType()
            {
                Name = "account_id",
                Property = "AccountId",
                Type = "string",
                Value = AccountId,
            });
            types.Add(new OpenApiType()
            {
                Name = "email_address",
                Property = "EmailAddress",
                Type = "string",
                Value = EmailAddress,
            });

            return types;
        }
    }

}
