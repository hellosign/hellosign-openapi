/*
 * Dropbox Sign API
 *
 * Dropbox Sign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Dropbox.Sign.Client.OpenAPIDateConverter;

namespace Dropbox.Sign.Model
{
    /// <summary>
    /// FaxResponseTransmission
    /// </summary>
    [DataContract(Name = "FaxResponseTransmission")]
    [JsonObject(ItemNullValueHandling = NullValueHandling.Ignore)]
    public partial class FaxResponseTransmission : IEquatable<FaxResponseTransmission>, IValidatableObject
    {
        /// <summary>
        /// Fax Transmission Status Code
        /// </summary>
        /// <value>Fax Transmission Status Code</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusCodeEnum
        {
            /// <summary>
            /// Enum Success for value: success
            /// </summary>
            [EnumMember(Value = "success")]
            Success = 1,

            /// <summary>
            /// Enum Transmitting for value: transmitting
            /// </summary>
            [EnumMember(Value = "transmitting")]
            Transmitting = 2,

            /// <summary>
            /// Enum ErrorCouldNotFax for value: error_could_not_fax
            /// </summary>
            [EnumMember(Value = "error_could_not_fax")]
            ErrorCouldNotFax = 3,

            /// <summary>
            /// Enum ErrorUnknown for value: error_unknown
            /// </summary>
            [EnumMember(Value = "error_unknown")]
            ErrorUnknown = 4,

            /// <summary>
            /// Enum ErrorBusy for value: error_busy
            /// </summary>
            [EnumMember(Value = "error_busy")]
            ErrorBusy = 5,

            /// <summary>
            /// Enum ErrorNoAnswer for value: error_no_answer
            /// </summary>
            [EnumMember(Value = "error_no_answer")]
            ErrorNoAnswer = 6,

            /// <summary>
            /// Enum ErrorDisconnected for value: error_disconnected
            /// </summary>
            [EnumMember(Value = "error_disconnected")]
            ErrorDisconnected = 7,

            /// <summary>
            /// Enum ErrorBadDestination for value: error_bad_destination
            /// </summary>
            [EnumMember(Value = "error_bad_destination")]
            ErrorBadDestination = 8
        }


        /// <summary>
        /// Fax Transmission Status Code
        /// </summary>
        /// <value>Fax Transmission Status Code</value>
        [DataMember(Name = "status_code", IsRequired = true, EmitDefaultValue = true)]
        public StatusCodeEnum StatusCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FaxResponseTransmission" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FaxResponseTransmission() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FaxResponseTransmission" /> class.
        /// </summary>
        /// <param name="recipient">Fax Transmission Recipient (required).</param>
        /// <param name="sender">Fax Transmission Sender (required).</param>
        /// <param name="statusCode">Fax Transmission Status Code (required).</param>
        /// <param name="sentAt">Fax Transmission Sent Timestamp.</param>
        public FaxResponseTransmission(string recipient = default(string), string sender = default(string), StatusCodeEnum statusCode = default(StatusCodeEnum), int sentAt = default(int))
        {

            // to ensure "recipient" is required (not null)
            if (recipient == null)
            {
                throw new ArgumentNullException("recipient is a required property for FaxResponseTransmission and cannot be null");
            }
            this.Recipient = recipient;
            // to ensure "sender" is required (not null)
            if (sender == null)
            {
                throw new ArgumentNullException("sender is a required property for FaxResponseTransmission and cannot be null");
            }
            this.Sender = sender;
            this.StatusCode = statusCode;
            this.SentAt = sentAt;
        }

        /// <summary>
        /// Attempt to instantiate and hydrate a new instance of this class
        /// </summary>
        /// <param name="jsonData">String of JSON data representing target object</param>
        public static FaxResponseTransmission Init(string jsonData)
        {
            var obj = JsonConvert.DeserializeObject<FaxResponseTransmission>(jsonData);

            if (obj == null)
            {
                throw new Exception("Unable to deserialize JSON to instance of FaxResponseTransmission");
            }

            return obj;
        }

        /// <summary>
        /// Fax Transmission Recipient
        /// </summary>
        /// <value>Fax Transmission Recipient</value>
        [DataMember(Name = "recipient", IsRequired = true, EmitDefaultValue = true)]
        public string Recipient { get; set; }

        /// <summary>
        /// Fax Transmission Sender
        /// </summary>
        /// <value>Fax Transmission Sender</value>
        [DataMember(Name = "sender", IsRequired = true, EmitDefaultValue = true)]
        public string Sender { get; set; }

        /// <summary>
        /// Fax Transmission Sent Timestamp
        /// </summary>
        /// <value>Fax Transmission Sent Timestamp</value>
        [DataMember(Name = "sent_at", EmitDefaultValue = true)]
        public int SentAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FaxResponseTransmission {\n");
            sb.Append("  Recipient: ").Append(Recipient).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  SentAt: ").Append(SentAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FaxResponseTransmission);
        }

        /// <summary>
        /// Returns true if FaxResponseTransmission instances are equal
        /// </summary>
        /// <param name="input">Instance of FaxResponseTransmission to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FaxResponseTransmission input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.Recipient == input.Recipient ||
                    (this.Recipient != null &&
                    this.Recipient.Equals(input.Recipient))
                ) &&
                (
                    this.Sender == input.Sender ||
                    (this.Sender != null &&
                    this.Sender.Equals(input.Sender))
                ) &&
                (
                    this.StatusCode == input.StatusCode ||
                    this.StatusCode.Equals(input.StatusCode)
                ) &&
                (
                    this.SentAt == input.SentAt ||
                    this.SentAt.Equals(input.SentAt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Recipient != null)
                {
                    hashCode = (hashCode * 59) + this.Recipient.GetHashCode();
                }
                if (this.Sender != null)
                {
                    hashCode = (hashCode * 59) + this.Sender.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StatusCode.GetHashCode();
                hashCode = (hashCode * 59) + this.SentAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
        public List<OpenApiType> GetOpenApiTypes()
        {
            var types = new List<OpenApiType>();
            types.Add(new OpenApiType()
            {
                Name = "recipient",
                Property = "Recipient",
                Type = "string",
                Value = Recipient,
            });
            types.Add(new OpenApiType()
            {
                Name = "sender",
                Property = "Sender",
                Type = "string",
                Value = Sender,
            });
            types.Add(new OpenApiType()
            {
                Name = "status_code",
                Property = "StatusCode",
                Type = "string",
                Value = StatusCode,
            });
            types.Add(new OpenApiType()
            {
                Name = "sent_at",
                Property = "SentAt",
                Type = "int",
                Value = SentAt,
            });

            return types;
        }
    }

}
