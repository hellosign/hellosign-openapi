/*
 * Dropbox Sign API
 *
 * Dropbox Sign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Dropbox.Sign.Client.OpenAPIDateConverter;

namespace Dropbox.Sign.Model
{
    /// <summary>
    /// FaxListResponse
    /// </summary>
    [DataContract(Name = "FaxListResponse")]
    [JsonObject(ItemNullValueHandling = NullValueHandling.Ignore)]
    public partial class FaxListResponse : IEquatable<FaxListResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FaxListResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FaxListResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FaxListResponse" /> class.
        /// </summary>
        /// <param name="faxes">faxes (required).</param>
        /// <param name="listInfo">listInfo (required).</param>
        public FaxListResponse(List<FaxResponse> faxes = default(List<FaxResponse>), ListInfoResponse listInfo = default(ListInfoResponse))
        {

            // to ensure "faxes" is required (not null)
            if (faxes == null)
            {
                throw new ArgumentNullException("faxes is a required property for FaxListResponse and cannot be null");
            }
            this.Faxes = faxes;
            // to ensure "listInfo" is required (not null)
            if (listInfo == null)
            {
                throw new ArgumentNullException("listInfo is a required property for FaxListResponse and cannot be null");
            }
            this.ListInfo = listInfo;
        }

        /// <summary>
        /// Attempt to instantiate and hydrate a new instance of this class
        /// </summary>
        /// <param name="jsonData">String of JSON data representing target object</param>
        public static FaxListResponse Init(string jsonData)
        {
            var obj = JsonConvert.DeserializeObject<FaxListResponse>(jsonData);

            if (obj == null)
            {
                throw new Exception("Unable to deserialize JSON to instance of FaxListResponse");
            }

            return obj;
        }

        /// <summary>
        /// Gets or Sets Faxes
        /// </summary>
        [DataMember(Name = "faxes", IsRequired = true, EmitDefaultValue = true)]
        public List<FaxResponse> Faxes { get; set; }

        /// <summary>
        /// Gets or Sets ListInfo
        /// </summary>
        [DataMember(Name = "list_info", IsRequired = true, EmitDefaultValue = true)]
        public ListInfoResponse ListInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FaxListResponse {\n");
            sb.Append("  Faxes: ").Append(Faxes).Append("\n");
            sb.Append("  ListInfo: ").Append(ListInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FaxListResponse);
        }

        /// <summary>
        /// Returns true if FaxListResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of FaxListResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FaxListResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.Faxes == input.Faxes ||
                    this.Faxes != null &&
                    input.Faxes != null &&
                    this.Faxes.SequenceEqual(input.Faxes)
                ) &&
                (
                    this.ListInfo == input.ListInfo ||
                    (this.ListInfo != null &&
                    this.ListInfo.Equals(input.ListInfo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Faxes != null)
                {
                    hashCode = (hashCode * 59) + this.Faxes.GetHashCode();
                }
                if (this.ListInfo != null)
                {
                    hashCode = (hashCode * 59) + this.ListInfo.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
        public List<OpenApiType> GetOpenApiTypes()
        {
            var types = new List<OpenApiType>();
            types.Add(new OpenApiType()
            {
                Name = "faxes",
                Property = "Faxes",
                Type = "List<FaxResponse>",
                Value = Faxes,
            });
            types.Add(new OpenApiType()
            {
                Name = "list_info",
                Property = "ListInfo",
                Type = "ListInfoResponse",
                Value = ListInfo,
            });

            return types;
        }
    }

}
