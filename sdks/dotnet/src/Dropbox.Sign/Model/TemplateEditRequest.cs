/*
 * Dropbox Sign API
 *
 * Dropbox Sign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Dropbox.Sign.Client.OpenAPIDateConverter;

namespace Dropbox.Sign.Model
{
    /// <summary>
    /// TemplateEditRequest
    /// </summary>
    [DataContract(Name = "TemplateEditRequest")]
    [JsonObject(ItemNullValueHandling = NullValueHandling.Ignore)]
    public partial class TemplateEditRequest : IEquatable<TemplateEditRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateEditRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TemplateEditRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateEditRequest" /> class.
        /// </summary>
        /// <param name="ccRoles">The CC roles that must be assigned when using the template to send a signature request.</param>
        /// <param name="allowFormView">Allows signers to view the form fields before signing if set to &#x60;true&#x60;..</param>
        public TemplateEditRequest(List<string> ccRoles = default(List<string>), bool allowFormView = default(bool))
        {

            this.CcRoles = ccRoles;
            this.AllowFormView = allowFormView;
        }

        /// <summary>
        /// Attempt to instantiate and hydrate a new instance of this class
        /// </summary>
        /// <param name="jsonData">String of JSON data representing target object</param>
        public static TemplateEditRequest Init(string jsonData)
        {
            var obj = JsonConvert.DeserializeObject<TemplateEditRequest>(jsonData);

            if (obj == null)
            {
                throw new Exception("Unable to deserialize JSON to instance of TemplateEditRequest");
            }

            return obj;
        }

        /// <summary>
        /// The CC roles that must be assigned when using the template to send a signature request
        /// </summary>
        /// <value>The CC roles that must be assigned when using the template to send a signature request</value>
        [DataMember(Name = "cc_roles", EmitDefaultValue = true)]
        public List<string> CcRoles { get; set; }

        /// <summary>
        /// Allows signers to view the form fields before signing if set to &#x60;true&#x60;.
        /// </summary>
        /// <value>Allows signers to view the form fields before signing if set to &#x60;true&#x60;.</value>
        [DataMember(Name = "allow_form_view", EmitDefaultValue = true)]
        public bool AllowFormView { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TemplateEditRequest {\n");
            sb.Append("  CcRoles: ").Append(CcRoles).Append("\n");
            sb.Append("  AllowFormView: ").Append(AllowFormView).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TemplateEditRequest);
        }

        /// <summary>
        /// Returns true if TemplateEditRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TemplateEditRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TemplateEditRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.CcRoles == input.CcRoles ||
                    this.CcRoles != null &&
                    input.CcRoles != null &&
                    this.CcRoles.SequenceEqual(input.CcRoles)
                ) &&
                (
                    this.AllowFormView == input.AllowFormView ||
                    this.AllowFormView.Equals(input.AllowFormView)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CcRoles != null)
                {
                    hashCode = (hashCode * 59) + this.CcRoles.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AllowFormView.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
        public List<OpenApiType> GetOpenApiTypes()
        {
            var types = new List<OpenApiType>();
            types.Add(new OpenApiType()
            {
                Name = "cc_roles",
                Property = "CcRoles",
                Type = "List<string>",
                Value = CcRoles,
            });
            types.Add(new OpenApiType()
            {
                Name = "allow_form_view",
                Property = "AllowFormView",
                Type = "bool",
                Value = AllowFormView,
            });

            return types;
        }
    }

}
