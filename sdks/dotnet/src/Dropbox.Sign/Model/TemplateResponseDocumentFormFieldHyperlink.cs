/*
 * Dropbox Sign API
 *
 * Dropbox Sign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Dropbox.Sign.Client.OpenAPIDateConverter;

namespace Dropbox.Sign.Model
{
    /// <summary>
    /// _t__TemplateResponseDocumentFormField::DESCRIPTION_EXTENDS
    /// </summary>
    [DataContract(Name = "TemplateResponseDocumentFormFieldHyperlink")]
    [JsonObject(ItemNullValueHandling = NullValueHandling.Ignore)]
    public partial class TemplateResponseDocumentFormFieldHyperlink : TemplateResponseDocumentFormFieldBase, IOpenApiTyped, IEquatable<TemplateResponseDocumentFormFieldHyperlink>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateResponseDocumentFormFieldHyperlink" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TemplateResponseDocumentFormFieldHyperlink() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateResponseDocumentFormFieldHyperlink" /> class.
        /// </summary>
        /// <param name="type">_t__TemplateResponseDocumentFormField::TYPE (required) (default to &quot;hyperlink&quot;).</param>
        /// <param name="avgTextLength">avgTextLength.</param>
        /// <param name="isMultiline">_t__TemplateResponseDocumentFormField::IS_MULTILINE.</param>
        /// <param name="originalFontSize">_t__TemplateResponseDocumentFormField::ORIGINAL_FONT_SIZE.</param>
        /// <param name="fontFamily">_t__TemplateResponseDocumentFormField::FONT_FAMILY.</param>
        /// <param name="group">_t__TemplateResponseDocumentFormField::GROUP.</param>
        /// <param name="apiId">_t__TemplateResponseDocumentFormField::API_ID.</param>
        /// <param name="name">_t__TemplateResponseDocumentFormField::NAME.</param>
        /// <param name="signer">_t__TemplateResponseDocumentFormField::SIGNER.</param>
        /// <param name="x">_t__TemplateResponseDocumentFormField::X.</param>
        /// <param name="y">_t__TemplateResponseDocumentFormField::Y.</param>
        /// <param name="width">_t__TemplateResponseDocumentFormField::WIDTH.</param>
        /// <param name="height">_t__TemplateResponseDocumentFormField::HEIGHT.</param>
        /// <param name="required">_t__TemplateResponseDocumentFormField::REQUIRED.</param>
        public TemplateResponseDocumentFormFieldHyperlink(string type = @"hyperlink", TemplateResponseFieldAvgTextLength avgTextLength = default(TemplateResponseFieldAvgTextLength), bool isMultiline = default(bool), int originalFontSize = default(int), string fontFamily = default(string), string group = default(string), string apiId = default(string), string name = default(string), Object signer = null, int x = default(int), int y = default(int), int width = default(int), int height = default(int), bool required = default(bool))
        {
            this.ApiId = apiId;
            this.Name = name;
            this.Signer = Convert.ToString(signer);
            this.X = x;
            this.Y = y;
            this.Width = width;
            this.Height = height;
            this.Required = required;

            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for TemplateResponseDocumentFormFieldHyperlink and cannot be null");
            }
            this.Type = type;
            this.AvgTextLength = avgTextLength;
            this.IsMultiline = isMultiline;
            this.OriginalFontSize = originalFontSize;
            this.FontFamily = fontFamily;
            this.Group = group;
        }

        /// <summary>
        /// Attempt to instantiate and hydrate a new instance of this class
        /// </summary>
        /// <param name="jsonData">String of JSON data representing target object</param>
        public static TemplateResponseDocumentFormFieldHyperlink Init(string jsonData)
        {
            var obj = JsonConvert.DeserializeObject<TemplateResponseDocumentFormFieldHyperlink>(jsonData);

            if (obj == null)
            {
                throw new Exception("Unable to deserialize JSON to instance of TemplateResponseDocumentFormFieldHyperlink");
            }

            return obj;
        }

        /// <summary>
        /// _t__TemplateResponseDocumentFormField::TYPE
        /// </summary>
        /// <value>_t__TemplateResponseDocumentFormField::TYPE</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets AvgTextLength
        /// </summary>
        [DataMember(Name = "avg_text_length", EmitDefaultValue = true)]
        public TemplateResponseFieldAvgTextLength AvgTextLength { get; set; }

        /// <summary>
        /// _t__TemplateResponseDocumentFormField::IS_MULTILINE
        /// </summary>
        /// <value>_t__TemplateResponseDocumentFormField::IS_MULTILINE</value>
        [DataMember(Name = "isMultiline", EmitDefaultValue = true)]
        public bool IsMultiline { get; set; }

        /// <summary>
        /// _t__TemplateResponseDocumentFormField::ORIGINAL_FONT_SIZE
        /// </summary>
        /// <value>_t__TemplateResponseDocumentFormField::ORIGINAL_FONT_SIZE</value>
        [DataMember(Name = "originalFontSize", EmitDefaultValue = true)]
        public int OriginalFontSize { get; set; }

        /// <summary>
        /// _t__TemplateResponseDocumentFormField::FONT_FAMILY
        /// </summary>
        /// <value>_t__TemplateResponseDocumentFormField::FONT_FAMILY</value>
        [DataMember(Name = "fontFamily", EmitDefaultValue = true)]
        public string FontFamily { get; set; }

        /// <summary>
        /// _t__TemplateResponseDocumentFormField::GROUP
        /// </summary>
        /// <value>_t__TemplateResponseDocumentFormField::GROUP</value>
        [DataMember(Name = "group", EmitDefaultValue = true)]
        public string Group { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TemplateResponseDocumentFormFieldHyperlink {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AvgTextLength: ").Append(AvgTextLength).Append("\n");
            sb.Append("  IsMultiline: ").Append(IsMultiline).Append("\n");
            sb.Append("  OriginalFontSize: ").Append(OriginalFontSize).Append("\n");
            sb.Append("  FontFamily: ").Append(FontFamily).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TemplateResponseDocumentFormFieldHyperlink);
        }

        /// <summary>
        /// Returns true if TemplateResponseDocumentFormFieldHyperlink instances are equal
        /// </summary>
        /// <param name="input">Instance of TemplateResponseDocumentFormFieldHyperlink to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TemplateResponseDocumentFormFieldHyperlink input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) &&
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && base.Equals(input) &&
                (
                    this.AvgTextLength == input.AvgTextLength ||
                    (this.AvgTextLength != null &&
                    this.AvgTextLength.Equals(input.AvgTextLength))
                ) && base.Equals(input) &&
                (
                    this.IsMultiline == input.IsMultiline ||
                    this.IsMultiline.Equals(input.IsMultiline)
                ) && base.Equals(input) &&
                (
                    this.OriginalFontSize == input.OriginalFontSize ||
                    this.OriginalFontSize.Equals(input.OriginalFontSize)
                ) && base.Equals(input) &&
                (
                    this.FontFamily == input.FontFamily ||
                    (this.FontFamily != null &&
                    this.FontFamily.Equals(input.FontFamily))
                ) && base.Equals(input) &&
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.AvgTextLength != null)
                {
                    hashCode = (hashCode * 59) + this.AvgTextLength.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsMultiline.GetHashCode();
                hashCode = (hashCode * 59) + this.OriginalFontSize.GetHashCode();
                if (this.FontFamily != null)
                {
                    hashCode = (hashCode * 59) + this.FontFamily.GetHashCode();
                }
                if (this.Group != null)
                {
                    hashCode = (hashCode * 59) + this.Group.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
        public List<OpenApiType> GetOpenApiTypes()
        {
            var types = new List<OpenApiType>();
            types.Add(new OpenApiType()
            {
                Name = "type",
                Property = "Type",
                Type = "string",
                Value = Type,
            });
            types.Add(new OpenApiType()
            {
                Name = "avg_text_length",
                Property = "AvgTextLength",
                Type = "TemplateResponseFieldAvgTextLength",
                Value = AvgTextLength,
            });
            types.Add(new OpenApiType()
            {
                Name = "isMultiline",
                Property = "IsMultiline",
                Type = "bool",
                Value = IsMultiline,
            });
            types.Add(new OpenApiType()
            {
                Name = "originalFontSize",
                Property = "OriginalFontSize",
                Type = "int",
                Value = OriginalFontSize,
            });
            types.Add(new OpenApiType()
            {
                Name = "fontFamily",
                Property = "FontFamily",
                Type = "string",
                Value = FontFamily,
            });
            types.Add(new OpenApiType()
            {
                Name = "group",
                Property = "Group",
                Type = "string",
                Value = Group,
            });

            return types;
        }
    }

}
