/*
 * Dropbox Sign API
 *
 * Dropbox Sign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Dropbox.Sign.Client.OpenAPIDateConverter;

namespace Dropbox.Sign.Model
{
    /// <summary>
    /// OAuthTokenRefreshRequest
    /// </summary>
    [DataContract(Name = "OAuthTokenRefreshRequest")]
    [JsonObject(ItemNullValueHandling = NullValueHandling.Ignore)]
    public partial class OAuthTokenRefreshRequest : IEquatable<OAuthTokenRefreshRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OAuthTokenRefreshRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OAuthTokenRefreshRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OAuthTokenRefreshRequest" /> class.
        /// </summary>
        /// <param name="grantType">When refreshing an existing token use &#x60;refresh_token&#x60;. (required) (default to &quot;refresh_token&quot;).</param>
        /// <param name="refreshToken">The token provided when you got the expired access token. (required).</param>
        /// <param name="clientId">The client ID for your API app. Mandatory from August 1st, 2025. Until then, required if the \&quot;Client Credentials Required\&quot; setting is enabled for token refresh; optional if disabled..</param>
        /// <param name="clientSecret">The client secret for your API app. Mandatory from August 1st, 2025. Until then, required if the \&quot;Client Credentials Required\&quot; setting is enabled for token refresh; optional if disabled..</param>
        public OAuthTokenRefreshRequest(string grantType = @"refresh_token", string refreshToken = default(string), string clientId = default(string), string clientSecret = default(string))
        {

            // to ensure "grantType" is required (not null)
            if (grantType == null)
            {
                throw new ArgumentNullException("grantType is a required property for OAuthTokenRefreshRequest and cannot be null");
            }
            this.GrantType = grantType;
            // to ensure "refreshToken" is required (not null)
            if (refreshToken == null)
            {
                throw new ArgumentNullException("refreshToken is a required property for OAuthTokenRefreshRequest and cannot be null");
            }
            this.RefreshToken = refreshToken;
            this.ClientId = clientId;
            this.ClientSecret = clientSecret;
        }

        /// <summary>
        /// Attempt to instantiate and hydrate a new instance of this class
        /// </summary>
        /// <param name="jsonData">String of JSON data representing target object</param>
        public static OAuthTokenRefreshRequest Init(string jsonData)
        {
            var obj = JsonConvert.DeserializeObject<OAuthTokenRefreshRequest>(jsonData);

            if (obj == null)
            {
                throw new Exception("Unable to deserialize JSON to instance of OAuthTokenRefreshRequest");
            }

            return obj;
        }

        /// <summary>
        /// When refreshing an existing token use &#x60;refresh_token&#x60;.
        /// </summary>
        /// <value>When refreshing an existing token use &#x60;refresh_token&#x60;.</value>
        [DataMember(Name = "grant_type", IsRequired = true, EmitDefaultValue = true)]
        public string GrantType { get; set; }

        /// <summary>
        /// The token provided when you got the expired access token.
        /// </summary>
        /// <value>The token provided when you got the expired access token.</value>
        [DataMember(Name = "refresh_token", IsRequired = true, EmitDefaultValue = true)]
        public string RefreshToken { get; set; }

        /// <summary>
        /// The client ID for your API app. Mandatory from August 1st, 2025. Until then, required if the \&quot;Client Credentials Required\&quot; setting is enabled for token refresh; optional if disabled.
        /// </summary>
        /// <value>The client ID for your API app. Mandatory from August 1st, 2025. Until then, required if the \&quot;Client Credentials Required\&quot; setting is enabled for token refresh; optional if disabled.</value>
        [DataMember(Name = "client_id", EmitDefaultValue = true)]
        public string ClientId { get; set; }

        /// <summary>
        /// The client secret for your API app. Mandatory from August 1st, 2025. Until then, required if the \&quot;Client Credentials Required\&quot; setting is enabled for token refresh; optional if disabled.
        /// </summary>
        /// <value>The client secret for your API app. Mandatory from August 1st, 2025. Until then, required if the \&quot;Client Credentials Required\&quot; setting is enabled for token refresh; optional if disabled.</value>
        [DataMember(Name = "client_secret", EmitDefaultValue = true)]
        public string ClientSecret { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OAuthTokenRefreshRequest {\n");
            sb.Append("  GrantType: ").Append(GrantType).Append("\n");
            sb.Append("  RefreshToken: ").Append(RefreshToken).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ClientSecret: ").Append(ClientSecret).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OAuthTokenRefreshRequest);
        }

        /// <summary>
        /// Returns true if OAuthTokenRefreshRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of OAuthTokenRefreshRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OAuthTokenRefreshRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.GrantType == input.GrantType ||
                    (this.GrantType != null &&
                    this.GrantType.Equals(input.GrantType))
                ) &&
                (
                    this.RefreshToken == input.RefreshToken ||
                    (this.RefreshToken != null &&
                    this.RefreshToken.Equals(input.RefreshToken))
                ) &&
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) &&
                (
                    this.ClientSecret == input.ClientSecret ||
                    (this.ClientSecret != null &&
                    this.ClientSecret.Equals(input.ClientSecret))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GrantType != null)
                {
                    hashCode = (hashCode * 59) + this.GrantType.GetHashCode();
                }
                if (this.RefreshToken != null)
                {
                    hashCode = (hashCode * 59) + this.RefreshToken.GetHashCode();
                }
                if (this.ClientId != null)
                {
                    hashCode = (hashCode * 59) + this.ClientId.GetHashCode();
                }
                if (this.ClientSecret != null)
                {
                    hashCode = (hashCode * 59) + this.ClientSecret.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
        public List<OpenApiType> GetOpenApiTypes()
        {
            var types = new List<OpenApiType>();
            types.Add(new OpenApiType()
            {
                Name = "grant_type",
                Property = "GrantType",
                Type = "string",
                Value = GrantType,
            });
            types.Add(new OpenApiType()
            {
                Name = "refresh_token",
                Property = "RefreshToken",
                Type = "string",
                Value = RefreshToken,
            });
            types.Add(new OpenApiType()
            {
                Name = "client_id",
                Property = "ClientId",
                Type = "string",
                Value = ClientId,
            });
            types.Add(new OpenApiType()
            {
                Name = "client_secret",
                Property = "ClientSecret",
                Type = "string",
                Value = ClientSecret,
            });

            return types;
        }
    }

}
