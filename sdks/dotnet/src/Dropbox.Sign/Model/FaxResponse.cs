/*
 * Dropbox Sign API
 *
 * Dropbox Sign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Dropbox.Sign.Client.OpenAPIDateConverter;

namespace Dropbox.Sign.Model
{
    /// <summary>
    /// FaxResponse
    /// </summary>
    [DataContract(Name = "FaxResponse")]
    [JsonObject(ItemNullValueHandling = NullValueHandling.Ignore)]
    public partial class FaxResponse : IEquatable<FaxResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FaxResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FaxResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FaxResponse" /> class.
        /// </summary>
        /// <param name="faxId">Fax ID (required).</param>
        /// <param name="title">Fax Title (required).</param>
        /// <param name="originalTitle">Fax Original Title (required).</param>
        /// <param name="subject">Fax Subject.</param>
        /// <param name="message">Fax Message.</param>
        /// <param name="metadata">Fax Metadata (required).</param>
        /// <param name="createdAt">Fax Created At Timestamp (required).</param>
        /// <param name="sender">Fax Sender Email (required).</param>
        /// <param name="filesUrl">Fax Files URL (required).</param>
        /// <param name="finalCopyUri">The path where the completed document can be downloaded.</param>
        /// <param name="transmissions">Fax Transmissions List (required).</param>
        public FaxResponse(string faxId = default(string), string title = default(string), string originalTitle = default(string), string subject = default(string), string message = default(string), Dictionary<string, Object> metadata = default(Dictionary<string, Object>), int createdAt = default(int), string sender = default(string), string filesUrl = default(string), string finalCopyUri = default(string), List<FaxResponseTransmission> transmissions = default(List<FaxResponseTransmission>))
        {

            // to ensure "faxId" is required (not null)
            if (faxId == null)
            {
                throw new ArgumentNullException("faxId is a required property for FaxResponse and cannot be null");
            }
            this.FaxId = faxId;
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new ArgumentNullException("title is a required property for FaxResponse and cannot be null");
            }
            this.Title = title;
            // to ensure "originalTitle" is required (not null)
            if (originalTitle == null)
            {
                throw new ArgumentNullException("originalTitle is a required property for FaxResponse and cannot be null");
            }
            this.OriginalTitle = originalTitle;
            // to ensure "metadata" is required (not null)
            if (metadata == null)
            {
                throw new ArgumentNullException("metadata is a required property for FaxResponse and cannot be null");
            }
            this.Metadata = metadata;
            this.CreatedAt = createdAt;
            // to ensure "sender" is required (not null)
            if (sender == null)
            {
                throw new ArgumentNullException("sender is a required property for FaxResponse and cannot be null");
            }
            this.Sender = sender;
            // to ensure "filesUrl" is required (not null)
            if (filesUrl == null)
            {
                throw new ArgumentNullException("filesUrl is a required property for FaxResponse and cannot be null");
            }
            this.FilesUrl = filesUrl;
            // to ensure "transmissions" is required (not null)
            if (transmissions == null)
            {
                throw new ArgumentNullException("transmissions is a required property for FaxResponse and cannot be null");
            }
            this.Transmissions = transmissions;
            this.Subject = subject;
            this.Message = message;
            this.FinalCopyUri = finalCopyUri;
        }

        /// <summary>
        /// Attempt to instantiate and hydrate a new instance of this class
        /// </summary>
        /// <param name="jsonData">String of JSON data representing target object</param>
        public static FaxResponse Init(string jsonData)
        {
            var obj = JsonConvert.DeserializeObject<FaxResponse>(jsonData);

            if (obj == null)
            {
                throw new Exception("Unable to deserialize JSON to instance of FaxResponse");
            }

            return obj;
        }

        /// <summary>
        /// Fax ID
        /// </summary>
        /// <value>Fax ID</value>
        [DataMember(Name = "fax_id", IsRequired = true, EmitDefaultValue = true)]
        public string FaxId { get; set; }

        /// <summary>
        /// Fax Title
        /// </summary>
        /// <value>Fax Title</value>
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Fax Original Title
        /// </summary>
        /// <value>Fax Original Title</value>
        [DataMember(Name = "original_title", IsRequired = true, EmitDefaultValue = true)]
        public string OriginalTitle { get; set; }

        /// <summary>
        /// Fax Metadata
        /// </summary>
        /// <value>Fax Metadata</value>
        [DataMember(Name = "metadata", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, Object> Metadata { get; set; }

        /// <summary>
        /// Fax Created At Timestamp
        /// </summary>
        /// <value>Fax Created At Timestamp</value>
        [DataMember(Name = "created_at", IsRequired = true, EmitDefaultValue = true)]
        public int CreatedAt { get; set; }

        /// <summary>
        /// Fax Sender Email
        /// </summary>
        /// <value>Fax Sender Email</value>
        [DataMember(Name = "sender", IsRequired = true, EmitDefaultValue = true)]
        public string Sender { get; set; }

        /// <summary>
        /// Fax Files URL
        /// </summary>
        /// <value>Fax Files URL</value>
        [DataMember(Name = "files_url", IsRequired = true, EmitDefaultValue = true)]
        public string FilesUrl { get; set; }

        /// <summary>
        /// Fax Transmissions List
        /// </summary>
        /// <value>Fax Transmissions List</value>
        [DataMember(Name = "transmissions", IsRequired = true, EmitDefaultValue = true)]
        public List<FaxResponseTransmission> Transmissions { get; set; }

        /// <summary>
        /// Fax Subject
        /// </summary>
        /// <value>Fax Subject</value>
        [DataMember(Name = "subject", EmitDefaultValue = true)]
        public string Subject { get; set; }

        /// <summary>
        /// Fax Message
        /// </summary>
        /// <value>Fax Message</value>
        [DataMember(Name = "message", EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// The path where the completed document can be downloaded
        /// </summary>
        /// <value>The path where the completed document can be downloaded</value>
        [DataMember(Name = "final_copy_uri", EmitDefaultValue = true)]
        public string FinalCopyUri { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FaxResponse {\n");
            sb.Append("  FaxId: ").Append(FaxId).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  OriginalTitle: ").Append(OriginalTitle).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  FilesUrl: ").Append(FilesUrl).Append("\n");
            sb.Append("  Transmissions: ").Append(Transmissions).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  FinalCopyUri: ").Append(FinalCopyUri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FaxResponse);
        }

        /// <summary>
        /// Returns true if FaxResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of FaxResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FaxResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.FaxId == input.FaxId ||
                    (this.FaxId != null &&
                    this.FaxId.Equals(input.FaxId))
                ) &&
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) &&
                (
                    this.OriginalTitle == input.OriginalTitle ||
                    (this.OriginalTitle != null &&
                    this.OriginalTitle.Equals(input.OriginalTitle))
                ) &&
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) &&
                (
                    this.CreatedAt == input.CreatedAt ||
                    this.CreatedAt.Equals(input.CreatedAt)
                ) &&
                (
                    this.Sender == input.Sender ||
                    (this.Sender != null &&
                    this.Sender.Equals(input.Sender))
                ) &&
                (
                    this.FilesUrl == input.FilesUrl ||
                    (this.FilesUrl != null &&
                    this.FilesUrl.Equals(input.FilesUrl))
                ) &&
                (
                    this.Transmissions == input.Transmissions ||
                    this.Transmissions != null &&
                    input.Transmissions != null &&
                    this.Transmissions.SequenceEqual(input.Transmissions)
                ) &&
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) &&
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) &&
                (
                    this.FinalCopyUri == input.FinalCopyUri ||
                    (this.FinalCopyUri != null &&
                    this.FinalCopyUri.Equals(input.FinalCopyUri))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FaxId != null)
                {
                    hashCode = (hashCode * 59) + this.FaxId.GetHashCode();
                }
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.OriginalTitle != null)
                {
                    hashCode = (hashCode * 59) + this.OriginalTitle.GetHashCode();
                }
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                if (this.Sender != null)
                {
                    hashCode = (hashCode * 59) + this.Sender.GetHashCode();
                }
                if (this.FilesUrl != null)
                {
                    hashCode = (hashCode * 59) + this.FilesUrl.GetHashCode();
                }
                if (this.Transmissions != null)
                {
                    hashCode = (hashCode * 59) + this.Transmissions.GetHashCode();
                }
                if (this.Subject != null)
                {
                    hashCode = (hashCode * 59) + this.Subject.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                if (this.FinalCopyUri != null)
                {
                    hashCode = (hashCode * 59) + this.FinalCopyUri.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
        public List<OpenApiType> GetOpenApiTypes()
        {
            var types = new List<OpenApiType>();
            types.Add(new OpenApiType()
            {
                Name = "fax_id",
                Property = "FaxId",
                Type = "string",
                Value = FaxId,
            });
            types.Add(new OpenApiType()
            {
                Name = "title",
                Property = "Title",
                Type = "string",
                Value = Title,
            });
            types.Add(new OpenApiType()
            {
                Name = "original_title",
                Property = "OriginalTitle",
                Type = "string",
                Value = OriginalTitle,
            });
            types.Add(new OpenApiType()
            {
                Name = "metadata",
                Property = "Metadata",
                Type = "Dictionary<string, Object>",
                Value = Metadata,
            });
            types.Add(new OpenApiType()
            {
                Name = "created_at",
                Property = "CreatedAt",
                Type = "int",
                Value = CreatedAt,
            });
            types.Add(new OpenApiType()
            {
                Name = "sender",
                Property = "Sender",
                Type = "string",
                Value = Sender,
            });
            types.Add(new OpenApiType()
            {
                Name = "files_url",
                Property = "FilesUrl",
                Type = "string",
                Value = FilesUrl,
            });
            types.Add(new OpenApiType()
            {
                Name = "transmissions",
                Property = "Transmissions",
                Type = "List<FaxResponseTransmission>",
                Value = Transmissions,
            });
            types.Add(new OpenApiType()
            {
                Name = "subject",
                Property = "Subject",
                Type = "string",
                Value = Subject,
            });
            types.Add(new OpenApiType()
            {
                Name = "message",
                Property = "Message",
                Type = "string",
                Value = Message,
            });
            types.Add(new OpenApiType()
            {
                Name = "final_copy_uri",
                Property = "FinalCopyUri",
                Type = "string",
                Value = FinalCopyUri,
            });

            return types;
        }
    }

}
