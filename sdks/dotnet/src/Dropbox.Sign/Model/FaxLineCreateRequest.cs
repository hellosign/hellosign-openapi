/*
 * Dropbox Sign API
 *
 * Dropbox Sign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Dropbox.Sign.Client.OpenAPIDateConverter;

namespace Dropbox.Sign.Model
{
    /// <summary>
    /// FaxLineCreateRequest
    /// </summary>
    [DataContract(Name = "FaxLineCreateRequest")]
    [JsonObject(ItemNullValueHandling = NullValueHandling.Ignore)]
    public partial class FaxLineCreateRequest : IEquatable<FaxLineCreateRequest>, IValidatableObject
    {
        /// <summary>
        /// Country of the area code
        /// </summary>
        /// <value>Country of the area code</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CountryEnum
        {
            /// <summary>
            /// Enum CA for value: CA
            /// </summary>
            [EnumMember(Value = "CA")]
            CA = 1,

            /// <summary>
            /// Enum US for value: US
            /// </summary>
            [EnumMember(Value = "US")]
            US = 2,

            /// <summary>
            /// Enum UK for value: UK
            /// </summary>
            [EnumMember(Value = "UK")]
            UK = 3
        }


        /// <summary>
        /// Country of the area code
        /// </summary>
        /// <value>Country of the area code</value>
        [DataMember(Name = "country", IsRequired = true, EmitDefaultValue = true)]
        public CountryEnum Country { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FaxLineCreateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FaxLineCreateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FaxLineCreateRequest" /> class.
        /// </summary>
        /// <param name="areaCode">Area code of the new Fax Line (required).</param>
        /// <param name="country">Country of the area code (required).</param>
        /// <param name="city">City of the area code.</param>
        /// <param name="accountId">Account ID of the account that will be assigned this new Fax Line.</param>
        public FaxLineCreateRequest(int areaCode = default(int), CountryEnum country = default(CountryEnum), string city = default(string), string accountId = default(string))
        {

            this.AreaCode = areaCode;
            this.Country = country;
            this.City = city;
            this.AccountId = accountId;
        }

        /// <summary>
        /// Attempt to instantiate and hydrate a new instance of this class
        /// </summary>
        /// <param name="jsonData">String of JSON data representing target object</param>
        public static FaxLineCreateRequest Init(string jsonData)
        {
            var obj = JsonConvert.DeserializeObject<FaxLineCreateRequest>(jsonData);

            if (obj == null)
            {
                throw new Exception("Unable to deserialize JSON to instance of FaxLineCreateRequest");
            }

            return obj;
        }

        /// <summary>
        /// Area code of the new Fax Line
        /// </summary>
        /// <value>Area code of the new Fax Line</value>
        [DataMember(Name = "area_code", IsRequired = true, EmitDefaultValue = true)]
        public int AreaCode { get; set; }

        /// <summary>
        /// City of the area code
        /// </summary>
        /// <value>City of the area code</value>
        [DataMember(Name = "city", EmitDefaultValue = true)]
        public string City { get; set; }

        /// <summary>
        /// Account ID of the account that will be assigned this new Fax Line
        /// </summary>
        /// <value>Account ID of the account that will be assigned this new Fax Line</value>
        /// <example>ab55cd14a97219e36b5ff5fe23f2f9329b0c1e97</example>
        [DataMember(Name = "account_id", EmitDefaultValue = true)]
        public string AccountId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FaxLineCreateRequest {\n");
            sb.Append("  AreaCode: ").Append(AreaCode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FaxLineCreateRequest);
        }

        /// <summary>
        /// Returns true if FaxLineCreateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of FaxLineCreateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FaxLineCreateRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.AreaCode == input.AreaCode ||
                    this.AreaCode.Equals(input.AreaCode)
                ) &&
                (
                    this.Country == input.Country ||
                    this.Country.Equals(input.Country)
                ) &&
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) &&
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AreaCode.GetHashCode();
                hashCode = (hashCode * 59) + this.Country.GetHashCode();
                if (this.City != null)
                {
                    hashCode = (hashCode * 59) + this.City.GetHashCode();
                }
                if (this.AccountId != null)
                {
                    hashCode = (hashCode * 59) + this.AccountId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
        public List<OpenApiType> GetOpenApiTypes()
        {
            var types = new List<OpenApiType>();
            types.Add(new OpenApiType()
            {
                Name = "area_code",
                Property = "AreaCode",
                Type = "int",
                Value = AreaCode,
            });
            types.Add(new OpenApiType()
            {
                Name = "country",
                Property = "Country",
                Type = "string",
                Value = Country,
            });
            types.Add(new OpenApiType()
            {
                Name = "city",
                Property = "City",
                Type = "string",
                Value = City,
            });
            types.Add(new OpenApiType()
            {
                Name = "account_id",
                Property = "AccountId",
                Type = "string",
                Value = AccountId,
            });

            return types;
        }
    }

}
