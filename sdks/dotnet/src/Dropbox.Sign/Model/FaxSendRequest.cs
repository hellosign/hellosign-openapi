/*
 * Dropbox Sign API
 *
 * Dropbox Sign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Dropbox.Sign.Client.OpenAPIDateConverter;

namespace Dropbox.Sign.Model
{
    /// <summary>
    /// FaxSendRequest
    /// </summary>
    [DataContract(Name = "FaxSendRequest")]
    [JsonObject(ItemNullValueHandling = NullValueHandling.Ignore)]
    public partial class FaxSendRequest : IEquatable<FaxSendRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FaxSendRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FaxSendRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FaxSendRequest" /> class.
        /// </summary>
        /// <param name="recipient">Fax Send To Recipient (required).</param>
        /// <param name="sender">Fax Send From Sender (used only with fax number).</param>
        /// <param name="files">Fax File to Send.</param>
        /// <param name="fileUrls">Fax File URL to Send.</param>
        /// <param name="testMode">API Test Mode Setting (default to false).</param>
        /// <param name="coverPageTo">Fax Cover Page for Recipient.</param>
        /// <param name="coverPageFrom">Fax Cover Page for Sender.</param>
        /// <param name="coverPageMessage">Fax Cover Page Message.</param>
        /// <param name="title">Fax Title.</param>
        public FaxSendRequest(string recipient = default(string), string sender = default(string), List<System.IO.Stream> files = default(List<System.IO.Stream>), List<string> fileUrls = default(List<string>), bool testMode = false, string coverPageTo = default(string), string coverPageFrom = default(string), string coverPageMessage = default(string), string title = default(string))
        {

            // to ensure "recipient" is required (not null)
            if (recipient == null)
            {
                throw new ArgumentNullException("recipient is a required property for FaxSendRequest and cannot be null");
            }
            this.Recipient = recipient;
            this.Sender = sender;
            this.Files = files;
            this.FileUrls = fileUrls;
            this.TestMode = testMode;
            this.CoverPageTo = coverPageTo;
            this.CoverPageFrom = coverPageFrom;
            this.CoverPageMessage = coverPageMessage;
            this.Title = title;
        }

        /// <summary>
        /// Attempt to instantiate and hydrate a new instance of this class
        /// </summary>
        /// <param name="jsonData">String of JSON data representing target object</param>
        public static FaxSendRequest Init(string jsonData)
        {
            var obj = JsonConvert.DeserializeObject<FaxSendRequest>(jsonData);

            if (obj == null)
            {
                throw new Exception("Unable to deserialize JSON to instance of FaxSendRequest");
            }

            return obj;
        }

        /// <summary>
        /// Fax Send To Recipient
        /// </summary>
        /// <value>Fax Send To Recipient</value>
        /// <example>recipient@example.com</example>
        [DataMember(Name = "recipient", IsRequired = true, EmitDefaultValue = true)]
        public string Recipient { get; set; }

        /// <summary>
        /// Fax Send From Sender (used only with fax number)
        /// </summary>
        /// <value>Fax Send From Sender (used only with fax number)</value>
        /// <example>sender@example.com</example>
        [DataMember(Name = "sender", EmitDefaultValue = true)]
        public string Sender { get; set; }

        /// <summary>
        /// Fax File to Send
        /// </summary>
        /// <value>Fax File to Send</value>
        [DataMember(Name = "files", EmitDefaultValue = true)]
        public List<System.IO.Stream> Files { get; set; }

        /// <summary>
        /// Fax File URL to Send
        /// </summary>
        /// <value>Fax File URL to Send</value>
        [DataMember(Name = "file_urls", EmitDefaultValue = true)]
        public List<string> FileUrls { get; set; }

        /// <summary>
        /// API Test Mode Setting
        /// </summary>
        /// <value>API Test Mode Setting</value>
        [DataMember(Name = "test_mode", EmitDefaultValue = true)]
        public bool TestMode { get; set; }

        /// <summary>
        /// Fax Cover Page for Recipient
        /// </summary>
        /// <value>Fax Cover Page for Recipient</value>
        /// <example>Recipient Name</example>
        [DataMember(Name = "cover_page_to", EmitDefaultValue = true)]
        public string CoverPageTo { get; set; }

        /// <summary>
        /// Fax Cover Page for Sender
        /// </summary>
        /// <value>Fax Cover Page for Sender</value>
        /// <example>Sender Name</example>
        [DataMember(Name = "cover_page_from", EmitDefaultValue = true)]
        public string CoverPageFrom { get; set; }

        /// <summary>
        /// Fax Cover Page Message
        /// </summary>
        /// <value>Fax Cover Page Message</value>
        /// <example>Please find the attached documents.</example>
        [DataMember(Name = "cover_page_message", EmitDefaultValue = true)]
        public string CoverPageMessage { get; set; }

        /// <summary>
        /// Fax Title
        /// </summary>
        /// <value>Fax Title</value>
        /// <example>Fax Title</example>
        [DataMember(Name = "title", EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FaxSendRequest {\n");
            sb.Append("  Recipient: ").Append(Recipient).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("  FileUrls: ").Append(FileUrls).Append("\n");
            sb.Append("  TestMode: ").Append(TestMode).Append("\n");
            sb.Append("  CoverPageTo: ").Append(CoverPageTo).Append("\n");
            sb.Append("  CoverPageFrom: ").Append(CoverPageFrom).Append("\n");
            sb.Append("  CoverPageMessage: ").Append(CoverPageMessage).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FaxSendRequest);
        }

        /// <summary>
        /// Returns true if FaxSendRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of FaxSendRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FaxSendRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.Recipient == input.Recipient ||
                    (this.Recipient != null &&
                    this.Recipient.Equals(input.Recipient))
                ) &&
                (
                    this.Sender == input.Sender ||
                    (this.Sender != null &&
                    this.Sender.Equals(input.Sender))
                ) &&
                (
                    this.Files == input.Files ||
                    this.Files != null &&
                    input.Files != null &&
                    this.Files.SequenceEqual(input.Files)
                ) &&
                (
                    this.FileUrls == input.FileUrls ||
                    this.FileUrls != null &&
                    input.FileUrls != null &&
                    this.FileUrls.SequenceEqual(input.FileUrls)
                ) &&
                (
                    this.TestMode == input.TestMode ||
                    this.TestMode.Equals(input.TestMode)
                ) &&
                (
                    this.CoverPageTo == input.CoverPageTo ||
                    (this.CoverPageTo != null &&
                    this.CoverPageTo.Equals(input.CoverPageTo))
                ) &&
                (
                    this.CoverPageFrom == input.CoverPageFrom ||
                    (this.CoverPageFrom != null &&
                    this.CoverPageFrom.Equals(input.CoverPageFrom))
                ) &&
                (
                    this.CoverPageMessage == input.CoverPageMessage ||
                    (this.CoverPageMessage != null &&
                    this.CoverPageMessage.Equals(input.CoverPageMessage))
                ) &&
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Recipient != null)
                {
                    hashCode = (hashCode * 59) + this.Recipient.GetHashCode();
                }
                if (this.Sender != null)
                {
                    hashCode = (hashCode * 59) + this.Sender.GetHashCode();
                }
                if (this.Files != null)
                {
                    hashCode = (hashCode * 59) + this.Files.GetHashCode();
                }
                if (this.FileUrls != null)
                {
                    hashCode = (hashCode * 59) + this.FileUrls.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TestMode.GetHashCode();
                if (this.CoverPageTo != null)
                {
                    hashCode = (hashCode * 59) + this.CoverPageTo.GetHashCode();
                }
                if (this.CoverPageFrom != null)
                {
                    hashCode = (hashCode * 59) + this.CoverPageFrom.GetHashCode();
                }
                if (this.CoverPageMessage != null)
                {
                    hashCode = (hashCode * 59) + this.CoverPageMessage.GetHashCode();
                }
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
        public List<OpenApiType> GetOpenApiTypes()
        {
            var types = new List<OpenApiType>();
            types.Add(new OpenApiType()
            {
                Name = "recipient",
                Property = "Recipient",
                Type = "string",
                Value = Recipient,
            });
            types.Add(new OpenApiType()
            {
                Name = "sender",
                Property = "Sender",
                Type = "string",
                Value = Sender,
            });
            types.Add(new OpenApiType()
            {
                Name = "files",
                Property = "Files",
                Type = "List<System.IO.Stream>",
                Value = Files,
            });
            types.Add(new OpenApiType()
            {
                Name = "file_urls",
                Property = "FileUrls",
                Type = "List<string>",
                Value = FileUrls,
            });
            types.Add(new OpenApiType()
            {
                Name = "test_mode",
                Property = "TestMode",
                Type = "bool",
                Value = TestMode,
            });
            types.Add(new OpenApiType()
            {
                Name = "cover_page_to",
                Property = "CoverPageTo",
                Type = "string",
                Value = CoverPageTo,
            });
            types.Add(new OpenApiType()
            {
                Name = "cover_page_from",
                Property = "CoverPageFrom",
                Type = "string",
                Value = CoverPageFrom,
            });
            types.Add(new OpenApiType()
            {
                Name = "cover_page_message",
                Property = "CoverPageMessage",
                Type = "string",
                Value = CoverPageMessage,
            });
            types.Add(new OpenApiType()
            {
                Name = "title",
                Property = "Title",
                Type = "string",
                Value = Title,
            });

            return types;
        }
    }

}
