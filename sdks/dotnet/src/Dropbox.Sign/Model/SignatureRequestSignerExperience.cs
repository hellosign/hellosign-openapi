/*
 * Dropbox Sign API
 *
 * Dropbox Sign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Dropbox.Sign.Client.OpenAPIDateConverter;

namespace Dropbox.Sign.Model
{
    /// <summary>
    /// Response signer experience description
    /// </summary>
    [DataContract(Name = "SignatureRequestSignerExperience")]
    [JsonObject(ItemNullValueHandling = NullValueHandling.Ignore)]
    public partial class SignatureRequestSignerExperience : IEquatable<SignatureRequestSignerExperience>, IValidatableObject
    {
        /// <summary>
        /// Signer experience default
        /// </summary>
        /// <value>Signer experience default</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FormViewEnum
        {
            /// <summary>
            /// Enum Disabled for value: disabled
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled = 1,

            /// <summary>
            /// Enum Enabled for value: enabled
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled = 2,

            /// <summary>
            /// Enum EnabledByDefault for value: enabled_by_default
            /// </summary>
            [EnumMember(Value = "enabled_by_default")]
            EnabledByDefault = 3,

            /// <summary>
            /// Enum Forced for value: forced
            /// </summary>
            [EnumMember(Value = "forced")]
            Forced = 4
        }


        /// <summary>
        /// Signer experience default
        /// </summary>
        /// <value>Signer experience default</value>
        [DataMember(Name = "form_view", IsRequired = true, EmitDefaultValue = true)]
        public FormViewEnum FormView { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SignatureRequestSignerExperience" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SignatureRequestSignerExperience() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SignatureRequestSignerExperience" /> class.
        /// </summary>
        /// <param name="formView">Signer experience default (required).</param>
        public SignatureRequestSignerExperience(FormViewEnum formView = default(FormViewEnum))
        {

            this.FormView = formView;
        }

        /// <summary>
        /// Attempt to instantiate and hydrate a new instance of this class
        /// </summary>
        /// <param name="jsonData">String of JSON data representing target object</param>
        public static SignatureRequestSignerExperience Init(string jsonData)
        {
            var obj = JsonConvert.DeserializeObject<SignatureRequestSignerExperience>(jsonData);

            if (obj == null)
            {
                throw new Exception("Unable to deserialize JSON to instance of SignatureRequestSignerExperience");
            }

            return obj;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SignatureRequestSignerExperience {\n");
            sb.Append("  FormView: ").Append(FormView).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SignatureRequestSignerExperience);
        }

        /// <summary>
        /// Returns true if SignatureRequestSignerExperience instances are equal
        /// </summary>
        /// <param name="input">Instance of SignatureRequestSignerExperience to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SignatureRequestSignerExperience input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.FormView == input.FormView ||
                    this.FormView.Equals(input.FormView)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.FormView.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
        public List<OpenApiType> GetOpenApiTypes()
        {
            var types = new List<OpenApiType>();
            types.Add(new OpenApiType()
            {
                Name = "form_view",
                Property = "FormView",
                Type = "string",
                Value = FormView,
            });

            return types;
        }
    }

}
