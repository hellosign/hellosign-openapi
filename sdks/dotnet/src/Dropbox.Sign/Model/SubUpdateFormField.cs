/*
 * Dropbox Sign API
 *
 * Dropbox Sign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Dropbox.Sign.Client.OpenAPIDateConverter;

namespace Dropbox.Sign.Model
{
    /// <summary>
    /// SubUpdateFormField
    /// </summary>
    [DataContract(Name = "SubUpdateFormField")]
    [JsonObject(ItemNullValueHandling = NullValueHandling.Ignore)]
    public partial class SubUpdateFormField : IEquatable<SubUpdateFormField>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubUpdateFormField" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubUpdateFormField() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubUpdateFormField" /> class.
        /// </summary>
        /// <param name="apiId">The unique ID for this field. The endpoint will update an existing field with matching &#x60;api_id&#x60;, and warn you if no matches are found (required).</param>
        /// <param name="name">The new name of the field. If not passed the name will remain unchanged..</param>
        public SubUpdateFormField(string apiId = default(string), string name = default(string))
        {

            // to ensure "apiId" is required (not null)
            if (apiId == null)
            {
                throw new ArgumentNullException("apiId is a required property for SubUpdateFormField and cannot be null");
            }
            this.ApiId = apiId;
            this.Name = name;
        }

        /// <summary>
        /// Attempt to instantiate and hydrate a new instance of this class
        /// </summary>
        /// <param name="jsonData">String of JSON data representing target object</param>
        public static SubUpdateFormField Init(string jsonData)
        {
            var obj = JsonConvert.DeserializeObject<SubUpdateFormField>(jsonData);

            if (obj == null)
            {
                throw new Exception("Unable to deserialize JSON to instance of SubUpdateFormField");
            }

            return obj;
        }

        /// <summary>
        /// The unique ID for this field. The endpoint will update an existing field with matching &#x60;api_id&#x60;, and warn you if no matches are found
        /// </summary>
        /// <value>The unique ID for this field. The endpoint will update an existing field with matching &#x60;api_id&#x60;, and warn you if no matches are found</value>
        [DataMember(Name = "api_id", IsRequired = true, EmitDefaultValue = true)]
        public string ApiId { get; set; }

        /// <summary>
        /// The new name of the field. If not passed the name will remain unchanged.
        /// </summary>
        /// <value>The new name of the field. If not passed the name will remain unchanged.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubUpdateFormField {\n");
            sb.Append("  ApiId: ").Append(ApiId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubUpdateFormField);
        }

        /// <summary>
        /// Returns true if SubUpdateFormField instances are equal
        /// </summary>
        /// <param name="input">Instance of SubUpdateFormField to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubUpdateFormField input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.ApiId == input.ApiId ||
                    (this.ApiId != null &&
                    this.ApiId.Equals(input.ApiId))
                ) &&
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApiId != null)
                {
                    hashCode = (hashCode * 59) + this.ApiId.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
        public List<OpenApiType> GetOpenApiTypes()
        {
            var types = new List<OpenApiType>();
            types.Add(new OpenApiType()
            {
                Name = "api_id",
                Property = "ApiId",
                Type = "string",
                Value = ApiId,
            });
            types.Add(new OpenApiType()
            {
                Name = "name",
                Property = "Name",
                Type = "string",
                Value = Name,
            });

            return types;
        }
    }

}
