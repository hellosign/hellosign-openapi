/*
 * Dropbox Sign API
 *
 * Dropbox Sign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Dropbox.Sign.Client.OpenAPIDateConverter;

namespace Dropbox.Sign.Model
{
    /// <summary>
    /// _t__SignatureRequestResponseCustomField::DESCRIPTION
    /// </summary>
    [DataContract(Name = "SignatureRequestResponseCustomFieldBase")]
    [JsonConverter(typeof(JsonSubtypes), "Type")]
    [JsonSubtypes.KnownSubType(typeof(SignatureRequestResponseCustomFieldCheckbox), "checkbox")]
    [JsonSubtypes.KnownSubType(typeof(SignatureRequestResponseCustomFieldText), "text")]
    [JsonObject(ItemNullValueHandling = NullValueHandling.Ignore)]
    public partial class SignatureRequestResponseCustomFieldBase : IEquatable<SignatureRequestResponseCustomFieldBase>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SignatureRequestResponseCustomFieldBase" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SignatureRequestResponseCustomFieldBase() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SignatureRequestResponseCustomFieldBase" /> class.
        /// </summary>
        /// <param name="type">_t__SignatureRequestResponseCustomField::TYPE (required).</param>
        /// <param name="name">_t__SignatureRequestResponseCustomField::NAME (required).</param>
        /// <param name="required">_t__SignatureRequestResponseCustomField::REQUIRED.</param>
        /// <param name="apiId">_t__SignatureRequestResponseCustomField::API_ID.</param>
        /// <param name="editor">_t__SignatureRequestResponseCustomField::EDITOR.</param>
        public SignatureRequestResponseCustomFieldBase(string type = default(string), string name = default(string), bool required = default(bool), string apiId = default(string), string editor = default(string))
        {

            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for SignatureRequestResponseCustomFieldBase and cannot be null");
            }
            this.Type = type;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for SignatureRequestResponseCustomFieldBase and cannot be null");
            }
            this.Name = name;
            this.Required = required;
            this.ApiId = apiId;
            this.Editor = editor;
        }

        /// <summary>
        /// Attempt to instantiate and hydrate a new instance of this class
        /// </summary>
        /// <param name="jsonData">String of JSON data representing target object</param>
        public static SignatureRequestResponseCustomFieldBase Init(string jsonData)
        {
            var obj = JsonConvert.DeserializeObject<SignatureRequestResponseCustomFieldBase>(jsonData);

            if (obj == null)
            {
                throw new Exception("Unable to deserialize JSON to instance of SignatureRequestResponseCustomFieldBase");
            }

            return obj;
        }

        /// <summary>
        /// _t__SignatureRequestResponseCustomField::TYPE
        /// </summary>
        /// <value>_t__SignatureRequestResponseCustomField::TYPE</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponseCustomField::NAME
        /// </summary>
        /// <value>_t__SignatureRequestResponseCustomField::NAME</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponseCustomField::REQUIRED
        /// </summary>
        /// <value>_t__SignatureRequestResponseCustomField::REQUIRED</value>
        [DataMember(Name = "required", EmitDefaultValue = true)]
        public bool Required { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponseCustomField::API_ID
        /// </summary>
        /// <value>_t__SignatureRequestResponseCustomField::API_ID</value>
        [DataMember(Name = "api_id", EmitDefaultValue = true)]
        public string ApiId { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponseCustomField::EDITOR
        /// </summary>
        /// <value>_t__SignatureRequestResponseCustomField::EDITOR</value>
        [DataMember(Name = "editor", EmitDefaultValue = true)]
        public string Editor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SignatureRequestResponseCustomFieldBase {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  ApiId: ").Append(ApiId).Append("\n");
            sb.Append("  Editor: ").Append(Editor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SignatureRequestResponseCustomFieldBase);
        }

        /// <summary>
        /// Returns true if SignatureRequestResponseCustomFieldBase instances are equal
        /// </summary>
        /// <param name="input">Instance of SignatureRequestResponseCustomFieldBase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SignatureRequestResponseCustomFieldBase input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) &&
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) &&
                (
                    this.Required == input.Required ||
                    this.Required.Equals(input.Required)
                ) &&
                (
                    this.ApiId == input.ApiId ||
                    (this.ApiId != null &&
                    this.ApiId.Equals(input.ApiId))
                ) &&
                (
                    this.Editor == input.Editor ||
                    (this.Editor != null &&
                    this.Editor.Equals(input.Editor))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Required.GetHashCode();
                if (this.ApiId != null)
                {
                    hashCode = (hashCode * 59) + this.ApiId.GetHashCode();
                }
                if (this.Editor != null)
                {
                    hashCode = (hashCode * 59) + this.Editor.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
        public List<OpenApiType> GetOpenApiTypes()
        {
            var types = new List<OpenApiType>();
            types.Add(new OpenApiType()
            {
                Name = "type",
                Property = "Type",
                Type = "string",
                Value = Type,
            });
            types.Add(new OpenApiType()
            {
                Name = "name",
                Property = "Name",
                Type = "string",
                Value = Name,
            });
            types.Add(new OpenApiType()
            {
                Name = "required",
                Property = "Required",
                Type = "bool",
                Value = Required,
            });
            types.Add(new OpenApiType()
            {
                Name = "api_id",
                Property = "ApiId",
                Type = "string",
                Value = ApiId,
            });
            types.Add(new OpenApiType()
            {
                Name = "editor",
                Property = "Editor",
                Type = "string",
                Value = Editor,
            });

            return types;
        }
    }

}
