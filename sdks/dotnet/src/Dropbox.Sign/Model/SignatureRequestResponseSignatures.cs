/*
 * Dropbox Sign API
 *
 * Dropbox Sign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Dropbox.Sign.Client.OpenAPIDateConverter;

namespace Dropbox.Sign.Model
{
    /// <summary>
    /// _t__SignatureRequestResponseSignatures::DESCRIPTION
    /// </summary>
    [DataContract(Name = "SignatureRequestResponseSignatures")]
    [JsonObject(ItemNullValueHandling = NullValueHandling.Ignore)]
    public partial class SignatureRequestResponseSignatures : IEquatable<SignatureRequestResponseSignatures>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SignatureRequestResponseSignatures" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SignatureRequestResponseSignatures() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SignatureRequestResponseSignatures" /> class.
        /// </summary>
        /// <param name="signatureId">_t__SignatureRequestResponseSignatures::SIGNATURE_ID.</param>
        /// <param name="signerGroupGuid">_t__SignatureRequestResponseSignatures::SIGNER_GROUP_GUID.</param>
        /// <param name="signerEmailAddress">_t__SignatureRequestResponseSignatures::SIGNER_EMAIL_ADDRESS.</param>
        /// <param name="signerName">_t__SignatureRequestResponseSignatures::SIGNER_NAME.</param>
        /// <param name="signerRole">_t__SignatureRequestResponseSignatures::SIGNER_ROLE.</param>
        /// <param name="order">_t__SignatureRequestResponseSignatures::ORDER.</param>
        /// <param name="statusCode">_t__SignatureRequestResponseSignatures::STATUS_CODE.</param>
        /// <param name="declineReason">_t__SignatureRequestResponseSignatures::DECLINE_REASON.</param>
        /// <param name="signedAt">_t__SignatureRequestResponseSignatures::SIGNED_AT.</param>
        /// <param name="lastViewedAt">_t__SignatureRequestResponseSignatures::LAST_VIEWED_AT.</param>
        /// <param name="lastRemindedAt">_t__SignatureRequestResponseSignatures::LAST_REMINDED_AT.</param>
        /// <param name="hasPin">_t__SignatureRequestResponseSignatures::HAS_PIN.</param>
        /// <param name="hasSmsAuth">_t__SignatureRequestResponseSignatures::HAS_SMS_AUTH.</param>
        /// <param name="hasSmsDelivery">_t__SignatureRequestResponseSignatures::HAS_SMS_DELIVERY.</param>
        /// <param name="smsPhoneNumber">_t__SignatureRequestResponseSignatures::SMS_PHONE_NUMBER.</param>
        /// <param name="reassignedBy">_t__SignatureRequestResponseSignatures::REASSIGNED_BY.</param>
        /// <param name="reassignmentReason">_t__SignatureRequestResponseSignatures::REASSIGNMENT_REASON.</param>
        /// <param name="reassignedFrom">_t__SignatureRequestResponseSignatures::REASSIGNED_FROM.</param>
        /// <param name="error">_t__SignatureRequestResponseSignatures::ERROR.</param>
        public SignatureRequestResponseSignatures(string signatureId = default(string), string signerGroupGuid = default(string), string signerEmailAddress = default(string), string signerName = default(string), string signerRole = default(string), int? order = default(int?), string statusCode = default(string), string declineReason = default(string), int? signedAt = default(int?), int? lastViewedAt = default(int?), int? lastRemindedAt = default(int?), bool hasPin = default(bool), bool? hasSmsAuth = default(bool?), bool? hasSmsDelivery = default(bool?), string smsPhoneNumber = default(string), string reassignedBy = default(string), string reassignmentReason = default(string), string reassignedFrom = default(string), string error = default(string))
        {

            this.SignatureId = signatureId;
            this.SignerGroupGuid = signerGroupGuid;
            this.SignerEmailAddress = signerEmailAddress;
            this.SignerName = signerName;
            this.SignerRole = signerRole;
            this.Order = order;
            this.StatusCode = statusCode;
            this.DeclineReason = declineReason;
            this.SignedAt = signedAt;
            this.LastViewedAt = lastViewedAt;
            this.LastRemindedAt = lastRemindedAt;
            this.HasPin = hasPin;
            this.HasSmsAuth = hasSmsAuth;
            this.HasSmsDelivery = hasSmsDelivery;
            this.SmsPhoneNumber = smsPhoneNumber;
            this.ReassignedBy = reassignedBy;
            this.ReassignmentReason = reassignmentReason;
            this.ReassignedFrom = reassignedFrom;
            this.Error = error;
        }

        /// <summary>
        /// Attempt to instantiate and hydrate a new instance of this class
        /// </summary>
        /// <param name="jsonData">String of JSON data representing target object</param>
        public static SignatureRequestResponseSignatures Init(string jsonData)
        {
            var obj = JsonConvert.DeserializeObject<SignatureRequestResponseSignatures>(jsonData);

            if (obj == null)
            {
                throw new Exception("Unable to deserialize JSON to instance of SignatureRequestResponseSignatures");
            }

            return obj;
        }

        /// <summary>
        /// _t__SignatureRequestResponseSignatures::SIGNATURE_ID
        /// </summary>
        /// <value>_t__SignatureRequestResponseSignatures::SIGNATURE_ID</value>
        [DataMember(Name = "signature_id", EmitDefaultValue = true)]
        public string SignatureId { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponseSignatures::SIGNER_GROUP_GUID
        /// </summary>
        /// <value>_t__SignatureRequestResponseSignatures::SIGNER_GROUP_GUID</value>
        [DataMember(Name = "signer_group_guid", EmitDefaultValue = true)]
        public string SignerGroupGuid { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponseSignatures::SIGNER_EMAIL_ADDRESS
        /// </summary>
        /// <value>_t__SignatureRequestResponseSignatures::SIGNER_EMAIL_ADDRESS</value>
        [DataMember(Name = "signer_email_address", EmitDefaultValue = true)]
        public string SignerEmailAddress { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponseSignatures::SIGNER_NAME
        /// </summary>
        /// <value>_t__SignatureRequestResponseSignatures::SIGNER_NAME</value>
        [DataMember(Name = "signer_name", EmitDefaultValue = true)]
        public string SignerName { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponseSignatures::SIGNER_ROLE
        /// </summary>
        /// <value>_t__SignatureRequestResponseSignatures::SIGNER_ROLE</value>
        [DataMember(Name = "signer_role", EmitDefaultValue = true)]
        public string SignerRole { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponseSignatures::ORDER
        /// </summary>
        /// <value>_t__SignatureRequestResponseSignatures::ORDER</value>
        [DataMember(Name = "order", EmitDefaultValue = true)]
        public int? Order { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponseSignatures::STATUS_CODE
        /// </summary>
        /// <value>_t__SignatureRequestResponseSignatures::STATUS_CODE</value>
        [DataMember(Name = "status_code", EmitDefaultValue = true)]
        public string StatusCode { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponseSignatures::DECLINE_REASON
        /// </summary>
        /// <value>_t__SignatureRequestResponseSignatures::DECLINE_REASON</value>
        [DataMember(Name = "decline_reason", EmitDefaultValue = true)]
        public string DeclineReason { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponseSignatures::SIGNED_AT
        /// </summary>
        /// <value>_t__SignatureRequestResponseSignatures::SIGNED_AT</value>
        [DataMember(Name = "signed_at", EmitDefaultValue = true)]
        public int? SignedAt { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponseSignatures::LAST_VIEWED_AT
        /// </summary>
        /// <value>_t__SignatureRequestResponseSignatures::LAST_VIEWED_AT</value>
        [DataMember(Name = "last_viewed_at", EmitDefaultValue = true)]
        public int? LastViewedAt { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponseSignatures::LAST_REMINDED_AT
        /// </summary>
        /// <value>_t__SignatureRequestResponseSignatures::LAST_REMINDED_AT</value>
        [DataMember(Name = "last_reminded_at", EmitDefaultValue = true)]
        public int? LastRemindedAt { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponseSignatures::HAS_PIN
        /// </summary>
        /// <value>_t__SignatureRequestResponseSignatures::HAS_PIN</value>
        [DataMember(Name = "has_pin", EmitDefaultValue = true)]
        public bool HasPin { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponseSignatures::HAS_SMS_AUTH
        /// </summary>
        /// <value>_t__SignatureRequestResponseSignatures::HAS_SMS_AUTH</value>
        [DataMember(Name = "has_sms_auth", EmitDefaultValue = true)]
        public bool? HasSmsAuth { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponseSignatures::HAS_SMS_DELIVERY
        /// </summary>
        /// <value>_t__SignatureRequestResponseSignatures::HAS_SMS_DELIVERY</value>
        [DataMember(Name = "has_sms_delivery", EmitDefaultValue = true)]
        public bool? HasSmsDelivery { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponseSignatures::SMS_PHONE_NUMBER
        /// </summary>
        /// <value>_t__SignatureRequestResponseSignatures::SMS_PHONE_NUMBER</value>
        [DataMember(Name = "sms_phone_number", EmitDefaultValue = true)]
        public string SmsPhoneNumber { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponseSignatures::REASSIGNED_BY
        /// </summary>
        /// <value>_t__SignatureRequestResponseSignatures::REASSIGNED_BY</value>
        [DataMember(Name = "reassigned_by", EmitDefaultValue = true)]
        public string ReassignedBy { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponseSignatures::REASSIGNMENT_REASON
        /// </summary>
        /// <value>_t__SignatureRequestResponseSignatures::REASSIGNMENT_REASON</value>
        [DataMember(Name = "reassignment_reason", EmitDefaultValue = true)]
        public string ReassignmentReason { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponseSignatures::REASSIGNED_FROM
        /// </summary>
        /// <value>_t__SignatureRequestResponseSignatures::REASSIGNED_FROM</value>
        [DataMember(Name = "reassigned_from", EmitDefaultValue = true)]
        public string ReassignedFrom { get; set; }

        /// <summary>
        /// _t__SignatureRequestResponseSignatures::ERROR
        /// </summary>
        /// <value>_t__SignatureRequestResponseSignatures::ERROR</value>
        [DataMember(Name = "error", EmitDefaultValue = true)]
        public string Error { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SignatureRequestResponseSignatures {\n");
            sb.Append("  SignatureId: ").Append(SignatureId).Append("\n");
            sb.Append("  SignerGroupGuid: ").Append(SignerGroupGuid).Append("\n");
            sb.Append("  SignerEmailAddress: ").Append(SignerEmailAddress).Append("\n");
            sb.Append("  SignerName: ").Append(SignerName).Append("\n");
            sb.Append("  SignerRole: ").Append(SignerRole).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  DeclineReason: ").Append(DeclineReason).Append("\n");
            sb.Append("  SignedAt: ").Append(SignedAt).Append("\n");
            sb.Append("  LastViewedAt: ").Append(LastViewedAt).Append("\n");
            sb.Append("  LastRemindedAt: ").Append(LastRemindedAt).Append("\n");
            sb.Append("  HasPin: ").Append(HasPin).Append("\n");
            sb.Append("  HasSmsAuth: ").Append(HasSmsAuth).Append("\n");
            sb.Append("  HasSmsDelivery: ").Append(HasSmsDelivery).Append("\n");
            sb.Append("  SmsPhoneNumber: ").Append(SmsPhoneNumber).Append("\n");
            sb.Append("  ReassignedBy: ").Append(ReassignedBy).Append("\n");
            sb.Append("  ReassignmentReason: ").Append(ReassignmentReason).Append("\n");
            sb.Append("  ReassignedFrom: ").Append(ReassignedFrom).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SignatureRequestResponseSignatures);
        }

        /// <summary>
        /// Returns true if SignatureRequestResponseSignatures instances are equal
        /// </summary>
        /// <param name="input">Instance of SignatureRequestResponseSignatures to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SignatureRequestResponseSignatures input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.SignatureId == input.SignatureId ||
                    (this.SignatureId != null &&
                    this.SignatureId.Equals(input.SignatureId))
                ) &&
                (
                    this.SignerGroupGuid == input.SignerGroupGuid ||
                    (this.SignerGroupGuid != null &&
                    this.SignerGroupGuid.Equals(input.SignerGroupGuid))
                ) &&
                (
                    this.SignerEmailAddress == input.SignerEmailAddress ||
                    (this.SignerEmailAddress != null &&
                    this.SignerEmailAddress.Equals(input.SignerEmailAddress))
                ) &&
                (
                    this.SignerName == input.SignerName ||
                    (this.SignerName != null &&
                    this.SignerName.Equals(input.SignerName))
                ) &&
                (
                    this.SignerRole == input.SignerRole ||
                    (this.SignerRole != null &&
                    this.SignerRole.Equals(input.SignerRole))
                ) &&
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                ) &&
                (
                    this.StatusCode == input.StatusCode ||
                    (this.StatusCode != null &&
                    this.StatusCode.Equals(input.StatusCode))
                ) &&
                (
                    this.DeclineReason == input.DeclineReason ||
                    (this.DeclineReason != null &&
                    this.DeclineReason.Equals(input.DeclineReason))
                ) &&
                (
                    this.SignedAt == input.SignedAt ||
                    (this.SignedAt != null &&
                    this.SignedAt.Equals(input.SignedAt))
                ) &&
                (
                    this.LastViewedAt == input.LastViewedAt ||
                    (this.LastViewedAt != null &&
                    this.LastViewedAt.Equals(input.LastViewedAt))
                ) &&
                (
                    this.LastRemindedAt == input.LastRemindedAt ||
                    (this.LastRemindedAt != null &&
                    this.LastRemindedAt.Equals(input.LastRemindedAt))
                ) &&
                (
                    this.HasPin == input.HasPin ||
                    this.HasPin.Equals(input.HasPin)
                ) &&
                (
                    this.HasSmsAuth == input.HasSmsAuth ||
                    (this.HasSmsAuth != null &&
                    this.HasSmsAuth.Equals(input.HasSmsAuth))
                ) &&
                (
                    this.HasSmsDelivery == input.HasSmsDelivery ||
                    (this.HasSmsDelivery != null &&
                    this.HasSmsDelivery.Equals(input.HasSmsDelivery))
                ) &&
                (
                    this.SmsPhoneNumber == input.SmsPhoneNumber ||
                    (this.SmsPhoneNumber != null &&
                    this.SmsPhoneNumber.Equals(input.SmsPhoneNumber))
                ) &&
                (
                    this.ReassignedBy == input.ReassignedBy ||
                    (this.ReassignedBy != null &&
                    this.ReassignedBy.Equals(input.ReassignedBy))
                ) &&
                (
                    this.ReassignmentReason == input.ReassignmentReason ||
                    (this.ReassignmentReason != null &&
                    this.ReassignmentReason.Equals(input.ReassignmentReason))
                ) &&
                (
                    this.ReassignedFrom == input.ReassignedFrom ||
                    (this.ReassignedFrom != null &&
                    this.ReassignedFrom.Equals(input.ReassignedFrom))
                ) &&
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SignatureId != null)
                {
                    hashCode = (hashCode * 59) + this.SignatureId.GetHashCode();
                }
                if (this.SignerGroupGuid != null)
                {
                    hashCode = (hashCode * 59) + this.SignerGroupGuid.GetHashCode();
                }
                if (this.SignerEmailAddress != null)
                {
                    hashCode = (hashCode * 59) + this.SignerEmailAddress.GetHashCode();
                }
                if (this.SignerName != null)
                {
                    hashCode = (hashCode * 59) + this.SignerName.GetHashCode();
                }
                if (this.SignerRole != null)
                {
                    hashCode = (hashCode * 59) + this.SignerRole.GetHashCode();
                }
                if (this.Order != null)
                {
                    hashCode = (hashCode * 59) + this.Order.GetHashCode();
                }
                if (this.StatusCode != null)
                {
                    hashCode = (hashCode * 59) + this.StatusCode.GetHashCode();
                }
                if (this.DeclineReason != null)
                {
                    hashCode = (hashCode * 59) + this.DeclineReason.GetHashCode();
                }
                if (this.SignedAt != null)
                {
                    hashCode = (hashCode * 59) + this.SignedAt.GetHashCode();
                }
                if (this.LastViewedAt != null)
                {
                    hashCode = (hashCode * 59) + this.LastViewedAt.GetHashCode();
                }
                if (this.LastRemindedAt != null)
                {
                    hashCode = (hashCode * 59) + this.LastRemindedAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HasPin.GetHashCode();
                if (this.HasSmsAuth != null)
                {
                    hashCode = (hashCode * 59) + this.HasSmsAuth.GetHashCode();
                }
                if (this.HasSmsDelivery != null)
                {
                    hashCode = (hashCode * 59) + this.HasSmsDelivery.GetHashCode();
                }
                if (this.SmsPhoneNumber != null)
                {
                    hashCode = (hashCode * 59) + this.SmsPhoneNumber.GetHashCode();
                }
                if (this.ReassignedBy != null)
                {
                    hashCode = (hashCode * 59) + this.ReassignedBy.GetHashCode();
                }
                if (this.ReassignmentReason != null)
                {
                    hashCode = (hashCode * 59) + this.ReassignmentReason.GetHashCode();
                }
                if (this.ReassignedFrom != null)
                {
                    hashCode = (hashCode * 59) + this.ReassignedFrom.GetHashCode();
                }
                if (this.Error != null)
                {
                    hashCode = (hashCode * 59) + this.Error.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
        public List<OpenApiType> GetOpenApiTypes()
        {
            var types = new List<OpenApiType>();
            types.Add(new OpenApiType()
            {
                Name = "signature_id",
                Property = "SignatureId",
                Type = "string",
                Value = SignatureId,
            });
            types.Add(new OpenApiType()
            {
                Name = "signer_group_guid",
                Property = "SignerGroupGuid",
                Type = "string",
                Value = SignerGroupGuid,
            });
            types.Add(new OpenApiType()
            {
                Name = "signer_email_address",
                Property = "SignerEmailAddress",
                Type = "string",
                Value = SignerEmailAddress,
            });
            types.Add(new OpenApiType()
            {
                Name = "signer_name",
                Property = "SignerName",
                Type = "string",
                Value = SignerName,
            });
            types.Add(new OpenApiType()
            {
                Name = "signer_role",
                Property = "SignerRole",
                Type = "string",
                Value = SignerRole,
            });
            types.Add(new OpenApiType()
            {
                Name = "order",
                Property = "Order",
                Type = "int?",
                Value = Order,
            });
            types.Add(new OpenApiType()
            {
                Name = "status_code",
                Property = "StatusCode",
                Type = "string",
                Value = StatusCode,
            });
            types.Add(new OpenApiType()
            {
                Name = "decline_reason",
                Property = "DeclineReason",
                Type = "string",
                Value = DeclineReason,
            });
            types.Add(new OpenApiType()
            {
                Name = "signed_at",
                Property = "SignedAt",
                Type = "int?",
                Value = SignedAt,
            });
            types.Add(new OpenApiType()
            {
                Name = "last_viewed_at",
                Property = "LastViewedAt",
                Type = "int?",
                Value = LastViewedAt,
            });
            types.Add(new OpenApiType()
            {
                Name = "last_reminded_at",
                Property = "LastRemindedAt",
                Type = "int?",
                Value = LastRemindedAt,
            });
            types.Add(new OpenApiType()
            {
                Name = "has_pin",
                Property = "HasPin",
                Type = "bool",
                Value = HasPin,
            });
            types.Add(new OpenApiType()
            {
                Name = "has_sms_auth",
                Property = "HasSmsAuth",
                Type = "bool?",
                Value = HasSmsAuth,
            });
            types.Add(new OpenApiType()
            {
                Name = "has_sms_delivery",
                Property = "HasSmsDelivery",
                Type = "bool?",
                Value = HasSmsDelivery,
            });
            types.Add(new OpenApiType()
            {
                Name = "sms_phone_number",
                Property = "SmsPhoneNumber",
                Type = "string",
                Value = SmsPhoneNumber,
            });
            types.Add(new OpenApiType()
            {
                Name = "reassigned_by",
                Property = "ReassignedBy",
                Type = "string",
                Value = ReassignedBy,
            });
            types.Add(new OpenApiType()
            {
                Name = "reassignment_reason",
                Property = "ReassignmentReason",
                Type = "string",
                Value = ReassignmentReason,
            });
            types.Add(new OpenApiType()
            {
                Name = "reassigned_from",
                Property = "ReassignedFrom",
                Type = "string",
                Value = ReassignedFrom,
            });
            types.Add(new OpenApiType()
            {
                Name = "error",
                Property = "Error",
                Type = "string",
                Value = Error,
            });

            return types;
        }
    }

}
