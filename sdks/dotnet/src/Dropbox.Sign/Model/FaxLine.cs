/*
 * Dropbox Sign API
 *
 * Dropbox Sign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Dropbox.Sign.Client.OpenAPIDateConverter;

namespace Dropbox.Sign.Model
{
    /// <summary>
    /// FaxLine
    /// </summary>
    [DataContract(Name = "FaxLine")]
    [JsonObject(ItemNullValueHandling = NullValueHandling.Ignore)]
    public partial class FaxLine : IOpenApiTyped, IEquatable<FaxLine>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FaxLine" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FaxLine() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FaxLine" /> class.
        /// </summary>
        /// <param name="number">Number.</param>
        /// <param name="createdAt">Created at.</param>
        /// <param name="updatedAt">Updated at.</param>
        /// <param name="accounts">accounts.</param>
        public FaxLine(string number = default(string), string createdAt = default(string), string updatedAt = default(string), List<AccountResponse> accounts = default(List<AccountResponse>))
        {

            this.Number = number;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.Accounts = accounts;
        }

        /// <summary>
        /// Attempt to instantiate and hydrate a new instance of this class
        /// </summary>
        /// <param name="jsonData">String of JSON data representing target object</param>
        public static FaxLine Init(string jsonData)
        {
            var obj = JsonConvert.DeserializeObject<FaxLine>(jsonData);

            if (obj == null)
            {
                throw new Exception("Unable to deserialize JSON to instance of FaxLine");
            }

            return obj;
        }

        /// <summary>
        /// Number
        /// </summary>
        /// <value>Number</value>
        [DataMember(Name = "number", EmitDefaultValue = true)]
        public string Number { get; set; }

        /// <summary>
        /// Created at
        /// </summary>
        /// <value>Created at</value>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Updated at
        /// </summary>
        /// <value>Updated at</value>
        [DataMember(Name = "updated_at", EmitDefaultValue = true)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Accounts
        /// </summary>
        [DataMember(Name = "accounts", EmitDefaultValue = true)]
        public List<AccountResponse> Accounts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FaxLine {\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Accounts: ").Append(Accounts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FaxLine);
        }

        /// <summary>
        /// Returns true if FaxLine instances are equal
        /// </summary>
        /// <param name="input">Instance of FaxLine to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FaxLine input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) &&
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) &&
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) &&
                (
                    this.Accounts == input.Accounts ||
                    this.Accounts != null &&
                    input.Accounts != null &&
                    this.Accounts.SequenceEqual(input.Accounts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Number != null)
                {
                    hashCode = (hashCode * 59) + this.Number.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.Accounts != null)
                {
                    hashCode = (hashCode * 59) + this.Accounts.GetHashCode();
                }
                return hashCode;
            }
        }

        public List<OpenApiType> GetOpenApiTypes()
        {
            var types = new List<OpenApiType>();
            types.Add(new OpenApiType()
            {
                Name = "number",
                Property = "Number",
                Type = "string",
                Value = Number,
            });
            types.Add(new OpenApiType()
            {
                Name = "created_at",
                Property = "CreatedAt",
                Type = "string",
                Value = CreatedAt,
            });
            types.Add(new OpenApiType()
            {
                Name = "updated_at",
                Property = "UpdatedAt",
                Type = "string",
                Value = UpdatedAt,
            });
            types.Add(new OpenApiType()
            {
                Name = "accounts",
                Property = "Accounts",
                Type = "List<AccountResponse>",
                Value = Accounts,
            });

            return types;
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
