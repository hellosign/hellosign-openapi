<?php
/**
 * UnclaimedDraftEditAndResendRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @see     https://openapi-generator.tech
 */

/**
 * Dropbox Sign API
 *
 * Dropbox Sign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dropbox\Sign\Model;

use ArrayAccess;
use Dropbox\Sign\ObjectSerializer;
use InvalidArgumentException;
use JsonSerializable;
use ReturnTypeWillChange;

/**
 * UnclaimedDraftEditAndResendRequest Class Doc Comment
 *
 * @category Class
 * @see     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UnclaimedDraftEditAndResendRequest implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'UnclaimedDraftEditAndResendRequest';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'client_id' => 'string',
        'editor_options' => '\Dropbox\Sign\Model\SubEditorOptions',
        'is_for_embedded_signing' => 'bool',
        'requester_email_address' => 'string',
        'requesting_redirect_url' => 'string',
        'show_progress_stepper' => 'bool',
        'signing_redirect_url' => 'string',
        'test_mode' => 'bool',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'client_id' => null,
        'editor_options' => null,
        'is_for_embedded_signing' => null,
        'requester_email_address' => 'email',
        'requesting_redirect_url' => null,
        'show_progress_stepper' => null,
        'signing_redirect_url' => null,
        'test_mode' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'client_id' => false,
        'editor_options' => false,
        'is_for_embedded_signing' => false,
        'requester_email_address' => false,
        'requesting_redirect_url' => false,
        'show_progress_stepper' => false,
        'signing_redirect_url' => false,
        'test_mode' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'client_id' => 'client_id',
        'editor_options' => 'editor_options',
        'is_for_embedded_signing' => 'is_for_embedded_signing',
        'requester_email_address' => 'requester_email_address',
        'requesting_redirect_url' => 'requesting_redirect_url',
        'show_progress_stepper' => 'show_progress_stepper',
        'signing_redirect_url' => 'signing_redirect_url',
        'test_mode' => 'test_mode',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'client_id' => 'setClientId',
        'editor_options' => 'setEditorOptions',
        'is_for_embedded_signing' => 'setIsForEmbeddedSigning',
        'requester_email_address' => 'setRequesterEmailAddress',
        'requesting_redirect_url' => 'setRequestingRedirectUrl',
        'show_progress_stepper' => 'setShowProgressStepper',
        'signing_redirect_url' => 'setSigningRedirectUrl',
        'test_mode' => 'setTestMode',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'client_id' => 'getClientId',
        'editor_options' => 'getEditorOptions',
        'is_for_embedded_signing' => 'getIsForEmbeddedSigning',
        'requester_email_address' => 'getRequesterEmailAddress',
        'requesting_redirect_url' => 'getRequestingRedirectUrl',
        'show_progress_stepper' => 'getShowProgressStepper',
        'signing_redirect_url' => 'getSigningRedirectUrl',
        'test_mode' => 'getTestMode',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('client_id', $data ?? [], null);
        $this->setIfExists('editor_options', $data ?? [], null);
        $this->setIfExists('is_for_embedded_signing', $data ?? [], null);
        $this->setIfExists('requester_email_address', $data ?? [], null);
        $this->setIfExists('requesting_redirect_url', $data ?? [], null);
        $this->setIfExists('show_progress_stepper', $data ?? [], true);
        $this->setIfExists('signing_redirect_url', $data ?? [], null);
        $this->setIfExists('test_mode', $data ?? [], false);
    }

    /**
     * @deprecated use ::init()
     */
    public static function fromArray(array $data): UnclaimedDraftEditAndResendRequest
    {
        return self::init($data);
    }

    /**
     * Attempt to instantiate and hydrate a new instance of this class
     */
    public static function init(array $data): UnclaimedDraftEditAndResendRequest
    {
        /** @var UnclaimedDraftEditAndResendRequest */
        return ObjectSerializer::deserialize(
            $data,
            UnclaimedDraftEditAndResendRequest::class,
        );
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array
     *
     * @param string|int|object|array|mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['client_id'] === null) {
            $invalidProperties[] = "'client_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets client_id
     *
     * @return string
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string $client_id Client id of the app used to create the draft. Used to apply the branding and callback url defined for the app.
     *
     * @return self
     */
    public function setClientId(string $client_id)
    {
        if (is_null($client_id)) {
            throw new InvalidArgumentException('non-nullable client_id cannot be null');
        }
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets editor_options
     *
     * @return SubEditorOptions|null
     */
    public function getEditorOptions()
    {
        return $this->container['editor_options'];
    }

    /**
     * Sets editor_options
     *
     * @param SubEditorOptions|null $editor_options editor_options
     *
     * @return self
     */
    public function setEditorOptions(?SubEditorOptions $editor_options)
    {
        if (is_null($editor_options)) {
            throw new InvalidArgumentException('non-nullable editor_options cannot be null');
        }
        $this->container['editor_options'] = $editor_options;

        return $this;
    }

    /**
     * Gets is_for_embedded_signing
     *
     * @return bool|null
     */
    public function getIsForEmbeddedSigning()
    {
        return $this->container['is_for_embedded_signing'];
    }

    /**
     * Sets is_for_embedded_signing
     *
     * @param bool|null $is_for_embedded_signing the request created from this draft will also be signable in embedded mode if set to `true`
     *
     * @return self
     */
    public function setIsForEmbeddedSigning(?bool $is_for_embedded_signing)
    {
        if (is_null($is_for_embedded_signing)) {
            throw new InvalidArgumentException('non-nullable is_for_embedded_signing cannot be null');
        }
        $this->container['is_for_embedded_signing'] = $is_for_embedded_signing;

        return $this;
    }

    /**
     * Gets requester_email_address
     *
     * @return string|null
     */
    public function getRequesterEmailAddress()
    {
        return $this->container['requester_email_address'];
    }

    /**
     * Sets requester_email_address
     *
     * @param string|null $requester_email_address The email address of the user that should be designated as the requester of this draft. If not set, original requester's email address will be used.
     *
     * @return self
     */
    public function setRequesterEmailAddress(?string $requester_email_address)
    {
        if (is_null($requester_email_address)) {
            throw new InvalidArgumentException('non-nullable requester_email_address cannot be null');
        }
        $this->container['requester_email_address'] = $requester_email_address;

        return $this;
    }

    /**
     * Gets requesting_redirect_url
     *
     * @return string|null
     */
    public function getRequestingRedirectUrl()
    {
        return $this->container['requesting_redirect_url'];
    }

    /**
     * Sets requesting_redirect_url
     *
     * @param string|null $requesting_redirect_url the URL you want signers redirected to after they successfully request a signature
     *
     * @return self
     */
    public function setRequestingRedirectUrl(?string $requesting_redirect_url)
    {
        if (is_null($requesting_redirect_url)) {
            throw new InvalidArgumentException('non-nullable requesting_redirect_url cannot be null');
        }
        $this->container['requesting_redirect_url'] = $requesting_redirect_url;

        return $this;
    }

    /**
     * Gets show_progress_stepper
     *
     * @return bool|null
     */
    public function getShowProgressStepper()
    {
        return $this->container['show_progress_stepper'];
    }

    /**
     * Sets show_progress_stepper
     *
     * @param bool|null $show_progress_stepper when only one step remains in the signature request process and this parameter is set to `false` then the progress stepper will be hidden
     *
     * @return self
     */
    public function setShowProgressStepper(?bool $show_progress_stepper)
    {
        if (is_null($show_progress_stepper)) {
            throw new InvalidArgumentException('non-nullable show_progress_stepper cannot be null');
        }
        $this->container['show_progress_stepper'] = $show_progress_stepper;

        return $this;
    }

    /**
     * Gets signing_redirect_url
     *
     * @return string|null
     */
    public function getSigningRedirectUrl()
    {
        return $this->container['signing_redirect_url'];
    }

    /**
     * Sets signing_redirect_url
     *
     * @param string|null $signing_redirect_url the URL you want signers redirected to after they successfully sign
     *
     * @return self
     */
    public function setSigningRedirectUrl(?string $signing_redirect_url)
    {
        if (is_null($signing_redirect_url)) {
            throw new InvalidArgumentException('non-nullable signing_redirect_url cannot be null');
        }
        $this->container['signing_redirect_url'] = $signing_redirect_url;

        return $this;
    }

    /**
     * Gets test_mode
     *
     * @return bool|null
     */
    public function getTestMode()
    {
        return $this->container['test_mode'];
    }

    /**
     * Sets test_mode
     *
     * @param bool|null $test_mode Whether this is a test, the signature request created from this draft will not be legally binding if set to `true`. Defaults to `false`.
     *
     * @return self
     */
    public function setTestMode(?bool $test_mode)
    {
        if (is_null($test_mode)) {
            throw new InvalidArgumentException('non-nullable test_mode cannot be null');
        }
        $this->container['test_mode'] = $test_mode;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    #[ReturnTypeWillChange]
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     */
    #[ReturnTypeWillChange]
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    #[ReturnTypeWillChange]
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_UNESCAPED_SLASHES
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
