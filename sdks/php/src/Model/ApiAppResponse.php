<?php
/**
 * ApiAppResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @see     https://openapi-generator.tech
 */

/**
 * Dropbox Sign API
 *
 * Dropbox Sign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dropbox\Sign\Model;

use ArrayAccess;
use Dropbox\Sign\ObjectSerializer;
use InvalidArgumentException;
use JsonSerializable;
use ReturnTypeWillChange;

/**
 * ApiAppResponse Class Doc Comment
 *
 * @category Class
 * @description Contains information about an API App.
 * @see     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ApiAppResponse implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'ApiAppResponse';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'callback_url' => 'string',
        'client_id' => 'string',
        'created_at' => 'int',
        'domains' => 'string[]',
        'name' => 'string',
        'is_approved' => 'bool',
        'oauth' => '\Dropbox\Sign\Model\ApiAppResponseOAuth',
        'options' => '\Dropbox\Sign\Model\ApiAppResponseOptions',
        'owner_account' => '\Dropbox\Sign\Model\ApiAppResponseOwnerAccount',
        'white_labeling_options' => '\Dropbox\Sign\Model\ApiAppResponseWhiteLabelingOptions',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'callback_url' => null,
        'client_id' => null,
        'created_at' => null,
        'domains' => null,
        'name' => null,
        'is_approved' => null,
        'oauth' => null,
        'options' => null,
        'owner_account' => null,
        'white_labeling_options' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'callback_url' => true,
        'client_id' => false,
        'created_at' => false,
        'domains' => false,
        'name' => false,
        'is_approved' => false,
        'oauth' => true,
        'options' => true,
        'owner_account' => false,
        'white_labeling_options' => true,
    ];

    /**
     * If a nullable field gets set to null, insert it here
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'callback_url' => 'callback_url',
        'client_id' => 'client_id',
        'created_at' => 'created_at',
        'domains' => 'domains',
        'name' => 'name',
        'is_approved' => 'is_approved',
        'oauth' => 'oauth',
        'options' => 'options',
        'owner_account' => 'owner_account',
        'white_labeling_options' => 'white_labeling_options',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'callback_url' => 'setCallbackUrl',
        'client_id' => 'setClientId',
        'created_at' => 'setCreatedAt',
        'domains' => 'setDomains',
        'name' => 'setName',
        'is_approved' => 'setIsApproved',
        'oauth' => 'setOauth',
        'options' => 'setOptions',
        'owner_account' => 'setOwnerAccount',
        'white_labeling_options' => 'setWhiteLabelingOptions',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'callback_url' => 'getCallbackUrl',
        'client_id' => 'getClientId',
        'created_at' => 'getCreatedAt',
        'domains' => 'getDomains',
        'name' => 'getName',
        'is_approved' => 'getIsApproved',
        'oauth' => 'getOauth',
        'options' => 'getOptions',
        'owner_account' => 'getOwnerAccount',
        'white_labeling_options' => 'getWhiteLabelingOptions',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('callback_url', $data ?? [], null);
        $this->setIfExists('client_id', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('domains', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('is_approved', $data ?? [], null);
        $this->setIfExists('oauth', $data ?? [], null);
        $this->setIfExists('options', $data ?? [], null);
        $this->setIfExists('owner_account', $data ?? [], null);
        $this->setIfExists('white_labeling_options', $data ?? [], null);
    }

    /**
     * @deprecated use ::init()
     */
    public static function fromArray(array $data): ApiAppResponse
    {
        return self::init($data);
    }

    /**
     * Attempt to instantiate and hydrate a new instance of this class
     */
    public static function init(array $data): ApiAppResponse
    {
        /** @var ApiAppResponse */
        return ObjectSerializer::deserialize(
            $data,
            ApiAppResponse::class,
        );
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array
     *
     * @param string|int|object|array|mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets callback_url
     *
     * @return string|null
     */
    public function getCallbackUrl()
    {
        return $this->container['callback_url'];
    }

    /**
     * Sets callback_url
     *
     * @param string|null $callback_url The app's callback URL (for events)
     *
     * @return self
     */
    public function setCallbackUrl(?string $callback_url)
    {
        if (is_null($callback_url)) {
            array_push($this->openAPINullablesSetToNull, 'callback_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('callback_url', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['callback_url'] = $callback_url;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string|null
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string|null $client_id The app's client id
     *
     * @return self
     */
    public function setClientId(?string $client_id)
    {
        if (is_null($client_id)) {
            throw new InvalidArgumentException('non-nullable client_id cannot be null');
        }
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return int|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param int|null $created_at The time that the app was created
     *
     * @return self
     */
    public function setCreatedAt(?int $created_at)
    {
        if (is_null($created_at)) {
            throw new InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets domains
     *
     * @return string[]|null
     */
    public function getDomains()
    {
        return $this->container['domains'];
    }

    /**
     * Sets domains
     *
     * @param string[]|null $domains The domain name(s) associated with the app
     *
     * @return self
     */
    public function setDomains(?array $domains)
    {
        if (is_null($domains)) {
            throw new InvalidArgumentException('non-nullable domains cannot be null');
        }
        $this->container['domains'] = $domains;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the app
     *
     * @return self
     */
    public function setName(?string $name)
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets is_approved
     *
     * @return bool|null
     */
    public function getIsApproved()
    {
        return $this->container['is_approved'];
    }

    /**
     * Sets is_approved
     *
     * @param bool|null $is_approved Boolean to indicate if the app has been approved
     *
     * @return self
     */
    public function setIsApproved(?bool $is_approved)
    {
        if (is_null($is_approved)) {
            throw new InvalidArgumentException('non-nullable is_approved cannot be null');
        }
        $this->container['is_approved'] = $is_approved;

        return $this;
    }

    /**
     * Gets oauth
     *
     * @return ApiAppResponseOAuth|null
     */
    public function getOauth()
    {
        return $this->container['oauth'];
    }

    /**
     * Sets oauth
     *
     * @param ApiAppResponseOAuth|null $oauth oauth
     *
     * @return self
     */
    public function setOauth(?ApiAppResponseOAuth $oauth)
    {
        if (is_null($oauth)) {
            array_push($this->openAPINullablesSetToNull, 'oauth');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('oauth', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['oauth'] = $oauth;

        return $this;
    }

    /**
     * Gets options
     *
     * @return ApiAppResponseOptions|null
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param ApiAppResponseOptions|null $options options
     *
     * @return self
     */
    public function setOptions(?ApiAppResponseOptions $options)
    {
        if (is_null($options)) {
            array_push($this->openAPINullablesSetToNull, 'options');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('options', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets owner_account
     *
     * @return ApiAppResponseOwnerAccount|null
     */
    public function getOwnerAccount()
    {
        return $this->container['owner_account'];
    }

    /**
     * Sets owner_account
     *
     * @param ApiAppResponseOwnerAccount|null $owner_account owner_account
     *
     * @return self
     */
    public function setOwnerAccount(?ApiAppResponseOwnerAccount $owner_account)
    {
        if (is_null($owner_account)) {
            throw new InvalidArgumentException('non-nullable owner_account cannot be null');
        }
        $this->container['owner_account'] = $owner_account;

        return $this;
    }

    /**
     * Gets white_labeling_options
     *
     * @return ApiAppResponseWhiteLabelingOptions|null
     */
    public function getWhiteLabelingOptions()
    {
        return $this->container['white_labeling_options'];
    }

    /**
     * Sets white_labeling_options
     *
     * @param ApiAppResponseWhiteLabelingOptions|null $white_labeling_options white_labeling_options
     *
     * @return self
     */
    public function setWhiteLabelingOptions(?ApiAppResponseWhiteLabelingOptions $white_labeling_options)
    {
        if (is_null($white_labeling_options)) {
            array_push($this->openAPINullablesSetToNull, 'white_labeling_options');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('white_labeling_options', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['white_labeling_options'] = $white_labeling_options;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    #[ReturnTypeWillChange]
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     */
    #[ReturnTypeWillChange]
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    #[ReturnTypeWillChange]
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_UNESCAPED_SLASHES
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
