<?php
/**
 * SignatureRequestResponseSignatures
 *
 * PHP version 7.4
 *
 * @category Class
 * @see     https://openapi-generator.tech
 */

/**
 * Dropbox Sign API
 *
 * Dropbox Sign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dropbox\Sign\Model;

use ArrayAccess;
use Dropbox\Sign\ObjectSerializer;
use InvalidArgumentException;
use JsonSerializable;
use ReturnTypeWillChange;

/**
 * SignatureRequestResponseSignatures Class Doc Comment
 *
 * @category Class
 * @description An array of signature objects, 1 for each signer.
 * @see     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SignatureRequestResponseSignatures implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'SignatureRequestResponseSignatures';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'signature_id' => 'string',
        'signer_group_guid' => 'string',
        'signer_email_address' => 'string',
        'signer_name' => 'string',
        'signer_role' => 'string',
        'order' => 'int',
        'status_code' => 'string',
        'decline_reason' => 'string',
        'signed_at' => 'int',
        'last_viewed_at' => 'int',
        'last_reminded_at' => 'int',
        'has_pin' => 'bool',
        'has_sms_auth' => 'bool',
        'has_sms_delivery' => 'bool',
        'sms_phone_number' => 'string',
        'reassigned_by' => 'string',
        'reassignment_reason' => 'string',
        'reassigned_from' => 'string',
        'error' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'signature_id' => null,
        'signer_group_guid' => null,
        'signer_email_address' => null,
        'signer_name' => null,
        'signer_role' => null,
        'order' => null,
        'status_code' => null,
        'decline_reason' => null,
        'signed_at' => null,
        'last_viewed_at' => null,
        'last_reminded_at' => null,
        'has_pin' => null,
        'has_sms_auth' => null,
        'has_sms_delivery' => null,
        'sms_phone_number' => null,
        'reassigned_by' => null,
        'reassignment_reason' => null,
        'reassigned_from' => null,
        'error' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'signature_id' => false,
        'signer_group_guid' => true,
        'signer_email_address' => false,
        'signer_name' => true,
        'signer_role' => true,
        'order' => true,
        'status_code' => false,
        'decline_reason' => true,
        'signed_at' => true,
        'last_viewed_at' => true,
        'last_reminded_at' => true,
        'has_pin' => false,
        'has_sms_auth' => true,
        'has_sms_delivery' => true,
        'sms_phone_number' => true,
        'reassigned_by' => true,
        'reassignment_reason' => true,
        'reassigned_from' => true,
        'error' => true,
    ];

    /**
     * If a nullable field gets set to null, insert it here
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'signature_id' => 'signature_id',
        'signer_group_guid' => 'signer_group_guid',
        'signer_email_address' => 'signer_email_address',
        'signer_name' => 'signer_name',
        'signer_role' => 'signer_role',
        'order' => 'order',
        'status_code' => 'status_code',
        'decline_reason' => 'decline_reason',
        'signed_at' => 'signed_at',
        'last_viewed_at' => 'last_viewed_at',
        'last_reminded_at' => 'last_reminded_at',
        'has_pin' => 'has_pin',
        'has_sms_auth' => 'has_sms_auth',
        'has_sms_delivery' => 'has_sms_delivery',
        'sms_phone_number' => 'sms_phone_number',
        'reassigned_by' => 'reassigned_by',
        'reassignment_reason' => 'reassignment_reason',
        'reassigned_from' => 'reassigned_from',
        'error' => 'error',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'signature_id' => 'setSignatureId',
        'signer_group_guid' => 'setSignerGroupGuid',
        'signer_email_address' => 'setSignerEmailAddress',
        'signer_name' => 'setSignerName',
        'signer_role' => 'setSignerRole',
        'order' => 'setOrder',
        'status_code' => 'setStatusCode',
        'decline_reason' => 'setDeclineReason',
        'signed_at' => 'setSignedAt',
        'last_viewed_at' => 'setLastViewedAt',
        'last_reminded_at' => 'setLastRemindedAt',
        'has_pin' => 'setHasPin',
        'has_sms_auth' => 'setHasSmsAuth',
        'has_sms_delivery' => 'setHasSmsDelivery',
        'sms_phone_number' => 'setSmsPhoneNumber',
        'reassigned_by' => 'setReassignedBy',
        'reassignment_reason' => 'setReassignmentReason',
        'reassigned_from' => 'setReassignedFrom',
        'error' => 'setError',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'signature_id' => 'getSignatureId',
        'signer_group_guid' => 'getSignerGroupGuid',
        'signer_email_address' => 'getSignerEmailAddress',
        'signer_name' => 'getSignerName',
        'signer_role' => 'getSignerRole',
        'order' => 'getOrder',
        'status_code' => 'getStatusCode',
        'decline_reason' => 'getDeclineReason',
        'signed_at' => 'getSignedAt',
        'last_viewed_at' => 'getLastViewedAt',
        'last_reminded_at' => 'getLastRemindedAt',
        'has_pin' => 'getHasPin',
        'has_sms_auth' => 'getHasSmsAuth',
        'has_sms_delivery' => 'getHasSmsDelivery',
        'sms_phone_number' => 'getSmsPhoneNumber',
        'reassigned_by' => 'getReassignedBy',
        'reassignment_reason' => 'getReassignmentReason',
        'reassigned_from' => 'getReassignedFrom',
        'error' => 'getError',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('signature_id', $data ?? [], null);
        $this->setIfExists('signer_group_guid', $data ?? [], null);
        $this->setIfExists('signer_email_address', $data ?? [], null);
        $this->setIfExists('signer_name', $data ?? [], null);
        $this->setIfExists('signer_role', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('status_code', $data ?? [], null);
        $this->setIfExists('decline_reason', $data ?? [], null);
        $this->setIfExists('signed_at', $data ?? [], null);
        $this->setIfExists('last_viewed_at', $data ?? [], null);
        $this->setIfExists('last_reminded_at', $data ?? [], null);
        $this->setIfExists('has_pin', $data ?? [], null);
        $this->setIfExists('has_sms_auth', $data ?? [], null);
        $this->setIfExists('has_sms_delivery', $data ?? [], null);
        $this->setIfExists('sms_phone_number', $data ?? [], null);
        $this->setIfExists('reassigned_by', $data ?? [], null);
        $this->setIfExists('reassignment_reason', $data ?? [], null);
        $this->setIfExists('reassigned_from', $data ?? [], null);
        $this->setIfExists('error', $data ?? [], null);
    }

    /**
     * @deprecated use ::init()
     */
    public static function fromArray(array $data): SignatureRequestResponseSignatures
    {
        return self::init($data);
    }

    /**
     * Attempt to instantiate and hydrate a new instance of this class
     */
    public static function init(array $data): SignatureRequestResponseSignatures
    {
        /** @var SignatureRequestResponseSignatures */
        return ObjectSerializer::deserialize(
            $data,
            SignatureRequestResponseSignatures::class,
        );
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array
     *
     * @param string|int|object|array|mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets signature_id
     *
     * @return string|null
     */
    public function getSignatureId()
    {
        return $this->container['signature_id'];
    }

    /**
     * Sets signature_id
     *
     * @param string|null $signature_id signature identifier
     *
     * @return self
     */
    public function setSignatureId(?string $signature_id)
    {
        if (is_null($signature_id)) {
            throw new InvalidArgumentException('non-nullable signature_id cannot be null');
        }
        $this->container['signature_id'] = $signature_id;

        return $this;
    }

    /**
     * Gets signer_group_guid
     *
     * @return string|null
     */
    public function getSignerGroupGuid()
    {
        return $this->container['signer_group_guid'];
    }

    /**
     * Sets signer_group_guid
     *
     * @param string|null $signer_group_guid Signer Group GUID
     *
     * @return self
     */
    public function setSignerGroupGuid(?string $signer_group_guid)
    {
        if (is_null($signer_group_guid)) {
            array_push($this->openAPINullablesSetToNull, 'signer_group_guid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('signer_group_guid', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['signer_group_guid'] = $signer_group_guid;

        return $this;
    }

    /**
     * Gets signer_email_address
     *
     * @return string|null
     */
    public function getSignerEmailAddress()
    {
        return $this->container['signer_email_address'];
    }

    /**
     * Sets signer_email_address
     *
     * @param string|null $signer_email_address the email address of the signer
     *
     * @return self
     */
    public function setSignerEmailAddress(?string $signer_email_address)
    {
        if (is_null($signer_email_address)) {
            throw new InvalidArgumentException('non-nullable signer_email_address cannot be null');
        }
        $this->container['signer_email_address'] = $signer_email_address;

        return $this;
    }

    /**
     * Gets signer_name
     *
     * @return string|null
     */
    public function getSignerName()
    {
        return $this->container['signer_name'];
    }

    /**
     * Sets signer_name
     *
     * @param string|null $signer_name the name of the signer
     *
     * @return self
     */
    public function setSignerName(?string $signer_name)
    {
        if (is_null($signer_name)) {
            array_push($this->openAPINullablesSetToNull, 'signer_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('signer_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['signer_name'] = $signer_name;

        return $this;
    }

    /**
     * Gets signer_role
     *
     * @return string|null
     */
    public function getSignerRole()
    {
        return $this->container['signer_role'];
    }

    /**
     * Sets signer_role
     *
     * @param string|null $signer_role the role of the signer
     *
     * @return self
     */
    public function setSignerRole(?string $signer_role)
    {
        if (is_null($signer_role)) {
            array_push($this->openAPINullablesSetToNull, 'signer_role');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('signer_role', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['signer_role'] = $signer_role;

        return $this;
    }

    /**
     * Gets order
     *
     * @return int|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param int|null $order if signer order is assigned this is the 0-based index for this signer
     *
     * @return self
     */
    public function setOrder(?int $order)
    {
        if (is_null($order)) {
            array_push($this->openAPINullablesSetToNull, 'order');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets status_code
     *
     * @return string|null
     */
    public function getStatusCode()
    {
        return $this->container['status_code'];
    }

    /**
     * Sets status_code
     *
     * @param string|null $status_code The current status of the signature. eg: awaiting_signature, signed, declined.
     *
     * @return self
     */
    public function setStatusCode(?string $status_code)
    {
        if (is_null($status_code)) {
            throw new InvalidArgumentException('non-nullable status_code cannot be null');
        }
        $this->container['status_code'] = $status_code;

        return $this;
    }

    /**
     * Gets decline_reason
     *
     * @return string|null
     */
    public function getDeclineReason()
    {
        return $this->container['decline_reason'];
    }

    /**
     * Sets decline_reason
     *
     * @param string|null $decline_reason the reason provided by the signer for declining the request
     *
     * @return self
     */
    public function setDeclineReason(?string $decline_reason)
    {
        if (is_null($decline_reason)) {
            array_push($this->openAPINullablesSetToNull, 'decline_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('decline_reason', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['decline_reason'] = $decline_reason;

        return $this;
    }

    /**
     * Gets signed_at
     *
     * @return int|null
     */
    public function getSignedAt()
    {
        return $this->container['signed_at'];
    }

    /**
     * Sets signed_at
     *
     * @param int|null $signed_at time that the document was signed or null
     *
     * @return self
     */
    public function setSignedAt(?int $signed_at)
    {
        if (is_null($signed_at)) {
            array_push($this->openAPINullablesSetToNull, 'signed_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('signed_at', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['signed_at'] = $signed_at;

        return $this;
    }

    /**
     * Gets last_viewed_at
     *
     * @return int|null
     */
    public function getLastViewedAt()
    {
        return $this->container['last_viewed_at'];
    }

    /**
     * Sets last_viewed_at
     *
     * @param int|null $last_viewed_at the time that the document was last viewed by this signer or null
     *
     * @return self
     */
    public function setLastViewedAt(?int $last_viewed_at)
    {
        if (is_null($last_viewed_at)) {
            array_push($this->openAPINullablesSetToNull, 'last_viewed_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_viewed_at', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_viewed_at'] = $last_viewed_at;

        return $this;
    }

    /**
     * Gets last_reminded_at
     *
     * @return int|null
     */
    public function getLastRemindedAt()
    {
        return $this->container['last_reminded_at'];
    }

    /**
     * Sets last_reminded_at
     *
     * @param int|null $last_reminded_at the time the last reminder email was sent to the signer or null
     *
     * @return self
     */
    public function setLastRemindedAt(?int $last_reminded_at)
    {
        if (is_null($last_reminded_at)) {
            array_push($this->openAPINullablesSetToNull, 'last_reminded_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_reminded_at', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_reminded_at'] = $last_reminded_at;

        return $this;
    }

    /**
     * Gets has_pin
     *
     * @return bool|null
     */
    public function getHasPin()
    {
        return $this->container['has_pin'];
    }

    /**
     * Sets has_pin
     *
     * @param bool|null $has_pin boolean to indicate whether this signature requires a PIN to access
     *
     * @return self
     */
    public function setHasPin(?bool $has_pin)
    {
        if (is_null($has_pin)) {
            throw new InvalidArgumentException('non-nullable has_pin cannot be null');
        }
        $this->container['has_pin'] = $has_pin;

        return $this;
    }

    /**
     * Gets has_sms_auth
     *
     * @return bool|null
     */
    public function getHasSmsAuth()
    {
        return $this->container['has_sms_auth'];
    }

    /**
     * Sets has_sms_auth
     *
     * @param bool|null $has_sms_auth boolean to indicate whether this signature has SMS authentication enabled
     *
     * @return self
     */
    public function setHasSmsAuth(?bool $has_sms_auth)
    {
        if (is_null($has_sms_auth)) {
            array_push($this->openAPINullablesSetToNull, 'has_sms_auth');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has_sms_auth', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['has_sms_auth'] = $has_sms_auth;

        return $this;
    }

    /**
     * Gets has_sms_delivery
     *
     * @return bool|null
     */
    public function getHasSmsDelivery()
    {
        return $this->container['has_sms_delivery'];
    }

    /**
     * Sets has_sms_delivery
     *
     * @param bool|null $has_sms_delivery boolean to indicate whether this signature has SMS delivery enabled
     *
     * @return self
     */
    public function setHasSmsDelivery(?bool $has_sms_delivery)
    {
        if (is_null($has_sms_delivery)) {
            array_push($this->openAPINullablesSetToNull, 'has_sms_delivery');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has_sms_delivery', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['has_sms_delivery'] = $has_sms_delivery;

        return $this;
    }

    /**
     * Gets sms_phone_number
     *
     * @return string|null
     */
    public function getSmsPhoneNumber()
    {
        return $this->container['sms_phone_number'];
    }

    /**
     * Sets sms_phone_number
     *
     * @param string|null $sms_phone_number the SMS phone number used for authentication or signature request delivery
     *
     * @return self
     */
    public function setSmsPhoneNumber(?string $sms_phone_number)
    {
        if (is_null($sms_phone_number)) {
            array_push($this->openAPINullablesSetToNull, 'sms_phone_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sms_phone_number', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sms_phone_number'] = $sms_phone_number;

        return $this;
    }

    /**
     * Gets reassigned_by
     *
     * @return string|null
     */
    public function getReassignedBy()
    {
        return $this->container['reassigned_by'];
    }

    /**
     * Sets reassigned_by
     *
     * @param string|null $reassigned_by email address of original signer who reassigned to this signer
     *
     * @return self
     */
    public function setReassignedBy(?string $reassigned_by)
    {
        if (is_null($reassigned_by)) {
            array_push($this->openAPINullablesSetToNull, 'reassigned_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reassigned_by', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reassigned_by'] = $reassigned_by;

        return $this;
    }

    /**
     * Gets reassignment_reason
     *
     * @return string|null
     */
    public function getReassignmentReason()
    {
        return $this->container['reassignment_reason'];
    }

    /**
     * Sets reassignment_reason
     *
     * @param string|null $reassignment_reason reason provided by original signer who reassigned to this signer
     *
     * @return self
     */
    public function setReassignmentReason(?string $reassignment_reason)
    {
        if (is_null($reassignment_reason)) {
            array_push($this->openAPINullablesSetToNull, 'reassignment_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reassignment_reason', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reassignment_reason'] = $reassignment_reason;

        return $this;
    }

    /**
     * Gets reassigned_from
     *
     * @return string|null
     */
    public function getReassignedFrom()
    {
        return $this->container['reassigned_from'];
    }

    /**
     * Sets reassigned_from
     *
     * @param string|null $reassigned_from previous signature identifier
     *
     * @return self
     */
    public function setReassignedFrom(?string $reassigned_from)
    {
        if (is_null($reassigned_from)) {
            array_push($this->openAPINullablesSetToNull, 'reassigned_from');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reassigned_from', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reassigned_from'] = $reassigned_from;

        return $this;
    }

    /**
     * Gets error
     *
     * @return string|null
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     *
     * @param string|null $error error message pertaining to this signer, or null
     *
     * @return self
     */
    public function setError(?string $error)
    {
        if (is_null($error)) {
            array_push($this->openAPINullablesSetToNull, 'error');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('error', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['error'] = $error;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    #[ReturnTypeWillChange]
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     */
    #[ReturnTypeWillChange]
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    #[ReturnTypeWillChange]
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_UNESCAPED_SLASHES
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
