<?php

/**
 * TemplateResponseAccountQuota
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dropbox\Sign
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Dropbox Sign API
 *
 * Dropbox Sign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dropbox\Sign\Model;

use \ArrayAccess;
use \Dropbox\Sign\ObjectSerializer;

/**
 * TemplateResponseAccountQuota Class Doc Comment
 *
 * @category Class
 * @description An array of the designated CC roles that must be specified when sending a SignatureRequest using this Template.
 * @package  Dropbox\Sign
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TemplateResponseAccountQuota implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TemplateResponseAccountQuota';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'templates_left' => 'int',
        'api_signature_requests_left' => 'int',
        'documents_left' => 'int',
        'sms_verifications_left' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'templates_left' => null,
        'api_signature_requests_left' => null,
        'documents_left' => null,
        'sms_verifications_left' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'templates_left' => false,
        'api_signature_requests_left' => false,
        'documents_left' => false,
        'sms_verifications_left' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'templates_left' => 'templates_left',
        'api_signature_requests_left' => 'api_signature_requests_left',
        'documents_left' => 'documents_left',
        'sms_verifications_left' => 'sms_verifications_left'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'templates_left' => 'setTemplatesLeft',
        'api_signature_requests_left' => 'setApiSignatureRequestsLeft',
        'documents_left' => 'setDocumentsLeft',
        'sms_verifications_left' => 'setSmsVerificationsLeft'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'templates_left' => 'getTemplatesLeft',
        'api_signature_requests_left' => 'getApiSignatureRequestsLeft',
        'documents_left' => 'getDocumentsLeft',
        'sms_verifications_left' => 'getSmsVerificationsLeft'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('templates_left', $data ?? [], null);
        $this->setIfExists('api_signature_requests_left', $data ?? [], null);
        $this->setIfExists('documents_left', $data ?? [], null);
        $this->setIfExists('sms_verifications_left', $data ?? [], null);
    }

    /** @deprecated use ::init() */
    public static function fromArray(array $data): TemplateResponseAccountQuota
    {
        return self::init($data);
    }

    /** Attempt to instantiate and hydrate a new instance of this class */
    public static function init(array $data): TemplateResponseAccountQuota
    {
        /** @var TemplateResponseAccountQuota */
        $obj = ObjectSerializer::deserialize(
            $data,
            TemplateResponseAccountQuota::class,
        );

        return $obj;
    }


    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
* @param string|int|object|array|mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets templates_left
     *
     * @return int|null
     */
    public function getTemplatesLeft()
    {
        return $this->container['templates_left'];
    }

    /**
     * Sets templates_left
     *
     * @param int|null $templates_left API templates remaining.
     *
     * @return self
     */
    public function setTemplatesLeft($templates_left)
    {
        if (is_null($templates_left)) {
            throw new \InvalidArgumentException('non-nullable templates_left cannot be null');
        }
        $this->container['templates_left'] = $templates_left;

        return $this;
    }

    /**
     * Gets api_signature_requests_left
     *
     * @return int|null
     */
    public function getApiSignatureRequestsLeft()
    {
        return $this->container['api_signature_requests_left'];
    }

    /**
     * Sets api_signature_requests_left
     *
     * @param int|null $api_signature_requests_left API signature requests remaining.
     *
     * @return self
     */
    public function setApiSignatureRequestsLeft($api_signature_requests_left)
    {
        if (is_null($api_signature_requests_left)) {
            throw new \InvalidArgumentException('non-nullable api_signature_requests_left cannot be null');
        }
        $this->container['api_signature_requests_left'] = $api_signature_requests_left;

        return $this;
    }

    /**
     * Gets documents_left
     *
     * @return int|null
     */
    public function getDocumentsLeft()
    {
        return $this->container['documents_left'];
    }

    /**
     * Sets documents_left
     *
     * @param int|null $documents_left Signature requests remaining.
     *
     * @return self
     */
    public function setDocumentsLeft($documents_left)
    {
        if (is_null($documents_left)) {
            throw new \InvalidArgumentException('non-nullable documents_left cannot be null');
        }
        $this->container['documents_left'] = $documents_left;

        return $this;
    }

    /**
     * Gets sms_verifications_left
     *
     * @return int|null
     */
    public function getSmsVerificationsLeft()
    {
        return $this->container['sms_verifications_left'];
    }

    /**
     * Sets sms_verifications_left
     *
     * @param int|null $sms_verifications_left SMS verifications remaining.
     *
     * @return self
     */
    public function setSmsVerificationsLeft($sms_verifications_left)
    {
        if (is_null($sms_verifications_left)) {
            throw new \InvalidArgumentException('non-nullable sms_verifications_left cannot be null');
        }
        $this->container['sms_verifications_left'] = $sms_verifications_left;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_UNESCAPED_SLASHES
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


