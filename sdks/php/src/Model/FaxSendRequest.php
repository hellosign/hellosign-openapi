<?php
/**
 * FaxSendRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @see     https://openapi-generator.tech
 */

/**
 * Dropbox Sign API
 *
 * Dropbox Sign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dropbox\Sign\Model;

use ArrayAccess;
use Dropbox\Sign\ObjectSerializer;
use InvalidArgumentException;
use JsonSerializable;
use ReturnTypeWillChange;

/**
 * FaxSendRequest Class Doc Comment
 *
 * @category Class
 * @see     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FaxSendRequest implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'FaxSendRequest';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'to' => 'string',
        'from' => 'string',
        'file' => '\Dropbox\Sign\Model\SubFile[]',
        'file_url' => 'string[]',
        'file_url_names' => 'string[]',
        'test_mode' => 'bool',
        'cover_page_to' => 'string',
        'cover_page_from' => 'string',
        'cover_page_message' => 'string',
        'title' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'to' => null,
        'from' => null,
        'file' => null,
        'file_url' => null,
        'file_url_names' => null,
        'test_mode' => null,
        'cover_page_to' => null,
        'cover_page_from' => null,
        'cover_page_message' => null,
        'title' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'to' => false,
        'from' => true,
        'file' => false,
        'file_url' => false,
        'file_url_names' => false,
        'test_mode' => false,
        'cover_page_to' => true,
        'cover_page_from' => true,
        'cover_page_message' => true,
        'title' => true,
    ];

    /**
     * If a nullable field gets set to null, insert it here
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'to' => 'to',
        'from' => 'from',
        'file' => 'file',
        'file_url' => 'file_url',
        'file_url_names' => 'file_url_names',
        'test_mode' => 'test_mode',
        'cover_page_to' => 'cover_page_to',
        'cover_page_from' => 'cover_page_from',
        'cover_page_message' => 'cover_page_message',
        'title' => 'title',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'to' => 'setTo',
        'from' => 'setFrom',
        'file' => 'setFile',
        'file_url' => 'setFileUrl',
        'file_url_names' => 'setFileUrlNames',
        'test_mode' => 'setTestMode',
        'cover_page_to' => 'setCoverPageTo',
        'cover_page_from' => 'setCoverPageFrom',
        'cover_page_message' => 'setCoverPageMessage',
        'title' => 'setTitle',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'to' => 'getTo',
        'from' => 'getFrom',
        'file' => 'getFile',
        'file_url' => 'getFileUrl',
        'file_url_names' => 'getFileUrlNames',
        'test_mode' => 'getTestMode',
        'cover_page_to' => 'getCoverPageTo',
        'cover_page_from' => 'getCoverPageFrom',
        'cover_page_message' => 'getCoverPageMessage',
        'title' => 'getTitle',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('to', $data ?? [], null);
        $this->setIfExists('from', $data ?? [], null);
        $this->setIfExists('file', $data ?? [], null);
        $this->setIfExists('file_url', $data ?? [], null);
        $this->setIfExists('file_url_names', $data ?? [], null);
        $this->setIfExists('test_mode', $data ?? [], null);
        $this->setIfExists('cover_page_to', $data ?? [], null);
        $this->setIfExists('cover_page_from', $data ?? [], null);
        $this->setIfExists('cover_page_message', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
    }

    /**
     * @deprecated use ::init()
     */
    public static function fromArray(array $data): FaxSendRequest
    {
        return self::init($data);
    }

    /**
     * Attempt to instantiate and hydrate a new instance of this class
     */
    public static function init(array $data): FaxSendRequest
    {
        /** @var FaxSendRequest */
        return ObjectSerializer::deserialize(
            $data,
            FaxSendRequest::class,
        );
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array
     *
     * @param string|int|object|array|mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets to
     *
     * @return string|null
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string|null $to Fax Send To Recipient
     *
     * @return self
     */
    public function setTo(?string $to)
    {
        if (is_null($to)) {
            throw new InvalidArgumentException('non-nullable to cannot be null');
        }
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets from
     *
     * @return string|null
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param string|null $from Fax Send From Sender (used only with fax number)
     *
     * @return self
     */
    public function setFrom(?string $from)
    {
        if (is_null($from)) {
            array_push($this->openAPINullablesSetToNull, 'from');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('from', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets file
     *
     * @return SubFile[]|null
     */
    public function getFile()
    {
        return $this->container['file'];
    }

    /**
     * Sets file
     *
     * @param SubFile[]|null $file Fax File to Send
     *
     * @return self
     */
    public function setFile(?array $file)
    {
        if (is_null($file)) {
            throw new InvalidArgumentException('non-nullable file cannot be null');
        }
        $this->container['file'] = $file;

        return $this;
    }

    /**
     * Gets file_url
     *
     * @return string[]|null
     */
    public function getFileUrl()
    {
        return $this->container['file_url'];
    }

    /**
     * Sets file_url
     *
     * @param string[]|null $file_url Fax File URL to Send
     *
     * @return self
     */
    public function setFileUrl(?array $file_url)
    {
        if (is_null($file_url)) {
            throw new InvalidArgumentException('non-nullable file_url cannot be null');
        }
        $this->container['file_url'] = $file_url;

        return $this;
    }

    /**
     * Gets file_url_names
     *
     * @return string[]|null
     */
    public function getFileUrlNames()
    {
        return $this->container['file_url_names'];
    }

    /**
     * Sets file_url_names
     *
     * @param string[]|null $file_url_names Fax File URL Names
     *
     * @return self
     */
    public function setFileUrlNames(?array $file_url_names)
    {
        if (is_null($file_url_names)) {
            throw new InvalidArgumentException('non-nullable file_url_names cannot be null');
        }
        $this->container['file_url_names'] = $file_url_names;

        return $this;
    }

    /**
     * Gets test_mode
     *
     * @return bool|null
     */
    public function getTestMode()
    {
        return $this->container['test_mode'];
    }

    /**
     * Sets test_mode
     *
     * @param bool|null $test_mode API Test Mode Setting
     *
     * @return self
     */
    public function setTestMode(?bool $test_mode)
    {
        if (is_null($test_mode)) {
            throw new InvalidArgumentException('non-nullable test_mode cannot be null');
        }
        $this->container['test_mode'] = $test_mode;

        return $this;
    }

    /**
     * Gets cover_page_to
     *
     * @return string|null
     */
    public function getCoverPageTo()
    {
        return $this->container['cover_page_to'];
    }

    /**
     * Sets cover_page_to
     *
     * @param string|null $cover_page_to Fax Cover Page for Recipient
     *
     * @return self
     */
    public function setCoverPageTo(?string $cover_page_to)
    {
        if (is_null($cover_page_to)) {
            array_push($this->openAPINullablesSetToNull, 'cover_page_to');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cover_page_to', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cover_page_to'] = $cover_page_to;

        return $this;
    }

    /**
     * Gets cover_page_from
     *
     * @return string|null
     */
    public function getCoverPageFrom()
    {
        return $this->container['cover_page_from'];
    }

    /**
     * Sets cover_page_from
     *
     * @param string|null $cover_page_from Fax Cover Page for Sender
     *
     * @return self
     */
    public function setCoverPageFrom(?string $cover_page_from)
    {
        if (is_null($cover_page_from)) {
            array_push($this->openAPINullablesSetToNull, 'cover_page_from');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cover_page_from', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cover_page_from'] = $cover_page_from;

        return $this;
    }

    /**
     * Gets cover_page_message
     *
     * @return string|null
     */
    public function getCoverPageMessage()
    {
        return $this->container['cover_page_message'];
    }

    /**
     * Sets cover_page_message
     *
     * @param string|null $cover_page_message Fax Cover Page Message
     *
     * @return self
     */
    public function setCoverPageMessage(?string $cover_page_message)
    {
        if (is_null($cover_page_message)) {
            array_push($this->openAPINullablesSetToNull, 'cover_page_message');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cover_page_message', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cover_page_message'] = $cover_page_message;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Fax Title
     *
     * @return self
     */
    public function setTitle(?string $title)
    {
        if (is_null($title)) {
            array_push($this->openAPINullablesSetToNull, 'title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    #[ReturnTypeWillChange]
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     */
    #[ReturnTypeWillChange]
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    #[ReturnTypeWillChange]
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_UNESCAPED_SLASHES
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
