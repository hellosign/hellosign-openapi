<?php
/**
 * SubSigningOptions
 *
 * PHP version 7.4
 *
 * @category Class
 * @see     https://openapi-generator.tech
 */

/**
 * Dropbox Sign API
 *
 * Dropbox Sign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dropbox\Sign\Model;

use ArrayAccess;
use Dropbox\Sign\ObjectSerializer;
use InvalidArgumentException;
use JsonSerializable;
use ReturnTypeWillChange;

/**
 * SubSigningOptions Class Doc Comment
 *
 * @category Class
 * @description This allows the requester to specify the types allowed for creating a signature.  **NOTE:** If &#x60;signing_options&#x60; are not defined in the request, the allowed types will default to those specified in the account settings.
 * @see     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SubSigningOptions implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'SubSigningOptions';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'default_type' => 'string',
        'draw' => 'bool',
        'phone' => 'bool',
        'type' => 'bool',
        'upload' => 'bool',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'default_type' => null,
        'draw' => null,
        'phone' => null,
        'type' => null,
        'upload' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'default_type' => false,
        'draw' => false,
        'phone' => false,
        'type' => false,
        'upload' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'default_type' => 'default_type',
        'draw' => 'draw',
        'phone' => 'phone',
        'type' => 'type',
        'upload' => 'upload',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'default_type' => 'setDefaultType',
        'draw' => 'setDraw',
        'phone' => 'setPhone',
        'type' => 'setType',
        'upload' => 'setUpload',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'default_type' => 'getDefaultType',
        'draw' => 'getDraw',
        'phone' => 'getPhone',
        'type' => 'getType',
        'upload' => 'getUpload',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DEFAULT_TYPE_DRAW = 'draw';
    public const DEFAULT_TYPE_PHONE = 'phone';
    public const DEFAULT_TYPE_TYPE = 'type';
    public const DEFAULT_TYPE_UPLOAD = 'upload';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDefaultTypeAllowableValues()
    {
        return [
            self::DEFAULT_TYPE_DRAW,
            self::DEFAULT_TYPE_PHONE,
            self::DEFAULT_TYPE_TYPE,
            self::DEFAULT_TYPE_UPLOAD,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('default_type', $data ?? [], null);
        $this->setIfExists('draw', $data ?? [], false);
        $this->setIfExists('phone', $data ?? [], false);
        $this->setIfExists('type', $data ?? [], false);
        $this->setIfExists('upload', $data ?? [], false);
    }

    /**
     * @deprecated use ::init()
     */
    public static function fromArray(array $data): SubSigningOptions
    {
        return self::init($data);
    }

    /**
     * Attempt to instantiate and hydrate a new instance of this class
     */
    public static function init(array $data): SubSigningOptions
    {
        /** @var SubSigningOptions */
        return ObjectSerializer::deserialize(
            $data,
            SubSigningOptions::class,
        );
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array
     *
     * @param string|int|object|array|mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['default_type'] === null) {
            $invalidProperties[] = "'default_type' can't be null";
        }
        $allowedValues = $this->getDefaultTypeAllowableValues();
        if (!is_null($this->container['default_type']) && !in_array($this->container['default_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'default_type', must be one of '%s'",
                $this->container['default_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets default_type
     *
     * @return string
     */
    public function getDefaultType()
    {
        return $this->container['default_type'];
    }

    /**
     * Sets default_type
     *
     * @param string $default_type The default type shown (limited to the listed types)
     *
     * @return self
     */
    public function setDefaultType(string $default_type)
    {
        if (is_null($default_type)) {
            throw new InvalidArgumentException('non-nullable default_type cannot be null');
        }
        $allowedValues = $this->getDefaultTypeAllowableValues();
        if (!in_array($default_type, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'default_type', must be one of '%s'",
                    $default_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['default_type'] = $default_type;

        return $this;
    }

    /**
     * Gets draw
     *
     * @return bool|null
     */
    public function getDraw()
    {
        return $this->container['draw'];
    }

    /**
     * Sets draw
     *
     * @param bool|null $draw Allows drawing the signature
     *
     * @return self
     */
    public function setDraw(?bool $draw)
    {
        if (is_null($draw)) {
            throw new InvalidArgumentException('non-nullable draw cannot be null');
        }
        $this->container['draw'] = $draw;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return bool|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param bool|null $phone Allows using a smartphone to email the signature
     *
     * @return self
     */
    public function setPhone(?bool $phone)
    {
        if (is_null($phone)) {
            throw new InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets type
     *
     * @return bool|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param bool|null $type Allows typing the signature
     *
     * @return self
     */
    public function setType(?bool $type)
    {
        if (is_null($type)) {
            throw new InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets upload
     *
     * @return bool|null
     */
    public function getUpload()
    {
        return $this->container['upload'];
    }

    /**
     * Sets upload
     *
     * @param bool|null $upload Allows uploading the signature
     *
     * @return self
     */
    public function setUpload(?bool $upload)
    {
        if (is_null($upload)) {
            throw new InvalidArgumentException('non-nullable upload cannot be null');
        }
        $this->container['upload'] = $upload;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    #[ReturnTypeWillChange]
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     */
    #[ReturnTypeWillChange]
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    #[ReturnTypeWillChange]
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_UNESCAPED_SLASHES
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
