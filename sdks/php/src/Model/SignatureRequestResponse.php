<?php
/**
 * SignatureRequestResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @see     https://openapi-generator.tech
 */

/**
 * Dropbox Sign API
 *
 * Dropbox Sign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dropbox\Sign\Model;

use ArrayAccess;
use Dropbox\Sign\ObjectSerializer;
use InvalidArgumentException;
use JsonSerializable;
use ReturnTypeWillChange;

/**
 * SignatureRequestResponse Class Doc Comment
 *
 * @category Class
 * @description Contains information about a signature request.
 * @see     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SignatureRequestResponse implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'SignatureRequestResponse';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'test_mode' => 'bool',
        'signature_request_id' => 'string',
        'requester_email_address' => 'string',
        'title' => 'string',
        'original_title' => 'string',
        'subject' => 'string',
        'message' => 'string',
        'metadata' => 'array',
        'created_at' => 'int',
        'expires_at' => 'int',
        'is_complete' => 'bool',
        'is_declined' => 'bool',
        'has_error' => 'bool',
        'files_url' => 'string',
        'signing_url' => 'string',
        'details_url' => 'string',
        'cc_email_addresses' => 'string[]',
        'signing_redirect_url' => 'string',
        'final_copy_uri' => 'string',
        'template_ids' => 'string[]',
        'custom_fields' => '\Dropbox\Sign\Model\SignatureRequestResponseCustomFieldBase[]',
        'attachments' => '\Dropbox\Sign\Model\SignatureRequestResponseAttachment[]',
        'response_data' => '\Dropbox\Sign\Model\SignatureRequestResponseDataBase[]',
        'signatures' => '\Dropbox\Sign\Model\SignatureRequestResponseSignatures[]',
        'bulk_send_job_id' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'test_mode' => null,
        'signature_request_id' => null,
        'requester_email_address' => null,
        'title' => null,
        'original_title' => null,
        'subject' => null,
        'message' => null,
        'metadata' => null,
        'created_at' => null,
        'expires_at' => null,
        'is_complete' => null,
        'is_declined' => null,
        'has_error' => null,
        'files_url' => null,
        'signing_url' => null,
        'details_url' => null,
        'cc_email_addresses' => null,
        'signing_redirect_url' => null,
        'final_copy_uri' => null,
        'template_ids' => null,
        'custom_fields' => null,
        'attachments' => null,
        'response_data' => null,
        'signatures' => null,
        'bulk_send_job_id' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'test_mode' => true,
        'signature_request_id' => false,
        'requester_email_address' => false,
        'title' => false,
        'original_title' => false,
        'subject' => true,
        'message' => true,
        'metadata' => false,
        'created_at' => false,
        'expires_at' => false,
        'is_complete' => false,
        'is_declined' => false,
        'has_error' => false,
        'files_url' => false,
        'signing_url' => true,
        'details_url' => false,
        'cc_email_addresses' => false,
        'signing_redirect_url' => true,
        'final_copy_uri' => true,
        'template_ids' => true,
        'custom_fields' => true,
        'attachments' => true,
        'response_data' => true,
        'signatures' => false,
        'bulk_send_job_id' => true,
    ];

    /**
     * If a nullable field gets set to null, insert it here
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'test_mode' => 'test_mode',
        'signature_request_id' => 'signature_request_id',
        'requester_email_address' => 'requester_email_address',
        'title' => 'title',
        'original_title' => 'original_title',
        'subject' => 'subject',
        'message' => 'message',
        'metadata' => 'metadata',
        'created_at' => 'created_at',
        'expires_at' => 'expires_at',
        'is_complete' => 'is_complete',
        'is_declined' => 'is_declined',
        'has_error' => 'has_error',
        'files_url' => 'files_url',
        'signing_url' => 'signing_url',
        'details_url' => 'details_url',
        'cc_email_addresses' => 'cc_email_addresses',
        'signing_redirect_url' => 'signing_redirect_url',
        'final_copy_uri' => 'final_copy_uri',
        'template_ids' => 'template_ids',
        'custom_fields' => 'custom_fields',
        'attachments' => 'attachments',
        'response_data' => 'response_data',
        'signatures' => 'signatures',
        'bulk_send_job_id' => 'bulk_send_job_id',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'test_mode' => 'setTestMode',
        'signature_request_id' => 'setSignatureRequestId',
        'requester_email_address' => 'setRequesterEmailAddress',
        'title' => 'setTitle',
        'original_title' => 'setOriginalTitle',
        'subject' => 'setSubject',
        'message' => 'setMessage',
        'metadata' => 'setMetadata',
        'created_at' => 'setCreatedAt',
        'expires_at' => 'setExpiresAt',
        'is_complete' => 'setIsComplete',
        'is_declined' => 'setIsDeclined',
        'has_error' => 'setHasError',
        'files_url' => 'setFilesUrl',
        'signing_url' => 'setSigningUrl',
        'details_url' => 'setDetailsUrl',
        'cc_email_addresses' => 'setCcEmailAddresses',
        'signing_redirect_url' => 'setSigningRedirectUrl',
        'final_copy_uri' => 'setFinalCopyUri',
        'template_ids' => 'setTemplateIds',
        'custom_fields' => 'setCustomFields',
        'attachments' => 'setAttachments',
        'response_data' => 'setResponseData',
        'signatures' => 'setSignatures',
        'bulk_send_job_id' => 'setBulkSendJobId',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'test_mode' => 'getTestMode',
        'signature_request_id' => 'getSignatureRequestId',
        'requester_email_address' => 'getRequesterEmailAddress',
        'title' => 'getTitle',
        'original_title' => 'getOriginalTitle',
        'subject' => 'getSubject',
        'message' => 'getMessage',
        'metadata' => 'getMetadata',
        'created_at' => 'getCreatedAt',
        'expires_at' => 'getExpiresAt',
        'is_complete' => 'getIsComplete',
        'is_declined' => 'getIsDeclined',
        'has_error' => 'getHasError',
        'files_url' => 'getFilesUrl',
        'signing_url' => 'getSigningUrl',
        'details_url' => 'getDetailsUrl',
        'cc_email_addresses' => 'getCcEmailAddresses',
        'signing_redirect_url' => 'getSigningRedirectUrl',
        'final_copy_uri' => 'getFinalCopyUri',
        'template_ids' => 'getTemplateIds',
        'custom_fields' => 'getCustomFields',
        'attachments' => 'getAttachments',
        'response_data' => 'getResponseData',
        'signatures' => 'getSignatures',
        'bulk_send_job_id' => 'getBulkSendJobId',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('test_mode', $data ?? [], false);
        $this->setIfExists('signature_request_id', $data ?? [], null);
        $this->setIfExists('requester_email_address', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('original_title', $data ?? [], null);
        $this->setIfExists('subject', $data ?? [], null);
        $this->setIfExists('message', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('expires_at', $data ?? [], null);
        $this->setIfExists('is_complete', $data ?? [], null);
        $this->setIfExists('is_declined', $data ?? [], null);
        $this->setIfExists('has_error', $data ?? [], null);
        $this->setIfExists('files_url', $data ?? [], null);
        $this->setIfExists('signing_url', $data ?? [], null);
        $this->setIfExists('details_url', $data ?? [], null);
        $this->setIfExists('cc_email_addresses', $data ?? [], null);
        $this->setIfExists('signing_redirect_url', $data ?? [], null);
        $this->setIfExists('final_copy_uri', $data ?? [], null);
        $this->setIfExists('template_ids', $data ?? [], null);
        $this->setIfExists('custom_fields', $data ?? [], null);
        $this->setIfExists('attachments', $data ?? [], null);
        $this->setIfExists('response_data', $data ?? [], null);
        $this->setIfExists('signatures', $data ?? [], null);
        $this->setIfExists('bulk_send_job_id', $data ?? [], null);
    }

    /**
     * @deprecated use ::init()
     */
    public static function fromArray(array $data): SignatureRequestResponse
    {
        return self::init($data);
    }

    /**
     * Attempt to instantiate and hydrate a new instance of this class
     */
    public static function init(array $data): SignatureRequestResponse
    {
        /** @var SignatureRequestResponse */
        return ObjectSerializer::deserialize(
            $data,
            SignatureRequestResponse::class,
        );
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array
     *
     * @param string|int|object|array|mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets test_mode
     *
     * @return bool|null
     */
    public function getTestMode()
    {
        return $this->container['test_mode'];
    }

    /**
     * Sets test_mode
     *
     * @param bool|null $test_mode Whether this is a test signature request. Test requests have no legal value. Defaults to `false`.
     *
     * @return self
     */
    public function setTestMode(?bool $test_mode)
    {
        if (is_null($test_mode)) {
            array_push($this->openAPINullablesSetToNull, 'test_mode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('test_mode', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['test_mode'] = $test_mode;

        return $this;
    }

    /**
     * Gets signature_request_id
     *
     * @return string|null
     */
    public function getSignatureRequestId()
    {
        return $this->container['signature_request_id'];
    }

    /**
     * Sets signature_request_id
     *
     * @param string|null $signature_request_id the id of the SignatureRequest
     *
     * @return self
     */
    public function setSignatureRequestId(?string $signature_request_id)
    {
        if (is_null($signature_request_id)) {
            throw new InvalidArgumentException('non-nullable signature_request_id cannot be null');
        }
        $this->container['signature_request_id'] = $signature_request_id;

        return $this;
    }

    /**
     * Gets requester_email_address
     *
     * @return string|null
     */
    public function getRequesterEmailAddress()
    {
        return $this->container['requester_email_address'];
    }

    /**
     * Sets requester_email_address
     *
     * @param string|null $requester_email_address the email address of the initiator of the SignatureRequest
     *
     * @return self
     */
    public function setRequesterEmailAddress(?string $requester_email_address)
    {
        if (is_null($requester_email_address)) {
            throw new InvalidArgumentException('non-nullable requester_email_address cannot be null');
        }
        $this->container['requester_email_address'] = $requester_email_address;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title the title the specified Account uses for the SignatureRequest
     *
     * @return self
     */
    public function setTitle(?string $title)
    {
        if (is_null($title)) {
            throw new InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets original_title
     *
     * @return string|null
     */
    public function getOriginalTitle()
    {
        return $this->container['original_title'];
    }

    /**
     * Sets original_title
     *
     * @param string|null $original_title default Label for account
     *
     * @return self
     */
    public function setOriginalTitle(?string $original_title)
    {
        if (is_null($original_title)) {
            throw new InvalidArgumentException('non-nullable original_title cannot be null');
        }
        $this->container['original_title'] = $original_title;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string|null
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string|null $subject the subject in the email that was initially sent to the signers
     *
     * @return self
     */
    public function setSubject(?string $subject)
    {
        if (is_null($subject)) {
            array_push($this->openAPINullablesSetToNull, 'subject');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subject', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string|null
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string|null $message the custom message in the email that was initially sent to the signers
     *
     * @return self
     */
    public function setMessage(?string $message)
    {
        if (is_null($message)) {
            array_push($this->openAPINullablesSetToNull, 'message');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('message', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return array|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param array|null $metadata the metadata attached to the signature request
     *
     * @return self
     */
    public function setMetadata(?array $metadata)
    {
        if (is_null($metadata)) {
            throw new InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return int|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param int|null $created_at time the signature request was created
     *
     * @return self
     */
    public function setCreatedAt(?int $created_at)
    {
        if (is_null($created_at)) {
            throw new InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets expires_at
     *
     * @return int|null
     */
    public function getExpiresAt()
    {
        return $this->container['expires_at'];
    }

    /**
     * Sets expires_at
     *
     * @param int|null $expires_at The time when the signature request will expire unsigned signatures. See [Signature Request Expiration Date](https://developers.hellosign.com/docs/signature-request/expiration/) for details.
     *
     * @return self
     */
    public function setExpiresAt(?int $expires_at)
    {
        if (is_null($expires_at)) {
            throw new InvalidArgumentException('non-nullable expires_at cannot be null');
        }
        $this->container['expires_at'] = $expires_at;

        return $this;
    }

    /**
     * Gets is_complete
     *
     * @return bool|null
     */
    public function getIsComplete()
    {
        return $this->container['is_complete'];
    }

    /**
     * Sets is_complete
     *
     * @param bool|null $is_complete whether or not the SignatureRequest has been fully executed by all signers
     *
     * @return self
     */
    public function setIsComplete(?bool $is_complete)
    {
        if (is_null($is_complete)) {
            throw new InvalidArgumentException('non-nullable is_complete cannot be null');
        }
        $this->container['is_complete'] = $is_complete;

        return $this;
    }

    /**
     * Gets is_declined
     *
     * @return bool|null
     */
    public function getIsDeclined()
    {
        return $this->container['is_declined'];
    }

    /**
     * Sets is_declined
     *
     * @param bool|null $is_declined whether or not the SignatureRequest has been declined by a signer
     *
     * @return self
     */
    public function setIsDeclined(?bool $is_declined)
    {
        if (is_null($is_declined)) {
            throw new InvalidArgumentException('non-nullable is_declined cannot be null');
        }
        $this->container['is_declined'] = $is_declined;

        return $this;
    }

    /**
     * Gets has_error
     *
     * @return bool|null
     */
    public function getHasError()
    {
        return $this->container['has_error'];
    }

    /**
     * Sets has_error
     *
     * @param bool|null $has_error whether or not an error occurred (either during the creation of the SignatureRequest or during one of the signings)
     *
     * @return self
     */
    public function setHasError(?bool $has_error)
    {
        if (is_null($has_error)) {
            throw new InvalidArgumentException('non-nullable has_error cannot be null');
        }
        $this->container['has_error'] = $has_error;

        return $this;
    }

    /**
     * Gets files_url
     *
     * @return string|null
     */
    public function getFilesUrl()
    {
        return $this->container['files_url'];
    }

    /**
     * Sets files_url
     *
     * @param string|null $files_url the URL where a copy of the request's documents can be downloaded
     *
     * @return self
     */
    public function setFilesUrl(?string $files_url)
    {
        if (is_null($files_url)) {
            throw new InvalidArgumentException('non-nullable files_url cannot be null');
        }
        $this->container['files_url'] = $files_url;

        return $this;
    }

    /**
     * Gets signing_url
     *
     * @return string|null
     */
    public function getSigningUrl()
    {
        return $this->container['signing_url'];
    }

    /**
     * Sets signing_url
     *
     * @param string|null $signing_url The URL where a signer, after authenticating, can sign the documents. This should only be used by users with existing Dropbox Sign accounts as they will be required to log in before signing.
     *
     * @return self
     */
    public function setSigningUrl(?string $signing_url)
    {
        if (is_null($signing_url)) {
            array_push($this->openAPINullablesSetToNull, 'signing_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('signing_url', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['signing_url'] = $signing_url;

        return $this;
    }

    /**
     * Gets details_url
     *
     * @return string|null
     */
    public function getDetailsUrl()
    {
        return $this->container['details_url'];
    }

    /**
     * Sets details_url
     *
     * @param string|null $details_url the URL where the requester and the signers can view the current status of the SignatureRequest
     *
     * @return self
     */
    public function setDetailsUrl(?string $details_url)
    {
        if (is_null($details_url)) {
            throw new InvalidArgumentException('non-nullable details_url cannot be null');
        }
        $this->container['details_url'] = $details_url;

        return $this;
    }

    /**
     * Gets cc_email_addresses
     *
     * @return string[]|null
     */
    public function getCcEmailAddresses()
    {
        return $this->container['cc_email_addresses'];
    }

    /**
     * Sets cc_email_addresses
     *
     * @param string[]|null $cc_email_addresses A list of email addresses that were CCed on the SignatureRequest. They will receive a copy of the final PDF once all the signers have signed.
     *
     * @return self
     */
    public function setCcEmailAddresses(?array $cc_email_addresses)
    {
        if (is_null($cc_email_addresses)) {
            throw new InvalidArgumentException('non-nullable cc_email_addresses cannot be null');
        }
        $this->container['cc_email_addresses'] = $cc_email_addresses;

        return $this;
    }

    /**
     * Gets signing_redirect_url
     *
     * @return string|null
     */
    public function getSigningRedirectUrl()
    {
        return $this->container['signing_redirect_url'];
    }

    /**
     * Sets signing_redirect_url
     *
     * @param string|null $signing_redirect_url the URL you want the signer redirected to after they successfully sign
     *
     * @return self
     */
    public function setSigningRedirectUrl(?string $signing_redirect_url)
    {
        if (is_null($signing_redirect_url)) {
            array_push($this->openAPINullablesSetToNull, 'signing_redirect_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('signing_redirect_url', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['signing_redirect_url'] = $signing_redirect_url;

        return $this;
    }

    /**
     * Gets final_copy_uri
     *
     * @return string|null
     */
    public function getFinalCopyUri()
    {
        return $this->container['final_copy_uri'];
    }

    /**
     * Sets final_copy_uri
     *
     * @param string|null $final_copy_uri The path where the completed document can be downloaded
     *
     * @return self
     */
    public function setFinalCopyUri(?string $final_copy_uri)
    {
        if (is_null($final_copy_uri)) {
            array_push($this->openAPINullablesSetToNull, 'final_copy_uri');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('final_copy_uri', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['final_copy_uri'] = $final_copy_uri;

        return $this;
    }

    /**
     * Gets template_ids
     *
     * @return string[]|null
     */
    public function getTemplateIds()
    {
        return $this->container['template_ids'];
    }

    /**
     * Sets template_ids
     *
     * @param string[]|null $template_ids templates IDs used in this SignatureRequest (if any)
     *
     * @return self
     */
    public function setTemplateIds(?array $template_ids)
    {
        if (is_null($template_ids)) {
            array_push($this->openAPINullablesSetToNull, 'template_ids');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('template_ids', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['template_ids'] = $template_ids;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return SignatureRequestResponseCustomFieldBase[]|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param SignatureRequestResponseCustomFieldBase[]|null $custom_fields An array of Custom Field objects containing the name and type of each custom field.  * Text Field uses `SignatureRequestResponseCustomFieldText` * Checkbox Field uses `SignatureRequestResponseCustomFieldCheckbox`
     *
     * @return self
     */
    public function setCustomFields(?array $custom_fields)
    {
        if (is_null($custom_fields)) {
            array_push($this->openAPINullablesSetToNull, 'custom_fields');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_fields', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return SignatureRequestResponseAttachment[]|null
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param SignatureRequestResponseAttachment[]|null $attachments signer attachments
     *
     * @return self
     */
    public function setAttachments(?array $attachments)
    {
        if (is_null($attachments)) {
            array_push($this->openAPINullablesSetToNull, 'attachments');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('attachments', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets response_data
     *
     * @return SignatureRequestResponseDataBase[]|null
     */
    public function getResponseData()
    {
        return $this->container['response_data'];
    }

    /**
     * Sets response_data
     *
     * @param SignatureRequestResponseDataBase[]|null $response_data an array of form field objects containing the name, value, and type of each textbox or checkmark field filled in by the signers
     *
     * @return self
     */
    public function setResponseData(?array $response_data)
    {
        if (is_null($response_data)) {
            array_push($this->openAPINullablesSetToNull, 'response_data');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('response_data', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['response_data'] = $response_data;

        return $this;
    }

    /**
     * Gets signatures
     *
     * @return SignatureRequestResponseSignatures[]|null
     */
    public function getSignatures()
    {
        return $this->container['signatures'];
    }

    /**
     * Sets signatures
     *
     * @param SignatureRequestResponseSignatures[]|null $signatures an array of signature objects, 1 for each signer
     *
     * @return self
     */
    public function setSignatures(?array $signatures)
    {
        if (is_null($signatures)) {
            throw new InvalidArgumentException('non-nullable signatures cannot be null');
        }
        $this->container['signatures'] = $signatures;

        return $this;
    }

    /**
     * Gets bulk_send_job_id
     *
     * @return string|null
     */
    public function getBulkSendJobId()
    {
        return $this->container['bulk_send_job_id'];
    }

    /**
     * Sets bulk_send_job_id
     *
     * @param string|null $bulk_send_job_id the ID of the Bulk Send job which sent the signature request, if applicable
     *
     * @return self
     */
    public function setBulkSendJobId(?string $bulk_send_job_id)
    {
        if (is_null($bulk_send_job_id)) {
            array_push($this->openAPINullablesSetToNull, 'bulk_send_job_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bulk_send_job_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bulk_send_job_id'] = $bulk_send_job_id;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    #[ReturnTypeWillChange]
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     */
    #[ReturnTypeWillChange]
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    #[ReturnTypeWillChange]
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_UNESCAPED_SLASHES
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
