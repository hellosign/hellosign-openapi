<?php
/**
 * TemplateApi
 * PHP version 7.4
 *
 * @category Class
 * @see     https://openapi-generator.tech
 */

/**
 * Dropbox Sign API
 *
 * Dropbox Sign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dropbox\Sign\Api;

use Dropbox\Sign\ApiException;
use Dropbox\Sign\Configuration;
use Dropbox\Sign\HeaderSelector;
use Dropbox\Sign\Model;
use Dropbox\Sign\ObjectSerializer;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use InvalidArgumentException;
use JsonException;
use Psr\Http\Message\ResponseInterface;
use RuntimeException;
use SplFileObject;

/**
 * TemplateApi Class Doc Comment
 *
 * @category Class
 * @see     https://openapi-generator.tech
 */
class TemplateApi
{
    /** @var ClientInterface */
    protected $client;

    /** @var Configuration */
    protected $config;

    /** @var HeaderSelector */
    protected $headerSelector;

    /** @var int Host index */
    protected $hostIndex;

    /**
     * @var string[] *
     */
    public const contentTypes = [
        'templateAddUser' => [
            'application/json',
        ],
        'templateCreate' => [
            'application/json',
            'multipart/form-data',
        ],
        'templateCreateEmbeddedDraft' => [
            'application/json',
            'multipart/form-data',
        ],
        'templateDelete' => [
            'application/json',
        ],
        'templateFiles' => [
            'application/json',
        ],
        'templateFilesAsDataUri' => [
            'application/json',
        ],
        'templateFilesAsFileUrl' => [
            'application/json',
        ],
        'templateGet' => [
            'application/json',
        ],
        'templateList' => [
            'application/json',
        ],
        'templateRemoveUser' => [
            'application/json',
        ],
        'templateUpdateFiles' => [
            'application/json',
            'multipart/form-data',
        ],
    ];

    /** @var ResponseInterface|null */
    protected $response;

    /**
     * @param int $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        Configuration $config = null,
        ClientInterface $client = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     * @deprecated To be made private in the future
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     * @deprecated To be made private in the future
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * @return ResponseInterface|null
     */
    public function getResponse()
    {
        return $this->response;
    }

    /**
     * Operation templateAddUser
     *
     * Add User to Template
     *
     * @param string                       $template_id               The id of the Template to give the Account access to. (required)
     * @param Model\TemplateAddUserRequest $template_add_user_request template_add_user_request (required)
     *
     * @return Model\TemplateGetResponse
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     */
    public function templateAddUser(string $template_id, Model\TemplateAddUserRequest $template_add_user_request)
    {
        list($response) = $this->templateAddUserWithHttpInfo($template_id, $template_add_user_request);
        return $response;
    }

    /**
     * Operation templateAddUserWithHttpInfo
     *
     * Add User to Template
     *
     * @param string                       $template_id               The id of the Template to give the Account access to. (required)
     * @param Model\TemplateAddUserRequest $template_add_user_request (required)
     * @param string                       $contentType               The value for the Content-Type header. Check self::contentTypes['templateAddUser'] to see the possible values for this operation
     *
     * @return array of Model\TemplateGetResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::templateAddUser. This method will eventually become unavailable
     */
    public function templateAddUserWithHttpInfo(string $template_id, Model\TemplateAddUserRequest $template_add_user_request, string $contentType = self::contentTypes['templateAddUser'][0])
    {
        $request = $this->templateAddUserRequest($template_id, $template_add_user_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->response = $response;
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            $result = $this->handleRangeCodeResponse(
                $response,
                '4XX',
                '\Dropbox\Sign\Model\ErrorResponse'
            );
            if ($result) {
                return $result;
            }

            switch ($statusCode) {
                case 200:
                    if ('\Dropbox\Sign\Model\TemplateGetResponse' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ('\Dropbox\Sign\Model\TemplateGetResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dropbox\Sign\Model\TemplateGetResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Dropbox\Sign\Model\TemplateGetResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string)$response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            if ($this->handleRangeCodeException($e, '4XX', '\Dropbox\Sign\Model\ErrorResponse')) {
                throw $e;
            }
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dropbox\Sign\Model\TemplateGetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation templateAddUserAsync
     *
     * Add User to Template
     *
     * @param string                       $template_id               The id of the Template to give the Account access to. (required)
     * @param Model\TemplateAddUserRequest $template_add_user_request (required)
     * @param string                       $contentType               The value for the Content-Type header. Check self::contentTypes['templateAddUser'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::templateAddUser. This method will eventually become unavailable
     */
    public function templateAddUserAsync(string $template_id, Model\TemplateAddUserRequest $template_add_user_request, string $contentType = self::contentTypes['templateAddUser'][0])
    {
        return $this->templateAddUserAsyncWithHttpInfo($template_id, $template_add_user_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation templateAddUserAsyncWithHttpInfo
     *
     * Add User to Template
     *
     * @param string                       $template_id               The id of the Template to give the Account access to. (required)
     * @param Model\TemplateAddUserRequest $template_add_user_request (required)
     * @param string                       $contentType               The value for the Content-Type header. Check self::contentTypes['templateAddUser'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::templateAddUser. This method will eventually become unavailable
     */
    public function templateAddUserAsyncWithHttpInfo(string $template_id, Model\TemplateAddUserRequest $template_add_user_request, string $contentType = self::contentTypes['templateAddUser'][0])
    {
        $returnType = '\Dropbox\Sign\Model\TemplateGetResponse';
        $request = $this->templateAddUserRequest($template_id, $template_add_user_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'templateAddUser'
     *
     * @param string                       $template_id               The id of the Template to give the Account access to. (required)
     * @param Model\TemplateAddUserRequest $template_add_user_request (required)
     * @param string                       $contentType               The value for the Content-Type header. Check self::contentTypes['templateAddUser'] to see the possible values for this operation
     *
     * @return Request
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::templateAddUser. This method will eventually become unavailable
     */
    public function templateAddUserRequest(string $template_id, Model\TemplateAddUserRequest $template_add_user_request, string $contentType = self::contentTypes['templateAddUser'][0])
    {
        // verify the required parameter 'template_id' is set
        if ($template_id === null || (is_array($template_id) && count($template_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $template_id when calling templateAddUser'
            );
        }

        // verify the required parameter 'template_add_user_request' is set
        if ($template_add_user_request === null || (is_array($template_add_user_request) && count($template_add_user_request) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $template_add_user_request when calling templateAddUser'
            );
        }

        $resourcePath = '/template/add_user/{template_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $formParams = ObjectSerializer::getFormParams(
            $template_add_user_request
        );

        $multipart = !empty($formParams);

        // path params
        if ($template_id !== null) {
            $resourcePath = str_replace(
                '{template_id}',
                ObjectSerializer::toPathValue($template_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            $multipart ? ['multipart/form-data'] : ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) === 0) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($template_add_user_request));
            } else {
                $httpBody = $template_add_user_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name'     => 'body',
                        'contents' => $body,
                        'headers'  => ['Content-Type' => 'application/json'],
                    ];
                }

                if ($payloadHook = $this->config->getPayloadHook()) {
                    $payloadHook('multipart', $multipartContents, $template_add_user_request);
                }
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':');
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation templateCreate
     *
     * Create Template
     *
     * @param Model\TemplateCreateRequest $template_create_request template_create_request (required)
     *
     * @return Model\TemplateCreateResponse
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     */
    public function templateCreate(Model\TemplateCreateRequest $template_create_request)
    {
        list($response) = $this->templateCreateWithHttpInfo($template_create_request);
        return $response;
    }

    /**
     * Operation templateCreateWithHttpInfo
     *
     * Create Template
     *
     * @param Model\TemplateCreateRequest $template_create_request (required)
     * @param string                      $contentType             The value for the Content-Type header. Check self::contentTypes['templateCreate'] to see the possible values for this operation
     *
     * @return array of Model\TemplateCreateResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::templateCreate. This method will eventually become unavailable
     */
    public function templateCreateWithHttpInfo(Model\TemplateCreateRequest $template_create_request, string $contentType = self::contentTypes['templateCreate'][0])
    {
        $request = $this->templateCreateRequest($template_create_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->response = $response;
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            $result = $this->handleRangeCodeResponse(
                $response,
                '4XX',
                '\Dropbox\Sign\Model\ErrorResponse'
            );
            if ($result) {
                return $result;
            }

            switch ($statusCode) {
                case 200:
                    if ('\Dropbox\Sign\Model\TemplateCreateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ('\Dropbox\Sign\Model\TemplateCreateResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dropbox\Sign\Model\TemplateCreateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Dropbox\Sign\Model\TemplateCreateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string)$response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            if ($this->handleRangeCodeException($e, '4XX', '\Dropbox\Sign\Model\ErrorResponse')) {
                throw $e;
            }
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dropbox\Sign\Model\TemplateCreateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation templateCreateAsync
     *
     * Create Template
     *
     * @param Model\TemplateCreateRequest $template_create_request (required)
     * @param string                      $contentType             The value for the Content-Type header. Check self::contentTypes['templateCreate'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::templateCreate. This method will eventually become unavailable
     */
    public function templateCreateAsync(Model\TemplateCreateRequest $template_create_request, string $contentType = self::contentTypes['templateCreate'][0])
    {
        return $this->templateCreateAsyncWithHttpInfo($template_create_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation templateCreateAsyncWithHttpInfo
     *
     * Create Template
     *
     * @param Model\TemplateCreateRequest $template_create_request (required)
     * @param string                      $contentType             The value for the Content-Type header. Check self::contentTypes['templateCreate'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::templateCreate. This method will eventually become unavailable
     */
    public function templateCreateAsyncWithHttpInfo(Model\TemplateCreateRequest $template_create_request, string $contentType = self::contentTypes['templateCreate'][0])
    {
        $returnType = '\Dropbox\Sign\Model\TemplateCreateResponse';
        $request = $this->templateCreateRequest($template_create_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'templateCreate'
     *
     * @param Model\TemplateCreateRequest $template_create_request (required)
     * @param string                      $contentType             The value for the Content-Type header. Check self::contentTypes['templateCreate'] to see the possible values for this operation
     *
     * @return Request
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::templateCreate. This method will eventually become unavailable
     */
    public function templateCreateRequest(Model\TemplateCreateRequest $template_create_request, string $contentType = self::contentTypes['templateCreate'][0])
    {
        // verify the required parameter 'template_create_request' is set
        if ($template_create_request === null || (is_array($template_create_request) && count($template_create_request) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $template_create_request when calling templateCreate'
            );
        }

        $resourcePath = '/template/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $formParams = ObjectSerializer::getFormParams(
            $template_create_request
        );

        $multipart = !empty($formParams);

        $headers = $this->headerSelector->selectHeaders(
            $multipart ? ['multipart/form-data'] : ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) === 0) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($template_create_request));
            } else {
                $httpBody = $template_create_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name'     => 'body',
                        'contents' => $body,
                        'headers'  => ['Content-Type' => 'application/json'],
                    ];
                }

                if ($payloadHook = $this->config->getPayloadHook()) {
                    $payloadHook('multipart', $multipartContents, $template_create_request);
                }
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':');
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation templateCreateEmbeddedDraft
     *
     * Create Embedded Template Draft
     *
     * @param Model\TemplateCreateEmbeddedDraftRequest $template_create_embedded_draft_request template_create_embedded_draft_request (required)
     *
     * @return Model\TemplateCreateEmbeddedDraftResponse
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     */
    public function templateCreateEmbeddedDraft(Model\TemplateCreateEmbeddedDraftRequest $template_create_embedded_draft_request)
    {
        list($response) = $this->templateCreateEmbeddedDraftWithHttpInfo($template_create_embedded_draft_request);
        return $response;
    }

    /**
     * Operation templateCreateEmbeddedDraftWithHttpInfo
     *
     * Create Embedded Template Draft
     *
     * @param Model\TemplateCreateEmbeddedDraftRequest $template_create_embedded_draft_request (required)
     * @param string                                   $contentType                            The value for the Content-Type header. Check self::contentTypes['templateCreateEmbeddedDraft'] to see the possible values for this operation
     *
     * @return array of Model\TemplateCreateEmbeddedDraftResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::templateCreateEmbeddedDraft. This method will eventually become unavailable
     */
    public function templateCreateEmbeddedDraftWithHttpInfo(Model\TemplateCreateEmbeddedDraftRequest $template_create_embedded_draft_request, string $contentType = self::contentTypes['templateCreateEmbeddedDraft'][0])
    {
        $request = $this->templateCreateEmbeddedDraftRequest($template_create_embedded_draft_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->response = $response;
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            $result = $this->handleRangeCodeResponse(
                $response,
                '4XX',
                '\Dropbox\Sign\Model\ErrorResponse'
            );
            if ($result) {
                return $result;
            }

            switch ($statusCode) {
                case 200:
                    if ('\Dropbox\Sign\Model\TemplateCreateEmbeddedDraftResponse' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ('\Dropbox\Sign\Model\TemplateCreateEmbeddedDraftResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dropbox\Sign\Model\TemplateCreateEmbeddedDraftResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Dropbox\Sign\Model\TemplateCreateEmbeddedDraftResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string)$response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            if ($this->handleRangeCodeException($e, '4XX', '\Dropbox\Sign\Model\ErrorResponse')) {
                throw $e;
            }
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dropbox\Sign\Model\TemplateCreateEmbeddedDraftResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation templateCreateEmbeddedDraftAsync
     *
     * Create Embedded Template Draft
     *
     * @param Model\TemplateCreateEmbeddedDraftRequest $template_create_embedded_draft_request (required)
     * @param string                                   $contentType                            The value for the Content-Type header. Check self::contentTypes['templateCreateEmbeddedDraft'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::templateCreateEmbeddedDraft. This method will eventually become unavailable
     */
    public function templateCreateEmbeddedDraftAsync(Model\TemplateCreateEmbeddedDraftRequest $template_create_embedded_draft_request, string $contentType = self::contentTypes['templateCreateEmbeddedDraft'][0])
    {
        return $this->templateCreateEmbeddedDraftAsyncWithHttpInfo($template_create_embedded_draft_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation templateCreateEmbeddedDraftAsyncWithHttpInfo
     *
     * Create Embedded Template Draft
     *
     * @param Model\TemplateCreateEmbeddedDraftRequest $template_create_embedded_draft_request (required)
     * @param string                                   $contentType                            The value for the Content-Type header. Check self::contentTypes['templateCreateEmbeddedDraft'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::templateCreateEmbeddedDraft. This method will eventually become unavailable
     */
    public function templateCreateEmbeddedDraftAsyncWithHttpInfo(Model\TemplateCreateEmbeddedDraftRequest $template_create_embedded_draft_request, string $contentType = self::contentTypes['templateCreateEmbeddedDraft'][0])
    {
        $returnType = '\Dropbox\Sign\Model\TemplateCreateEmbeddedDraftResponse';
        $request = $this->templateCreateEmbeddedDraftRequest($template_create_embedded_draft_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'templateCreateEmbeddedDraft'
     *
     * @param Model\TemplateCreateEmbeddedDraftRequest $template_create_embedded_draft_request (required)
     * @param string                                   $contentType                            The value for the Content-Type header. Check self::contentTypes['templateCreateEmbeddedDraft'] to see the possible values for this operation
     *
     * @return Request
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::templateCreateEmbeddedDraft. This method will eventually become unavailable
     */
    public function templateCreateEmbeddedDraftRequest(Model\TemplateCreateEmbeddedDraftRequest $template_create_embedded_draft_request, string $contentType = self::contentTypes['templateCreateEmbeddedDraft'][0])
    {
        // verify the required parameter 'template_create_embedded_draft_request' is set
        if ($template_create_embedded_draft_request === null || (is_array($template_create_embedded_draft_request) && count($template_create_embedded_draft_request) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $template_create_embedded_draft_request when calling templateCreateEmbeddedDraft'
            );
        }

        $resourcePath = '/template/create_embedded_draft';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $formParams = ObjectSerializer::getFormParams(
            $template_create_embedded_draft_request
        );

        $multipart = !empty($formParams);

        $headers = $this->headerSelector->selectHeaders(
            $multipart ? ['multipart/form-data'] : ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) === 0) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($template_create_embedded_draft_request));
            } else {
                $httpBody = $template_create_embedded_draft_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name'     => 'body',
                        'contents' => $body,
                        'headers'  => ['Content-Type' => 'application/json'],
                    ];
                }

                if ($payloadHook = $this->config->getPayloadHook()) {
                    $payloadHook('multipart', $multipartContents, $template_create_embedded_draft_request);
                }
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':');
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation templateDelete
     *
     * Delete Template
     *
     * @param string $template_id The id of the Template to delete. (required)
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     */
    public function templateDelete(string $template_id)
    {
        $this->templateDeleteWithHttpInfo($template_id);
    }

    /**
     * Operation templateDeleteWithHttpInfo
     *
     * Delete Template
     *
     * @param string $template_id The id of the Template to delete. (required)
     * @param string $contentType The value for the Content-Type header. Check self::contentTypes['templateDelete'] to see the possible values for this operation
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::templateDelete. This method will eventually become unavailable
     */
    public function templateDeleteWithHttpInfo(string $template_id, string $contentType = self::contentTypes['templateDelete'][0])
    {
        $request = $this->templateDeleteRequest($template_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->response = $response;
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            if ($this->handleRangeCodeException($e, '4XX', '\Dropbox\Sign\Model\ErrorResponse')) {
                throw $e;
            }
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation templateDeleteAsync
     *
     * Delete Template
     *
     * @param string $template_id The id of the Template to delete. (required)
     * @param string $contentType The value for the Content-Type header. Check self::contentTypes['templateDelete'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::templateDelete. This method will eventually become unavailable
     */
    public function templateDeleteAsync(string $template_id, string $contentType = self::contentTypes['templateDelete'][0])
    {
        return $this->templateDeleteAsyncWithHttpInfo($template_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation templateDeleteAsyncWithHttpInfo
     *
     * Delete Template
     *
     * @param string $template_id The id of the Template to delete. (required)
     * @param string $contentType The value for the Content-Type header. Check self::contentTypes['templateDelete'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::templateDelete. This method will eventually become unavailable
     */
    public function templateDeleteAsyncWithHttpInfo(string $template_id, string $contentType = self::contentTypes['templateDelete'][0])
    {
        $returnType = '';
        $request = $this->templateDeleteRequest($template_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'templateDelete'
     *
     * @param string $template_id The id of the Template to delete. (required)
     * @param string $contentType The value for the Content-Type header. Check self::contentTypes['templateDelete'] to see the possible values for this operation
     *
     * @return Request
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::templateDelete. This method will eventually become unavailable
     */
    public function templateDeleteRequest(string $template_id, string $contentType = self::contentTypes['templateDelete'][0])
    {
        // verify the required parameter 'template_id' is set
        if ($template_id === null || (is_array($template_id) && count($template_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $template_id when calling templateDelete'
            );
        }

        $resourcePath = '/template/delete/{template_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($template_id !== null) {
            $resourcePath = str_replace(
                '{template_id}',
                ObjectSerializer::toPathValue($template_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            $multipart ? ['multipart/form-data'] : ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name'     => 'body',
                        'contents' => $body,
                        'headers'  => ['Content-Type' => 'application/json'],
                    ];
                }

                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':');
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation templateFiles
     *
     * Get Template Files
     *
     * @param string $template_id The id of the template files to retrieve. (required)
     * @param string $file_type   Set to &#x60;pdf&#x60; for a single merged document or &#x60;zip&#x60; for a collection of individual documents. (optional)
     *
     * @return SplFileObject
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     */
    public function templateFiles(string $template_id, string $file_type = null)
    {
        list($response) = $this->templateFilesWithHttpInfo($template_id, $file_type);
        return $response;
    }

    /**
     * Operation templateFilesWithHttpInfo
     *
     * Get Template Files
     *
     * @param string $template_id The id of the template files to retrieve. (required)
     * @param string $file_type   Set to &#x60;pdf&#x60; for a single merged document or &#x60;zip&#x60; for a collection of individual documents. (optional)
     * @param string $contentType The value for the Content-Type header. Check self::contentTypes['templateFiles'] to see the possible values for this operation
     *
     * @return array of \SplFileObject|\Dropbox\Sign\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::templateFiles. This method will eventually become unavailable
     */
    public function templateFilesWithHttpInfo(string $template_id, string $file_type = null, string $contentType = self::contentTypes['templateFiles'][0])
    {
        $request = $this->templateFilesRequest($template_id, $file_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->response = $response;
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            $result = $this->handleRangeCodeResponse(
                $response,
                '4XX',
                '\Dropbox\Sign\Model\ErrorResponse'
            );
            if ($result) {
                return $result;
            }

            switch ($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string)$response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            if ($this->handleRangeCodeException($e, '4XX', '\Dropbox\Sign\Model\ErrorResponse')) {
                throw $e;
            }
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation templateFilesAsync
     *
     * Get Template Files
     *
     * @param string $template_id The id of the template files to retrieve. (required)
     * @param string $file_type   Set to &#x60;pdf&#x60; for a single merged document or &#x60;zip&#x60; for a collection of individual documents. (optional)
     * @param string $contentType The value for the Content-Type header. Check self::contentTypes['templateFiles'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::templateFiles. This method will eventually become unavailable
     */
    public function templateFilesAsync(string $template_id, string $file_type = null, string $contentType = self::contentTypes['templateFiles'][0])
    {
        return $this->templateFilesAsyncWithHttpInfo($template_id, $file_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation templateFilesAsyncWithHttpInfo
     *
     * Get Template Files
     *
     * @param string $template_id The id of the template files to retrieve. (required)
     * @param string $file_type   Set to &#x60;pdf&#x60; for a single merged document or &#x60;zip&#x60; for a collection of individual documents. (optional)
     * @param string $contentType The value for the Content-Type header. Check self::contentTypes['templateFiles'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::templateFiles. This method will eventually become unavailable
     */
    public function templateFilesAsyncWithHttpInfo(string $template_id, string $file_type = null, string $contentType = self::contentTypes['templateFiles'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->templateFilesRequest($template_id, $file_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'templateFiles'
     *
     * @param string $template_id The id of the template files to retrieve. (required)
     * @param string $file_type   Set to &#x60;pdf&#x60; for a single merged document or &#x60;zip&#x60; for a collection of individual documents. (optional)
     * @param string $contentType The value for the Content-Type header. Check self::contentTypes['templateFiles'] to see the possible values for this operation
     *
     * @return Request
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::templateFiles. This method will eventually become unavailable
     */
    public function templateFilesRequest(string $template_id, string $file_type = null, string $contentType = self::contentTypes['templateFiles'][0])
    {
        // verify the required parameter 'template_id' is set
        if ($template_id === null || (is_array($template_id) && count($template_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $template_id when calling templateFiles'
            );
        }

        $resourcePath = '/template/files/{template_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $file_type,
            'file_type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // path params
        if ($template_id !== null) {
            $resourcePath = str_replace(
                '{template_id}',
                ObjectSerializer::toPathValue($template_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            $multipart ? ['multipart/form-data'] : ['application/pdf', 'application/zip', 'application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name'     => 'body',
                        'contents' => $body,
                        'headers'  => ['Content-Type' => 'application/json'],
                    ];
                }

                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':');
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation templateFilesAsDataUri
     *
     * Get Template Files as Data Uri
     *
     * @param string $template_id The id of the template files to retrieve. (required)
     *
     * @return Model\FileResponseDataUri
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     */
    public function templateFilesAsDataUri(string $template_id)
    {
        list($response) = $this->templateFilesAsDataUriWithHttpInfo($template_id);
        return $response;
    }

    /**
     * Operation templateFilesAsDataUriWithHttpInfo
     *
     * Get Template Files as Data Uri
     *
     * @param string $template_id The id of the template files to retrieve. (required)
     * @param string $contentType The value for the Content-Type header. Check self::contentTypes['templateFilesAsDataUri'] to see the possible values for this operation
     *
     * @return array of Model\FileResponseDataUri, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::templateFilesAsDataUri. This method will eventually become unavailable
     */
    public function templateFilesAsDataUriWithHttpInfo(string $template_id, string $contentType = self::contentTypes['templateFilesAsDataUri'][0])
    {
        $request = $this->templateFilesAsDataUriRequest($template_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->response = $response;
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            $result = $this->handleRangeCodeResponse(
                $response,
                '4XX',
                '\Dropbox\Sign\Model\ErrorResponse'
            );
            if ($result) {
                return $result;
            }

            switch ($statusCode) {
                case 200:
                    if ('\Dropbox\Sign\Model\FileResponseDataUri' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ('\Dropbox\Sign\Model\FileResponseDataUri' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dropbox\Sign\Model\FileResponseDataUri', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Dropbox\Sign\Model\FileResponseDataUri';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string)$response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            if ($this->handleRangeCodeException($e, '4XX', '\Dropbox\Sign\Model\ErrorResponse')) {
                throw $e;
            }
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dropbox\Sign\Model\FileResponseDataUri',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation templateFilesAsDataUriAsync
     *
     * Get Template Files as Data Uri
     *
     * @param string $template_id The id of the template files to retrieve. (required)
     * @param string $contentType The value for the Content-Type header. Check self::contentTypes['templateFilesAsDataUri'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::templateFilesAsDataUri. This method will eventually become unavailable
     */
    public function templateFilesAsDataUriAsync(string $template_id, string $contentType = self::contentTypes['templateFilesAsDataUri'][0])
    {
        return $this->templateFilesAsDataUriAsyncWithHttpInfo($template_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation templateFilesAsDataUriAsyncWithHttpInfo
     *
     * Get Template Files as Data Uri
     *
     * @param string $template_id The id of the template files to retrieve. (required)
     * @param string $contentType The value for the Content-Type header. Check self::contentTypes['templateFilesAsDataUri'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::templateFilesAsDataUri. This method will eventually become unavailable
     */
    public function templateFilesAsDataUriAsyncWithHttpInfo(string $template_id, string $contentType = self::contentTypes['templateFilesAsDataUri'][0])
    {
        $returnType = '\Dropbox\Sign\Model\FileResponseDataUri';
        $request = $this->templateFilesAsDataUriRequest($template_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'templateFilesAsDataUri'
     *
     * @param string $template_id The id of the template files to retrieve. (required)
     * @param string $contentType The value for the Content-Type header. Check self::contentTypes['templateFilesAsDataUri'] to see the possible values for this operation
     *
     * @return Request
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::templateFilesAsDataUri. This method will eventually become unavailable
     */
    public function templateFilesAsDataUriRequest(string $template_id, string $contentType = self::contentTypes['templateFilesAsDataUri'][0])
    {
        // verify the required parameter 'template_id' is set
        if ($template_id === null || (is_array($template_id) && count($template_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $template_id when calling templateFilesAsDataUri'
            );
        }

        $resourcePath = '/template/files_as_data_uri/{template_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($template_id !== null) {
            $resourcePath = str_replace(
                '{template_id}',
                ObjectSerializer::toPathValue($template_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            $multipart ? ['multipart/form-data'] : ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name'     => 'body',
                        'contents' => $body,
                        'headers'  => ['Content-Type' => 'application/json'],
                    ];
                }

                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':');
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation templateFilesAsFileUrl
     *
     * Get Template Files as File Url
     *
     * @param string $template_id    The id of the template files to retrieve. (required)
     * @param int    $force_download By default when opening the &#x60;file_url&#x60; a browser will download the PDF and save it locally. When set to &#x60;0&#x60; the PDF file will be displayed in the browser. (optional, default to 1)
     *
     * @return Model\FileResponse
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     */
    public function templateFilesAsFileUrl(string $template_id, int $force_download = 1)
    {
        list($response) = $this->templateFilesAsFileUrlWithHttpInfo($template_id, $force_download);
        return $response;
    }

    /**
     * Operation templateFilesAsFileUrlWithHttpInfo
     *
     * Get Template Files as File Url
     *
     * @param string $template_id    The id of the template files to retrieve. (required)
     * @param int    $force_download By default when opening the &#x60;file_url&#x60; a browser will download the PDF and save it locally. When set to &#x60;0&#x60; the PDF file will be displayed in the browser. (optional, default to 1)
     * @param string $contentType    The value for the Content-Type header. Check self::contentTypes['templateFilesAsFileUrl'] to see the possible values for this operation
     *
     * @return array of Model\FileResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::templateFilesAsFileUrl. This method will eventually become unavailable
     */
    public function templateFilesAsFileUrlWithHttpInfo(string $template_id, int $force_download = 1, string $contentType = self::contentTypes['templateFilesAsFileUrl'][0])
    {
        $request = $this->templateFilesAsFileUrlRequest($template_id, $force_download, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->response = $response;
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            $result = $this->handleRangeCodeResponse(
                $response,
                '4XX',
                '\Dropbox\Sign\Model\ErrorResponse'
            );
            if ($result) {
                return $result;
            }

            switch ($statusCode) {
                case 200:
                    if ('\Dropbox\Sign\Model\FileResponse' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ('\Dropbox\Sign\Model\FileResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dropbox\Sign\Model\FileResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Dropbox\Sign\Model\FileResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string)$response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            if ($this->handleRangeCodeException($e, '4XX', '\Dropbox\Sign\Model\ErrorResponse')) {
                throw $e;
            }
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dropbox\Sign\Model\FileResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation templateFilesAsFileUrlAsync
     *
     * Get Template Files as File Url
     *
     * @param string $template_id    The id of the template files to retrieve. (required)
     * @param int    $force_download By default when opening the &#x60;file_url&#x60; a browser will download the PDF and save it locally. When set to &#x60;0&#x60; the PDF file will be displayed in the browser. (optional, default to 1)
     * @param string $contentType    The value for the Content-Type header. Check self::contentTypes['templateFilesAsFileUrl'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::templateFilesAsFileUrl. This method will eventually become unavailable
     */
    public function templateFilesAsFileUrlAsync(string $template_id, int $force_download = 1, string $contentType = self::contentTypes['templateFilesAsFileUrl'][0])
    {
        return $this->templateFilesAsFileUrlAsyncWithHttpInfo($template_id, $force_download, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation templateFilesAsFileUrlAsyncWithHttpInfo
     *
     * Get Template Files as File Url
     *
     * @param string $template_id    The id of the template files to retrieve. (required)
     * @param int    $force_download By default when opening the &#x60;file_url&#x60; a browser will download the PDF and save it locally. When set to &#x60;0&#x60; the PDF file will be displayed in the browser. (optional, default to 1)
     * @param string $contentType    The value for the Content-Type header. Check self::contentTypes['templateFilesAsFileUrl'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::templateFilesAsFileUrl. This method will eventually become unavailable
     */
    public function templateFilesAsFileUrlAsyncWithHttpInfo(string $template_id, int $force_download = 1, string $contentType = self::contentTypes['templateFilesAsFileUrl'][0])
    {
        $returnType = '\Dropbox\Sign\Model\FileResponse';
        $request = $this->templateFilesAsFileUrlRequest($template_id, $force_download, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'templateFilesAsFileUrl'
     *
     * @param string $template_id    The id of the template files to retrieve. (required)
     * @param int    $force_download By default when opening the &#x60;file_url&#x60; a browser will download the PDF and save it locally. When set to &#x60;0&#x60; the PDF file will be displayed in the browser. (optional, default to 1)
     * @param string $contentType    The value for the Content-Type header. Check self::contentTypes['templateFilesAsFileUrl'] to see the possible values for this operation
     *
     * @return Request
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::templateFilesAsFileUrl. This method will eventually become unavailable
     */
    public function templateFilesAsFileUrlRequest(string $template_id, int $force_download = 1, string $contentType = self::contentTypes['templateFilesAsFileUrl'][0])
    {
        // verify the required parameter 'template_id' is set
        if ($template_id === null || (is_array($template_id) && count($template_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $template_id when calling templateFilesAsFileUrl'
            );
        }

        $resourcePath = '/template/files_as_file_url/{template_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $force_download,
            'force_download', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // path params
        if ($template_id !== null) {
            $resourcePath = str_replace(
                '{template_id}',
                ObjectSerializer::toPathValue($template_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            $multipart ? ['multipart/form-data'] : ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name'     => 'body',
                        'contents' => $body,
                        'headers'  => ['Content-Type' => 'application/json'],
                    ];
                }

                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':');
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation templateGet
     *
     * Get Template
     *
     * @param string $template_id The id of the Template to retrieve. (required)
     *
     * @return Model\TemplateGetResponse
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     */
    public function templateGet(string $template_id)
    {
        list($response) = $this->templateGetWithHttpInfo($template_id);
        return $response;
    }

    /**
     * Operation templateGetWithHttpInfo
     *
     * Get Template
     *
     * @param string $template_id The id of the Template to retrieve. (required)
     * @param string $contentType The value for the Content-Type header. Check self::contentTypes['templateGet'] to see the possible values for this operation
     *
     * @return array of Model\TemplateGetResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::templateGet. This method will eventually become unavailable
     */
    public function templateGetWithHttpInfo(string $template_id, string $contentType = self::contentTypes['templateGet'][0])
    {
        $request = $this->templateGetRequest($template_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->response = $response;
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            $result = $this->handleRangeCodeResponse(
                $response,
                '4XX',
                '\Dropbox\Sign\Model\ErrorResponse'
            );
            if ($result) {
                return $result;
            }

            switch ($statusCode) {
                case 200:
                    if ('\Dropbox\Sign\Model\TemplateGetResponse' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ('\Dropbox\Sign\Model\TemplateGetResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dropbox\Sign\Model\TemplateGetResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Dropbox\Sign\Model\TemplateGetResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string)$response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            if ($this->handleRangeCodeException($e, '4XX', '\Dropbox\Sign\Model\ErrorResponse')) {
                throw $e;
            }
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dropbox\Sign\Model\TemplateGetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation templateGetAsync
     *
     * Get Template
     *
     * @param string $template_id The id of the Template to retrieve. (required)
     * @param string $contentType The value for the Content-Type header. Check self::contentTypes['templateGet'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::templateGet. This method will eventually become unavailable
     */
    public function templateGetAsync(string $template_id, string $contentType = self::contentTypes['templateGet'][0])
    {
        return $this->templateGetAsyncWithHttpInfo($template_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation templateGetAsyncWithHttpInfo
     *
     * Get Template
     *
     * @param string $template_id The id of the Template to retrieve. (required)
     * @param string $contentType The value for the Content-Type header. Check self::contentTypes['templateGet'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::templateGet. This method will eventually become unavailable
     */
    public function templateGetAsyncWithHttpInfo(string $template_id, string $contentType = self::contentTypes['templateGet'][0])
    {
        $returnType = '\Dropbox\Sign\Model\TemplateGetResponse';
        $request = $this->templateGetRequest($template_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'templateGet'
     *
     * @param string $template_id The id of the Template to retrieve. (required)
     * @param string $contentType The value for the Content-Type header. Check self::contentTypes['templateGet'] to see the possible values for this operation
     *
     * @return Request
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::templateGet. This method will eventually become unavailable
     */
    public function templateGetRequest(string $template_id, string $contentType = self::contentTypes['templateGet'][0])
    {
        // verify the required parameter 'template_id' is set
        if ($template_id === null || (is_array($template_id) && count($template_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $template_id when calling templateGet'
            );
        }

        $resourcePath = '/template/{template_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($template_id !== null) {
            $resourcePath = str_replace(
                '{template_id}',
                ObjectSerializer::toPathValue($template_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            $multipart ? ['multipart/form-data'] : ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name'     => 'body',
                        'contents' => $body,
                        'headers'  => ['Content-Type' => 'application/json'],
                    ];
                }

                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':');
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation templateList
     *
     * List Templates
     *
     * @param string $account_id Which account to return Templates for. Must be a team member. Use &#x60;all&#x60; to indicate all team members. Defaults to your account. (optional)
     * @param int    $page       Which page number of the Template List to return. Defaults to &#x60;1&#x60;. (optional, default to 1)
     * @param int    $page_size  Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)
     * @param string $query      String that includes search terms and/or fields to be used to filter the Template objects. (optional)
     *
     * @return Model\TemplateListResponse
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     */
    public function templateList(string $account_id = null, int $page = 1, int $page_size = 20, string $query = null)
    {
        list($response) = $this->templateListWithHttpInfo($account_id, $page, $page_size, $query);
        return $response;
    }

    /**
     * Operation templateListWithHttpInfo
     *
     * List Templates
     *
     * @param string $account_id  Which account to return Templates for. Must be a team member. Use &#x60;all&#x60; to indicate all team members. Defaults to your account. (optional)
     * @param int    $page        Which page number of the Template List to return. Defaults to &#x60;1&#x60;. (optional, default to 1)
     * @param int    $page_size   Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)
     * @param string $query       String that includes search terms and/or fields to be used to filter the Template objects. (optional)
     * @param string $contentType The value for the Content-Type header. Check self::contentTypes['templateList'] to see the possible values for this operation
     *
     * @return array of Model\TemplateListResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::templateList. This method will eventually become unavailable
     */
    public function templateListWithHttpInfo(string $account_id = null, int $page = 1, int $page_size = 20, string $query = null, string $contentType = self::contentTypes['templateList'][0])
    {
        $request = $this->templateListRequest($account_id, $page, $page_size, $query, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->response = $response;
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            $result = $this->handleRangeCodeResponse(
                $response,
                '4XX',
                '\Dropbox\Sign\Model\ErrorResponse'
            );
            if ($result) {
                return $result;
            }

            switch ($statusCode) {
                case 200:
                    if ('\Dropbox\Sign\Model\TemplateListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ('\Dropbox\Sign\Model\TemplateListResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dropbox\Sign\Model\TemplateListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Dropbox\Sign\Model\TemplateListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string)$response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            if ($this->handleRangeCodeException($e, '4XX', '\Dropbox\Sign\Model\ErrorResponse')) {
                throw $e;
            }
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dropbox\Sign\Model\TemplateListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation templateListAsync
     *
     * List Templates
     *
     * @param string $account_id  Which account to return Templates for. Must be a team member. Use &#x60;all&#x60; to indicate all team members. Defaults to your account. (optional)
     * @param int    $page        Which page number of the Template List to return. Defaults to &#x60;1&#x60;. (optional, default to 1)
     * @param int    $page_size   Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)
     * @param string $query       String that includes search terms and/or fields to be used to filter the Template objects. (optional)
     * @param string $contentType The value for the Content-Type header. Check self::contentTypes['templateList'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::templateList. This method will eventually become unavailable
     */
    public function templateListAsync(string $account_id = null, int $page = 1, int $page_size = 20, string $query = null, string $contentType = self::contentTypes['templateList'][0])
    {
        return $this->templateListAsyncWithHttpInfo($account_id, $page, $page_size, $query, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation templateListAsyncWithHttpInfo
     *
     * List Templates
     *
     * @param string $account_id  Which account to return Templates for. Must be a team member. Use &#x60;all&#x60; to indicate all team members. Defaults to your account. (optional)
     * @param int    $page        Which page number of the Template List to return. Defaults to &#x60;1&#x60;. (optional, default to 1)
     * @param int    $page_size   Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)
     * @param string $query       String that includes search terms and/or fields to be used to filter the Template objects. (optional)
     * @param string $contentType The value for the Content-Type header. Check self::contentTypes['templateList'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::templateList. This method will eventually become unavailable
     */
    public function templateListAsyncWithHttpInfo(string $account_id = null, int $page = 1, int $page_size = 20, string $query = null, string $contentType = self::contentTypes['templateList'][0])
    {
        $returnType = '\Dropbox\Sign\Model\TemplateListResponse';
        $request = $this->templateListRequest($account_id, $page, $page_size, $query, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'templateList'
     *
     * @param string $account_id  Which account to return Templates for. Must be a team member. Use &#x60;all&#x60; to indicate all team members. Defaults to your account. (optional)
     * @param int    $page        Which page number of the Template List to return. Defaults to &#x60;1&#x60;. (optional, default to 1)
     * @param int    $page_size   Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)
     * @param string $query       String that includes search terms and/or fields to be used to filter the Template objects. (optional)
     * @param string $contentType The value for the Content-Type header. Check self::contentTypes['templateList'] to see the possible values for this operation
     *
     * @return Request
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::templateList. This method will eventually become unavailable
     */
    public function templateListRequest(string $account_id = null, int $page = 1, int $page_size = 20, string $query = null, string $contentType = self::contentTypes['templateList'][0])
    {
        if ($page_size !== null && $page_size > 100) {
            throw new InvalidArgumentException('invalid value for "$page_size" when calling TemplateApi.templateList, must be smaller than or equal to 100.');
        }
        if ($page_size !== null && $page_size < 1) {
            throw new InvalidArgumentException('invalid value for "$page_size" when calling TemplateApi.templateList, must be bigger than or equal to 1.');
        }

        $resourcePath = '/template/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $account_id,
            'account_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        $headers = $this->headerSelector->selectHeaders(
            $multipart ? ['multipart/form-data'] : ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name'     => 'body',
                        'contents' => $body,
                        'headers'  => ['Content-Type' => 'application/json'],
                    ];
                }

                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':');
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation templateRemoveUser
     *
     * Remove User from Template
     *
     * @param string                          $template_id                  The id of the Template to remove the Account&#39;s access to. (required)
     * @param Model\TemplateRemoveUserRequest $template_remove_user_request template_remove_user_request (required)
     *
     * @return Model\TemplateGetResponse
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     */
    public function templateRemoveUser(string $template_id, Model\TemplateRemoveUserRequest $template_remove_user_request)
    {
        list($response) = $this->templateRemoveUserWithHttpInfo($template_id, $template_remove_user_request);
        return $response;
    }

    /**
     * Operation templateRemoveUserWithHttpInfo
     *
     * Remove User from Template
     *
     * @param string                          $template_id                  The id of the Template to remove the Account&#39;s access to. (required)
     * @param Model\TemplateRemoveUserRequest $template_remove_user_request (required)
     * @param string                          $contentType                  The value for the Content-Type header. Check self::contentTypes['templateRemoveUser'] to see the possible values for this operation
     *
     * @return array of Model\TemplateGetResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::templateRemoveUser. This method will eventually become unavailable
     */
    public function templateRemoveUserWithHttpInfo(string $template_id, Model\TemplateRemoveUserRequest $template_remove_user_request, string $contentType = self::contentTypes['templateRemoveUser'][0])
    {
        $request = $this->templateRemoveUserRequest($template_id, $template_remove_user_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->response = $response;
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            $result = $this->handleRangeCodeResponse(
                $response,
                '4XX',
                '\Dropbox\Sign\Model\ErrorResponse'
            );
            if ($result) {
                return $result;
            }

            switch ($statusCode) {
                case 200:
                    if ('\Dropbox\Sign\Model\TemplateGetResponse' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ('\Dropbox\Sign\Model\TemplateGetResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dropbox\Sign\Model\TemplateGetResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Dropbox\Sign\Model\TemplateGetResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string)$response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            if ($this->handleRangeCodeException($e, '4XX', '\Dropbox\Sign\Model\ErrorResponse')) {
                throw $e;
            }
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dropbox\Sign\Model\TemplateGetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation templateRemoveUserAsync
     *
     * Remove User from Template
     *
     * @param string                          $template_id                  The id of the Template to remove the Account&#39;s access to. (required)
     * @param Model\TemplateRemoveUserRequest $template_remove_user_request (required)
     * @param string                          $contentType                  The value for the Content-Type header. Check self::contentTypes['templateRemoveUser'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::templateRemoveUser. This method will eventually become unavailable
     */
    public function templateRemoveUserAsync(string $template_id, Model\TemplateRemoveUserRequest $template_remove_user_request, string $contentType = self::contentTypes['templateRemoveUser'][0])
    {
        return $this->templateRemoveUserAsyncWithHttpInfo($template_id, $template_remove_user_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation templateRemoveUserAsyncWithHttpInfo
     *
     * Remove User from Template
     *
     * @param string                          $template_id                  The id of the Template to remove the Account&#39;s access to. (required)
     * @param Model\TemplateRemoveUserRequest $template_remove_user_request (required)
     * @param string                          $contentType                  The value for the Content-Type header. Check self::contentTypes['templateRemoveUser'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::templateRemoveUser. This method will eventually become unavailable
     */
    public function templateRemoveUserAsyncWithHttpInfo(string $template_id, Model\TemplateRemoveUserRequest $template_remove_user_request, string $contentType = self::contentTypes['templateRemoveUser'][0])
    {
        $returnType = '\Dropbox\Sign\Model\TemplateGetResponse';
        $request = $this->templateRemoveUserRequest($template_id, $template_remove_user_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'templateRemoveUser'
     *
     * @param string                          $template_id                  The id of the Template to remove the Account&#39;s access to. (required)
     * @param Model\TemplateRemoveUserRequest $template_remove_user_request (required)
     * @param string                          $contentType                  The value for the Content-Type header. Check self::contentTypes['templateRemoveUser'] to see the possible values for this operation
     *
     * @return Request
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::templateRemoveUser. This method will eventually become unavailable
     */
    public function templateRemoveUserRequest(string $template_id, Model\TemplateRemoveUserRequest $template_remove_user_request, string $contentType = self::contentTypes['templateRemoveUser'][0])
    {
        // verify the required parameter 'template_id' is set
        if ($template_id === null || (is_array($template_id) && count($template_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $template_id when calling templateRemoveUser'
            );
        }

        // verify the required parameter 'template_remove_user_request' is set
        if ($template_remove_user_request === null || (is_array($template_remove_user_request) && count($template_remove_user_request) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $template_remove_user_request when calling templateRemoveUser'
            );
        }

        $resourcePath = '/template/remove_user/{template_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $formParams = ObjectSerializer::getFormParams(
            $template_remove_user_request
        );

        $multipart = !empty($formParams);

        // path params
        if ($template_id !== null) {
            $resourcePath = str_replace(
                '{template_id}',
                ObjectSerializer::toPathValue($template_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            $multipart ? ['multipart/form-data'] : ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) === 0) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($template_remove_user_request));
            } else {
                $httpBody = $template_remove_user_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name'     => 'body',
                        'contents' => $body,
                        'headers'  => ['Content-Type' => 'application/json'],
                    ];
                }

                if ($payloadHook = $this->config->getPayloadHook()) {
                    $payloadHook('multipart', $multipartContents, $template_remove_user_request);
                }
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':');
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation templateUpdateFiles
     *
     * Update Template Files
     *
     * @param string                           $template_id                   The ID of the template whose files to update. (required)
     * @param Model\TemplateUpdateFilesRequest $template_update_files_request template_update_files_request (required)
     *
     * @return Model\TemplateUpdateFilesResponse
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     */
    public function templateUpdateFiles(string $template_id, Model\TemplateUpdateFilesRequest $template_update_files_request)
    {
        list($response) = $this->templateUpdateFilesWithHttpInfo($template_id, $template_update_files_request);
        return $response;
    }

    /**
     * Operation templateUpdateFilesWithHttpInfo
     *
     * Update Template Files
     *
     * @param string                           $template_id                   The ID of the template whose files to update. (required)
     * @param Model\TemplateUpdateFilesRequest $template_update_files_request (required)
     * @param string                           $contentType                   The value for the Content-Type header. Check self::contentTypes['templateUpdateFiles'] to see the possible values for this operation
     *
     * @return array of Model\TemplateUpdateFilesResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::templateUpdateFiles. This method will eventually become unavailable
     */
    public function templateUpdateFilesWithHttpInfo(string $template_id, Model\TemplateUpdateFilesRequest $template_update_files_request, string $contentType = self::contentTypes['templateUpdateFiles'][0])
    {
        $request = $this->templateUpdateFilesRequest($template_id, $template_update_files_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->response = $response;
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            $result = $this->handleRangeCodeResponse(
                $response,
                '4XX',
                '\Dropbox\Sign\Model\ErrorResponse'
            );
            if ($result) {
                return $result;
            }

            switch ($statusCode) {
                case 200:
                    if ('\Dropbox\Sign\Model\TemplateUpdateFilesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ('\Dropbox\Sign\Model\TemplateUpdateFilesResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dropbox\Sign\Model\TemplateUpdateFilesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Dropbox\Sign\Model\TemplateUpdateFilesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string)$response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            if ($this->handleRangeCodeException($e, '4XX', '\Dropbox\Sign\Model\ErrorResponse')) {
                throw $e;
            }
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dropbox\Sign\Model\TemplateUpdateFilesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation templateUpdateFilesAsync
     *
     * Update Template Files
     *
     * @param string                           $template_id                   The ID of the template whose files to update. (required)
     * @param Model\TemplateUpdateFilesRequest $template_update_files_request (required)
     * @param string                           $contentType                   The value for the Content-Type header. Check self::contentTypes['templateUpdateFiles'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::templateUpdateFiles. This method will eventually become unavailable
     */
    public function templateUpdateFilesAsync(string $template_id, Model\TemplateUpdateFilesRequest $template_update_files_request, string $contentType = self::contentTypes['templateUpdateFiles'][0])
    {
        return $this->templateUpdateFilesAsyncWithHttpInfo($template_id, $template_update_files_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation templateUpdateFilesAsyncWithHttpInfo
     *
     * Update Template Files
     *
     * @param string                           $template_id                   The ID of the template whose files to update. (required)
     * @param Model\TemplateUpdateFilesRequest $template_update_files_request (required)
     * @param string                           $contentType                   The value for the Content-Type header. Check self::contentTypes['templateUpdateFiles'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::templateUpdateFiles. This method will eventually become unavailable
     */
    public function templateUpdateFilesAsyncWithHttpInfo(string $template_id, Model\TemplateUpdateFilesRequest $template_update_files_request, string $contentType = self::contentTypes['templateUpdateFiles'][0])
    {
        $returnType = '\Dropbox\Sign\Model\TemplateUpdateFilesResponse';
        $request = $this->templateUpdateFilesRequest($template_id, $template_update_files_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'templateUpdateFiles'
     *
     * @param string                           $template_id                   The ID of the template whose files to update. (required)
     * @param Model\TemplateUpdateFilesRequest $template_update_files_request (required)
     * @param string                           $contentType                   The value for the Content-Type header. Check self::contentTypes['templateUpdateFiles'] to see the possible values for this operation
     *
     * @return Request
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::templateUpdateFiles. This method will eventually become unavailable
     */
    public function templateUpdateFilesRequest(string $template_id, Model\TemplateUpdateFilesRequest $template_update_files_request, string $contentType = self::contentTypes['templateUpdateFiles'][0])
    {
        // verify the required parameter 'template_id' is set
        if ($template_id === null || (is_array($template_id) && count($template_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $template_id when calling templateUpdateFiles'
            );
        }

        // verify the required parameter 'template_update_files_request' is set
        if ($template_update_files_request === null || (is_array($template_update_files_request) && count($template_update_files_request) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $template_update_files_request when calling templateUpdateFiles'
            );
        }

        $resourcePath = '/template/update_files/{template_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $formParams = ObjectSerializer::getFormParams(
            $template_update_files_request
        );

        $multipart = !empty($formParams);

        // path params
        if ($template_id !== null) {
            $resourcePath = str_replace(
                '{template_id}',
                ObjectSerializer::toPathValue($template_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            $multipart ? ['multipart/form-data'] : ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) === 0) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($template_update_files_request));
            } else {
                $httpBody = $template_update_files_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name'     => 'body',
                        'contents' => $body,
                        'headers'  => ['Content-Type' => 'application/json'],
                    ];
                }

                if ($payloadHook = $this->config->getPayloadHook()) {
                    $payloadHook('multipart', $multipartContents, $template_update_files_request);
                }
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':');
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @return array of http client options
     * @throws RuntimeException on file opening failure
     */
    protected function createHttpClientOption()
    {
        $options = $this->config->getOptions();
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * @return object|array|null
     */
    private function handleRangeCodeResponse(
        ResponseInterface $response,
        string $rangeCode,
        string $returnDataType
    ) {
        $statusCode = $response->getStatusCode();
        $rangeCodeLeft = (int)(substr($rangeCode, 0, 1) . '00');
        $rangeCodeRight = (int)(substr($rangeCode, 0, 1) . '99');

        if (
            $statusCode < $rangeCodeLeft
            || $statusCode > $rangeCodeRight
        ) {
            return null;
        }

        if ($returnDataType === '\SplFileObject') {
            $content = $response->getBody(); // stream goes to serializer
        } else {
            $content = (string)$response->getBody();
        }

        return [
            ObjectSerializer::deserialize($content, $returnDataType, []),
            $statusCode,
            $response->getHeaders(),
        ];
    }

    /**
     * @return object|array|null
     */
    private function handleRangeCodeException(
        ApiException $e,
        string $rangeCode,
        string $exceptionDataType
    ): bool {
        $statusCode = $e->getCode();
        $rangeCodeLeft = (int)(substr($rangeCode, 0, 1) . '00');
        $rangeCodeRight = (int)(substr($rangeCode, 0, 1) . '99');

        if (
            $statusCode < $rangeCodeLeft
            || $statusCode > $rangeCodeRight
        ) {
            return false;
        }

        $data = ObjectSerializer::deserialize(
            $e->getResponseBody(),
            $exceptionDataType,
            $e->getResponseHeaders()
        );

        $e->setResponseObject($data);

        return true;
    }
}
