<?php
/**
 * FaxLineApi
 * PHP version 7.4
 *
 * @category Class
 * @author   OpenAPI Generator team
 * @see     https://openapi-generator.tech
 */

/**
 * Dropbox Sign API
 *
 * Dropbox Sign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dropbox\Sign\Api;

use Dropbox\Sign\ApiException;
use Dropbox\Sign\Configuration;
use Dropbox\Sign\HeaderSelector;
use Dropbox\Sign\Model;
use Dropbox\Sign\ObjectSerializer;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Promise;
use GuzzleHttp\Psr7;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Utils;
use InvalidArgumentException;
use Psr\Http\Message\ResponseInterface;
use RuntimeException;

/**
 * FaxLineApi Class Doc Comment
 *
 * @category Class
 * @author   OpenAPI Generator team
 * @see     https://openapi-generator.tech
 */
class FaxLineApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @var ResponseInterface|null
     */
    protected $response;

    /**
     * @param int $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        Configuration $config = null,
        ClientInterface $client = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * @return ResponseInterface|null
     */
    public function getResponse()
    {
        return $this->response;
    }

    /**
     * Operation faxLineAddUser
     *
     * Add Fax Line User
     *
     * @param Model\FaxLineAddUserRequest $fax_line_add_user_request fax_line_add_user_request (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return Model\FaxLineResponse
     */
    public function faxLineAddUser(Model\FaxLineAddUserRequest $fax_line_add_user_request)
    {
        list($response) = $this->faxLineAddUserWithHttpInfo($fax_line_add_user_request);

        return $response;
    }

    /**
     * Operation faxLineAddUserWithHttpInfo
     *
     * Add Fax Line User
     *
     * @param Model\FaxLineAddUserRequest $fax_line_add_user_request (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of Model\FaxLineResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function faxLineAddUserWithHttpInfo(Model\FaxLineAddUserRequest $fax_line_add_user_request)
    {
        $request = $this->faxLineAddUserRequest($fax_line_add_user_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->response = $response;
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode === 200) {
                if ('\Dropbox\Sign\Model\FaxLineResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\Dropbox\Sign\Model\FaxLineResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $rangeCodeLeft = (int) (substr('4XX', 0, 1) . '00');
            $rangeCodeRight = (int) (substr('4XX', 0, 1) . '99');
            if ($statusCode >= $rangeCodeLeft && $statusCode <= $rangeCodeRight) {
                if ('\Dropbox\Sign\Model\ErrorResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\Dropbox\Sign\Model\ErrorResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $returnType = '\Dropbox\Sign\Model\FaxLineResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $statusCode = $e->getCode();

            if ($statusCode === 200) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\Dropbox\Sign\Model\FaxLineResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            $rangeCodeLeft = (int) (substr('4XX', 0, 1) . '00');
            $rangeCodeRight = (int) (substr('4XX', 0, 1) . '99');
            if ($statusCode >= $rangeCodeLeft && $statusCode <= $rangeCodeRight) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\Dropbox\Sign\Model\ErrorResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            throw $e;
        }
    }

    /**
     * Operation faxLineAddUserAsync
     *
     * Add Fax Line User
     *
     * @param Model\FaxLineAddUserRequest $fax_line_add_user_request (required)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function faxLineAddUserAsync(Model\FaxLineAddUserRequest $fax_line_add_user_request)
    {
        return $this->faxLineAddUserAsyncWithHttpInfo($fax_line_add_user_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation faxLineAddUserAsyncWithHttpInfo
     *
     * Add Fax Line User
     *
     * @param Model\FaxLineAddUserRequest $fax_line_add_user_request (required)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function faxLineAddUserAsyncWithHttpInfo(Model\FaxLineAddUserRequest $fax_line_add_user_request)
    {
        $returnType = '\Dropbox\Sign\Model\FaxLineResponse';
        $request = $this->faxLineAddUserRequest($fax_line_add_user_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'faxLineAddUser'
     *
     * @param Model\FaxLineAddUserRequest $fax_line_add_user_request (required)
     *
     * @throws InvalidArgumentException
     * @return Psr7\Request
     */
    public function faxLineAddUserRequest(Model\FaxLineAddUserRequest $fax_line_add_user_request)
    {
        // verify the required parameter 'fax_line_add_user_request' is set
        if ($fax_line_add_user_request === null || (is_array($fax_line_add_user_request) && count($fax_line_add_user_request) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $fax_line_add_user_request when calling faxLineAddUser'
            );
        }

        $resourcePath = '/fax_line/add_user';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        $formParams = ObjectSerializer::getFormParams(
            $fax_line_add_user_request
        );

        $multipart = !empty($formParams);

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) === 0) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($fax_line_add_user_request));
            } else {
                $httpBody = $fax_line_add_user_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name' => 'body',
                        'contents' => $body,
                        'headers' => ['Content-Type' => 'application/json'],
                    ];
                }

                if ($payloadHook = $this->config->getPayloadHook()) {
                    $payloadHook('multipart', $multipartContents, $fax_line_add_user_request);
                }

                $httpBody = new Psr7\MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':');
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Psr7\Query::build($queryParams);

        return new Psr7\Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation faxLineAreaCodeGet
     *
     * Get Available Fax Line Area Codes
     *
     * @param Model\FaxLineAreaCodeGetCountryEnum $country Filter area codes by country. (required)
     * @param Model\FaxLineAreaCodeGetStateEnum $state Filter area codes by state. (optional)
     * @param Model\FaxLineAreaCodeGetProvinceEnum $province Filter area codes by province. (optional)
     * @param string $city Filter area codes by city. (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return Model\FaxLineAreaCodeGetResponse
     */
    public function faxLineAreaCodeGet(Model\FaxLineAreaCodeGetCountryEnum $country, Model\FaxLineAreaCodeGetStateEnum $state = null, Model\FaxLineAreaCodeGetProvinceEnum $province = null, string $city = null)
    {
        list($response) = $this->faxLineAreaCodeGetWithHttpInfo($country, $state, $province, $city);

        return $response;
    }

    /**
     * Operation faxLineAreaCodeGetWithHttpInfo
     *
     * Get Available Fax Line Area Codes
     *
     * @param Model\FaxLineAreaCodeGetCountryEnum $country Filter area codes by country. (required)
     * @param Model\FaxLineAreaCodeGetStateEnum $state Filter area codes by state. (optional)
     * @param Model\FaxLineAreaCodeGetProvinceEnum $province Filter area codes by province. (optional)
     * @param string $city Filter area codes by city. (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of Model\FaxLineAreaCodeGetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function faxLineAreaCodeGetWithHttpInfo(Model\FaxLineAreaCodeGetCountryEnum $country, Model\FaxLineAreaCodeGetStateEnum $state = null, Model\FaxLineAreaCodeGetProvinceEnum $province = null, string $city = null)
    {
        $request = $this->faxLineAreaCodeGetRequest($country, $state, $province, $city);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->response = $response;
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode === 200) {
                if ('\Dropbox\Sign\Model\FaxLineAreaCodeGetResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\Dropbox\Sign\Model\FaxLineAreaCodeGetResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $rangeCodeLeft = (int) (substr('4XX', 0, 1) . '00');
            $rangeCodeRight = (int) (substr('4XX', 0, 1) . '99');
            if ($statusCode >= $rangeCodeLeft && $statusCode <= $rangeCodeRight) {
                if ('\Dropbox\Sign\Model\ErrorResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\Dropbox\Sign\Model\ErrorResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $returnType = '\Dropbox\Sign\Model\FaxLineAreaCodeGetResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $statusCode = $e->getCode();

            if ($statusCode === 200) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\Dropbox\Sign\Model\FaxLineAreaCodeGetResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            $rangeCodeLeft = (int) (substr('4XX', 0, 1) . '00');
            $rangeCodeRight = (int) (substr('4XX', 0, 1) . '99');
            if ($statusCode >= $rangeCodeLeft && $statusCode <= $rangeCodeRight) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\Dropbox\Sign\Model\ErrorResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            throw $e;
        }
    }

    /**
     * Operation faxLineAreaCodeGetAsync
     *
     * Get Available Fax Line Area Codes
     *
     * @param Model\FaxLineAreaCodeGetCountryEnum $country Filter area codes by country. (required)
     * @param Model\FaxLineAreaCodeGetStateEnum $state Filter area codes by state. (optional)
     * @param Model\FaxLineAreaCodeGetProvinceEnum $province Filter area codes by province. (optional)
     * @param string $city Filter area codes by city. (optional)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function faxLineAreaCodeGetAsync(Model\FaxLineAreaCodeGetCountryEnum $country, Model\FaxLineAreaCodeGetStateEnum $state = null, Model\FaxLineAreaCodeGetProvinceEnum $province = null, string $city = null)
    {
        return $this->faxLineAreaCodeGetAsyncWithHttpInfo($country, $state, $province, $city)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation faxLineAreaCodeGetAsyncWithHttpInfo
     *
     * Get Available Fax Line Area Codes
     *
     * @param Model\FaxLineAreaCodeGetCountryEnum $country Filter area codes by country. (required)
     * @param Model\FaxLineAreaCodeGetStateEnum $state Filter area codes by state. (optional)
     * @param Model\FaxLineAreaCodeGetProvinceEnum $province Filter area codes by province. (optional)
     * @param string $city Filter area codes by city. (optional)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function faxLineAreaCodeGetAsyncWithHttpInfo(Model\FaxLineAreaCodeGetCountryEnum $country, Model\FaxLineAreaCodeGetStateEnum $state = null, Model\FaxLineAreaCodeGetProvinceEnum $province = null, string $city = null)
    {
        $returnType = '\Dropbox\Sign\Model\FaxLineAreaCodeGetResponse';
        $request = $this->faxLineAreaCodeGetRequest($country, $state, $province, $city);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'faxLineAreaCodeGet'
     *
     * @param Model\FaxLineAreaCodeGetCountryEnum $country Filter area codes by country. (required)
     * @param Model\FaxLineAreaCodeGetStateEnum $state Filter area codes by state. (optional)
     * @param Model\FaxLineAreaCodeGetProvinceEnum $province Filter area codes by province. (optional)
     * @param string $city Filter area codes by city. (optional)
     *
     * @throws InvalidArgumentException
     * @return Psr7\Request
     */
    public function faxLineAreaCodeGetRequest(Model\FaxLineAreaCodeGetCountryEnum $country, Model\FaxLineAreaCodeGetStateEnum $state = null, Model\FaxLineAreaCodeGetProvinceEnum $province = null, string $city = null)
    {
        // verify the required parameter 'country' is set
        if ($country === null || (is_array($country) && count($country) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $country when calling faxLineAreaCodeGet'
            );
        }

        $resourcePath = '/fax_line/area_codes';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        $formParams = [];
        $multipart = false;

        // query params
        if ($country !== null) {
            if ('form' === 'form' && is_array($country)) {
                foreach ($country as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['country'] = $country;
            }
        }
        // query params
        if ($state !== null) {
            if ('form' === 'form' && is_array($state)) {
                foreach ($state as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['state'] = $state;
            }
        }
        // query params
        if ($province !== null) {
            if ('form' === 'form' && is_array($province)) {
                foreach ($province as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['province'] = $province;
            }
        }
        // query params
        if ($city !== null) {
            if ('form' === 'form' && is_array($city)) {
                foreach ($city as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['city'] = $city;
            }
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name' => 'body',
                        'contents' => $body,
                        'headers' => ['Content-Type' => 'application/json'],
                    ];
                }

                $httpBody = new Psr7\MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':');
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Psr7\Query::build($queryParams);

        return new Psr7\Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation faxLineCreate
     *
     * Purchase Fax Line
     *
     * @param Model\FaxLineCreateRequest $fax_line_create_request fax_line_create_request (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return Model\FaxLineResponse
     */
    public function faxLineCreate(Model\FaxLineCreateRequest $fax_line_create_request)
    {
        list($response) = $this->faxLineCreateWithHttpInfo($fax_line_create_request);

        return $response;
    }

    /**
     * Operation faxLineCreateWithHttpInfo
     *
     * Purchase Fax Line
     *
     * @param Model\FaxLineCreateRequest $fax_line_create_request (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of Model\FaxLineResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function faxLineCreateWithHttpInfo(Model\FaxLineCreateRequest $fax_line_create_request)
    {
        $request = $this->faxLineCreateRequest($fax_line_create_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->response = $response;
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode === 200) {
                if ('\Dropbox\Sign\Model\FaxLineResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\Dropbox\Sign\Model\FaxLineResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $rangeCodeLeft = (int) (substr('4XX', 0, 1) . '00');
            $rangeCodeRight = (int) (substr('4XX', 0, 1) . '99');
            if ($statusCode >= $rangeCodeLeft && $statusCode <= $rangeCodeRight) {
                if ('\Dropbox\Sign\Model\ErrorResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\Dropbox\Sign\Model\ErrorResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $returnType = '\Dropbox\Sign\Model\FaxLineResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $statusCode = $e->getCode();

            if ($statusCode === 200) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\Dropbox\Sign\Model\FaxLineResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            $rangeCodeLeft = (int) (substr('4XX', 0, 1) . '00');
            $rangeCodeRight = (int) (substr('4XX', 0, 1) . '99');
            if ($statusCode >= $rangeCodeLeft && $statusCode <= $rangeCodeRight) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\Dropbox\Sign\Model\ErrorResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            throw $e;
        }
    }

    /**
     * Operation faxLineCreateAsync
     *
     * Purchase Fax Line
     *
     * @param Model\FaxLineCreateRequest $fax_line_create_request (required)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function faxLineCreateAsync(Model\FaxLineCreateRequest $fax_line_create_request)
    {
        return $this->faxLineCreateAsyncWithHttpInfo($fax_line_create_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation faxLineCreateAsyncWithHttpInfo
     *
     * Purchase Fax Line
     *
     * @param Model\FaxLineCreateRequest $fax_line_create_request (required)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function faxLineCreateAsyncWithHttpInfo(Model\FaxLineCreateRequest $fax_line_create_request)
    {
        $returnType = '\Dropbox\Sign\Model\FaxLineResponse';
        $request = $this->faxLineCreateRequest($fax_line_create_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'faxLineCreate'
     *
     * @param Model\FaxLineCreateRequest $fax_line_create_request (required)
     *
     * @throws InvalidArgumentException
     * @return Psr7\Request
     */
    public function faxLineCreateRequest(Model\FaxLineCreateRequest $fax_line_create_request)
    {
        // verify the required parameter 'fax_line_create_request' is set
        if ($fax_line_create_request === null || (is_array($fax_line_create_request) && count($fax_line_create_request) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $fax_line_create_request when calling faxLineCreate'
            );
        }

        $resourcePath = '/fax_line/create';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        $formParams = ObjectSerializer::getFormParams(
            $fax_line_create_request
        );

        $multipart = !empty($formParams);

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) === 0) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($fax_line_create_request));
            } else {
                $httpBody = $fax_line_create_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name' => 'body',
                        'contents' => $body,
                        'headers' => ['Content-Type' => 'application/json'],
                    ];
                }

                if ($payloadHook = $this->config->getPayloadHook()) {
                    $payloadHook('multipart', $multipartContents, $fax_line_create_request);
                }

                $httpBody = new Psr7\MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':');
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Psr7\Query::build($queryParams);

        return new Psr7\Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation faxLineDelete
     *
     * Delete Fax Line
     *
     * @param Model\FaxLineDeleteRequest $fax_line_delete_request fax_line_delete_request (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return void
     */
    public function faxLineDelete(Model\FaxLineDeleteRequest $fax_line_delete_request)
    {
        $this->faxLineDeleteWithHttpInfo($fax_line_delete_request);
    }

    /**
     * Operation faxLineDeleteWithHttpInfo
     *
     * Delete Fax Line
     *
     * @param Model\FaxLineDeleteRequest $fax_line_delete_request (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function faxLineDeleteWithHttpInfo(Model\FaxLineDeleteRequest $fax_line_delete_request)
    {
        $request = $this->faxLineDeleteRequest($fax_line_delete_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->response = $response;
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            $statusCode = $e->getCode();

            $rangeCodeLeft = (int) (substr('4XX', 0, 1) . '00');
            $rangeCodeRight = (int) (substr('4XX', 0, 1) . '99');
            if ($statusCode >= $rangeCodeLeft && $statusCode <= $rangeCodeRight) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\Dropbox\Sign\Model\ErrorResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            throw $e;
        }
    }

    /**
     * Operation faxLineDeleteAsync
     *
     * Delete Fax Line
     *
     * @param Model\FaxLineDeleteRequest $fax_line_delete_request (required)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function faxLineDeleteAsync(Model\FaxLineDeleteRequest $fax_line_delete_request)
    {
        return $this->faxLineDeleteAsyncWithHttpInfo($fax_line_delete_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation faxLineDeleteAsyncWithHttpInfo
     *
     * Delete Fax Line
     *
     * @param Model\FaxLineDeleteRequest $fax_line_delete_request (required)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function faxLineDeleteAsyncWithHttpInfo(Model\FaxLineDeleteRequest $fax_line_delete_request)
    {
        $returnType = '';
        $request = $this->faxLineDeleteRequest($fax_line_delete_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'faxLineDelete'
     *
     * @param Model\FaxLineDeleteRequest $fax_line_delete_request (required)
     *
     * @throws InvalidArgumentException
     * @return Psr7\Request
     */
    public function faxLineDeleteRequest(Model\FaxLineDeleteRequest $fax_line_delete_request)
    {
        // verify the required parameter 'fax_line_delete_request' is set
        if ($fax_line_delete_request === null || (is_array($fax_line_delete_request) && count($fax_line_delete_request) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $fax_line_delete_request when calling faxLineDelete'
            );
        }

        $resourcePath = '/fax_line/delete';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        $formParams = ObjectSerializer::getFormParams(
            $fax_line_delete_request
        );

        $multipart = !empty($formParams);

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) === 0) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($fax_line_delete_request));
            } else {
                $httpBody = $fax_line_delete_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name' => 'body',
                        'contents' => $body,
                        'headers' => ['Content-Type' => 'application/json'],
                    ];
                }

                if ($payloadHook = $this->config->getPayloadHook()) {
                    $payloadHook('multipart', $multipartContents, $fax_line_delete_request);
                }

                $httpBody = new Psr7\MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':');
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Psr7\Query::build($queryParams);

        return new Psr7\Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation faxLineGet
     *
     * Get Fax Line
     *
     * @param string $number The Fax Line number. (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return Model\FaxLineResponse
     */
    public function faxLineGet(string $number)
    {
        list($response) = $this->faxLineGetWithHttpInfo($number);

        return $response;
    }

    /**
     * Operation faxLineGetWithHttpInfo
     *
     * Get Fax Line
     *
     * @param string $number The Fax Line number. (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of Model\FaxLineResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function faxLineGetWithHttpInfo(string $number)
    {
        $request = $this->faxLineGetRequest($number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->response = $response;
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode === 200) {
                if ('\Dropbox\Sign\Model\FaxLineResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\Dropbox\Sign\Model\FaxLineResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $rangeCodeLeft = (int) (substr('4XX', 0, 1) . '00');
            $rangeCodeRight = (int) (substr('4XX', 0, 1) . '99');
            if ($statusCode >= $rangeCodeLeft && $statusCode <= $rangeCodeRight) {
                if ('\Dropbox\Sign\Model\ErrorResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\Dropbox\Sign\Model\ErrorResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $returnType = '\Dropbox\Sign\Model\FaxLineResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $statusCode = $e->getCode();

            if ($statusCode === 200) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\Dropbox\Sign\Model\FaxLineResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            $rangeCodeLeft = (int) (substr('4XX', 0, 1) . '00');
            $rangeCodeRight = (int) (substr('4XX', 0, 1) . '99');
            if ($statusCode >= $rangeCodeLeft && $statusCode <= $rangeCodeRight) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\Dropbox\Sign\Model\ErrorResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            throw $e;
        }
    }

    /**
     * Operation faxLineGetAsync
     *
     * Get Fax Line
     *
     * @param string $number The Fax Line number. (required)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function faxLineGetAsync(string $number)
    {
        return $this->faxLineGetAsyncWithHttpInfo($number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation faxLineGetAsyncWithHttpInfo
     *
     * Get Fax Line
     *
     * @param string $number The Fax Line number. (required)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function faxLineGetAsyncWithHttpInfo(string $number)
    {
        $returnType = '\Dropbox\Sign\Model\FaxLineResponse';
        $request = $this->faxLineGetRequest($number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'faxLineGet'
     *
     * @param string $number The Fax Line number. (required)
     *
     * @throws InvalidArgumentException
     * @return Psr7\Request
     */
    public function faxLineGetRequest(string $number)
    {
        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $number when calling faxLineGet'
            );
        }

        $resourcePath = '/fax_line/{number}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        $formParams = [];
        $multipart = false;

        // path params
        if ($number !== null) {
            $resourcePath = str_replace(
                '{' . 'number' . '}',
                ObjectSerializer::toPathValue($number),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name' => 'body',
                        'contents' => $body,
                        'headers' => ['Content-Type' => 'application/json'],
                    ];
                }

                $httpBody = new Psr7\MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':');
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Psr7\Query::build($queryParams);

        return new Psr7\Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation faxLineList
     *
     * List Fax Lines
     *
     * @param string $account_id Account ID (optional)
     * @param int $page Page (optional)
     * @param int $page_size Page size (optional)
     * @param bool $show_team_lines Show team lines (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return Model\FaxLineListResponse
     */
    public function faxLineList(string $account_id = null, int $page = null, int $page_size = null, bool $show_team_lines = null)
    {
        list($response) = $this->faxLineListWithHttpInfo($account_id, $page, $page_size, $show_team_lines);

        return $response;
    }

    /**
     * Operation faxLineListWithHttpInfo
     *
     * List Fax Lines
     *
     * @param string $account_id Account ID (optional)
     * @param int $page Page (optional)
     * @param int $page_size Page size (optional)
     * @param bool $show_team_lines Show team lines (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of Model\FaxLineListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function faxLineListWithHttpInfo(string $account_id = null, int $page = null, int $page_size = null, bool $show_team_lines = null)
    {
        $request = $this->faxLineListRequest($account_id, $page, $page_size, $show_team_lines);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->response = $response;
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode === 200) {
                if ('\Dropbox\Sign\Model\FaxLineListResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\Dropbox\Sign\Model\FaxLineListResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $rangeCodeLeft = (int) (substr('4XX', 0, 1) . '00');
            $rangeCodeRight = (int) (substr('4XX', 0, 1) . '99');
            if ($statusCode >= $rangeCodeLeft && $statusCode <= $rangeCodeRight) {
                if ('\Dropbox\Sign\Model\ErrorResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\Dropbox\Sign\Model\ErrorResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $returnType = '\Dropbox\Sign\Model\FaxLineListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $statusCode = $e->getCode();

            if ($statusCode === 200) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\Dropbox\Sign\Model\FaxLineListResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            $rangeCodeLeft = (int) (substr('4XX', 0, 1) . '00');
            $rangeCodeRight = (int) (substr('4XX', 0, 1) . '99');
            if ($statusCode >= $rangeCodeLeft && $statusCode <= $rangeCodeRight) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\Dropbox\Sign\Model\ErrorResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            throw $e;
        }
    }

    /**
     * Operation faxLineListAsync
     *
     * List Fax Lines
     *
     * @param string $account_id Account ID (optional)
     * @param int $page Page (optional)
     * @param int $page_size Page size (optional)
     * @param bool $show_team_lines Show team lines (optional)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function faxLineListAsync(string $account_id = null, int $page = null, int $page_size = null, bool $show_team_lines = null)
    {
        return $this->faxLineListAsyncWithHttpInfo($account_id, $page, $page_size, $show_team_lines)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation faxLineListAsyncWithHttpInfo
     *
     * List Fax Lines
     *
     * @param string $account_id Account ID (optional)
     * @param int $page Page (optional)
     * @param int $page_size Page size (optional)
     * @param bool $show_team_lines Show team lines (optional)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function faxLineListAsyncWithHttpInfo(string $account_id = null, int $page = null, int $page_size = null, bool $show_team_lines = null)
    {
        $returnType = '\Dropbox\Sign\Model\FaxLineListResponse';
        $request = $this->faxLineListRequest($account_id, $page, $page_size, $show_team_lines);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'faxLineList'
     *
     * @param string $account_id Account ID (optional)
     * @param int $page Page (optional)
     * @param int $page_size Page size (optional)
     * @param bool $show_team_lines Show team lines (optional)
     *
     * @throws InvalidArgumentException
     * @return Psr7\Request
     */
    public function faxLineListRequest(string $account_id = null, int $page = null, int $page_size = null, bool $show_team_lines = null)
    {
        $resourcePath = '/fax_line/list';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        $formParams = [];
        $multipart = false;

        // query params
        if ($account_id !== null) {
            if ('form' === 'form' && is_array($account_id)) {
                foreach ($account_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['account_id'] = $account_id;
            }
        }
        // query params
        if ($page !== null) {
            if ('form' === 'form' && is_array($page)) {
                foreach ($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($page_size !== null) {
            if ('form' === 'form' && is_array($page_size)) {
                foreach ($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['page_size'] = $page_size;
            }
        }
        // query params
        if ($show_team_lines !== null) {
            if ('form' === 'form' && is_array($show_team_lines)) {
                foreach ($show_team_lines as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['show_team_lines'] = $show_team_lines;
            }
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name' => 'body',
                        'contents' => $body,
                        'headers' => ['Content-Type' => 'application/json'],
                    ];
                }

                $httpBody = new Psr7\MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':');
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Psr7\Query::build($queryParams);

        return new Psr7\Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation faxLineRemoveUser
     *
     * Remove Fax Line Access
     *
     * @param Model\FaxLineRemoveUserRequest $fax_line_remove_user_request fax_line_remove_user_request (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return Model\FaxLineResponse
     */
    public function faxLineRemoveUser(Model\FaxLineRemoveUserRequest $fax_line_remove_user_request)
    {
        list($response) = $this->faxLineRemoveUserWithHttpInfo($fax_line_remove_user_request);

        return $response;
    }

    /**
     * Operation faxLineRemoveUserWithHttpInfo
     *
     * Remove Fax Line Access
     *
     * @param Model\FaxLineRemoveUserRequest $fax_line_remove_user_request (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of Model\FaxLineResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function faxLineRemoveUserWithHttpInfo(Model\FaxLineRemoveUserRequest $fax_line_remove_user_request)
    {
        $request = $this->faxLineRemoveUserRequest($fax_line_remove_user_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->response = $response;
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode === 200) {
                if ('\Dropbox\Sign\Model\FaxLineResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\Dropbox\Sign\Model\FaxLineResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $rangeCodeLeft = (int) (substr('4XX', 0, 1) . '00');
            $rangeCodeRight = (int) (substr('4XX', 0, 1) . '99');
            if ($statusCode >= $rangeCodeLeft && $statusCode <= $rangeCodeRight) {
                if ('\Dropbox\Sign\Model\ErrorResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\Dropbox\Sign\Model\ErrorResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $returnType = '\Dropbox\Sign\Model\FaxLineResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $statusCode = $e->getCode();

            if ($statusCode === 200) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\Dropbox\Sign\Model\FaxLineResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            $rangeCodeLeft = (int) (substr('4XX', 0, 1) . '00');
            $rangeCodeRight = (int) (substr('4XX', 0, 1) . '99');
            if ($statusCode >= $rangeCodeLeft && $statusCode <= $rangeCodeRight) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\Dropbox\Sign\Model\ErrorResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            throw $e;
        }
    }

    /**
     * Operation faxLineRemoveUserAsync
     *
     * Remove Fax Line Access
     *
     * @param Model\FaxLineRemoveUserRequest $fax_line_remove_user_request (required)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function faxLineRemoveUserAsync(Model\FaxLineRemoveUserRequest $fax_line_remove_user_request)
    {
        return $this->faxLineRemoveUserAsyncWithHttpInfo($fax_line_remove_user_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation faxLineRemoveUserAsyncWithHttpInfo
     *
     * Remove Fax Line Access
     *
     * @param Model\FaxLineRemoveUserRequest $fax_line_remove_user_request (required)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function faxLineRemoveUserAsyncWithHttpInfo(Model\FaxLineRemoveUserRequest $fax_line_remove_user_request)
    {
        $returnType = '\Dropbox\Sign\Model\FaxLineResponse';
        $request = $this->faxLineRemoveUserRequest($fax_line_remove_user_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'faxLineRemoveUser'
     *
     * @param Model\FaxLineRemoveUserRequest $fax_line_remove_user_request (required)
     *
     * @throws InvalidArgumentException
     * @return Psr7\Request
     */
    public function faxLineRemoveUserRequest(Model\FaxLineRemoveUserRequest $fax_line_remove_user_request)
    {
        // verify the required parameter 'fax_line_remove_user_request' is set
        if ($fax_line_remove_user_request === null || (is_array($fax_line_remove_user_request) && count($fax_line_remove_user_request) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $fax_line_remove_user_request when calling faxLineRemoveUser'
            );
        }

        $resourcePath = '/fax_line/remove_user';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        $formParams = ObjectSerializer::getFormParams(
            $fax_line_remove_user_request
        );

        $multipart = !empty($formParams);

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) === 0) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($fax_line_remove_user_request));
            } else {
                $httpBody = $fax_line_remove_user_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name' => 'body',
                        'contents' => $body,
                        'headers' => ['Content-Type' => 'application/json'],
                    ];
                }

                if ($payloadHook = $this->config->getPayloadHook()) {
                    $payloadHook('multipart', $multipartContents, $fax_line_remove_user_request);
                }

                $httpBody = new Psr7\MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':');
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Psr7\Query::build($queryParams);

        return new Psr7\Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = $this->config->getOptions();
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
