<?php
/**
 * SignatureRequestApi
 * PHP version 7.4
 *
 * @category Class
 * @see     https://openapi-generator.tech
 */

/**
 * Dropbox Sign API
 *
 * Dropbox Sign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dropbox\Sign\Api;

use Dropbox\Sign\ApiException;
use Dropbox\Sign\Configuration;
use Dropbox\Sign\HeaderSelector;
use Dropbox\Sign\Model;
use Dropbox\Sign\ObjectSerializer;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use InvalidArgumentException;
use JsonException;
use Psr\Http\Message\ResponseInterface;
use RuntimeException;
use SplFileObject;

/**
 * SignatureRequestApi Class Doc Comment
 *
 * @category Class
 * @see     https://openapi-generator.tech
 */
class SignatureRequestApi
{
    /** @var ClientInterface */
    protected $client;

    /** @var Configuration */
    protected $config;

    /** @var HeaderSelector */
    protected $headerSelector;

    /** @var int Host index */
    protected $hostIndex;

    /**
     * @var string[] *
     */
    public const contentTypes = [
        'signatureRequestBulkCreateEmbeddedWithTemplate' => [
            'application/json',
            'multipart/form-data',
        ],
        'signatureRequestBulkSendWithTemplate' => [
            'application/json',
            'multipart/form-data',
        ],
        'signatureRequestCancel' => [
            'application/json',
        ],
        'signatureRequestCreateEmbedded' => [
            'application/json',
            'multipart/form-data',
        ],
        'signatureRequestCreateEmbeddedWithTemplate' => [
            'application/json',
            'multipart/form-data',
        ],
        'signatureRequestFiles' => [
            'application/json',
        ],
        'signatureRequestFilesAsDataUri' => [
            'application/json',
        ],
        'signatureRequestFilesAsFileUrl' => [
            'application/json',
        ],
        'signatureRequestGet' => [
            'application/json',
        ],
        'signatureRequestList' => [
            'application/json',
        ],
        'signatureRequestReleaseHold' => [
            'application/json',
        ],
        'signatureRequestRemind' => [
            'application/json',
        ],
        'signatureRequestRemove' => [
            'application/json',
        ],
        'signatureRequestSend' => [
            'application/json',
            'multipart/form-data',
        ],
        'signatureRequestSendWithTemplate' => [
            'application/json',
            'multipart/form-data',
        ],
        'signatureRequestUpdate' => [
            'application/json',
        ],
    ];

    /** @var ResponseInterface|null */
    protected $response;

    /**
     * @param int $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        Configuration $config = null,
        ClientInterface $client = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     * @deprecated To be made private in the future
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     * @deprecated To be made private in the future
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * @return ResponseInterface|null
     */
    public function getResponse()
    {
        return $this->response;
    }

    /**
     * Operation signatureRequestBulkCreateEmbeddedWithTemplate
     *
     * Embedded Bulk Send with Template
     *
     * @param Model\SignatureRequestBulkCreateEmbeddedWithTemplateRequest $signature_request_bulk_create_embedded_with_template_request signature_request_bulk_create_embedded_with_template_request (required)
     *
     * @return Model\BulkSendJobSendResponse
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     */
    public function signatureRequestBulkCreateEmbeddedWithTemplate(Model\SignatureRequestBulkCreateEmbeddedWithTemplateRequest $signature_request_bulk_create_embedded_with_template_request)
    {
        list($response) = $this->signatureRequestBulkCreateEmbeddedWithTemplateWithHttpInfo($signature_request_bulk_create_embedded_with_template_request);
        return $response;
    }

    /**
     * Operation signatureRequestBulkCreateEmbeddedWithTemplateWithHttpInfo
     *
     * Embedded Bulk Send with Template
     *
     * @param Model\SignatureRequestBulkCreateEmbeddedWithTemplateRequest $signature_request_bulk_create_embedded_with_template_request (required)
     * @param string                                                      $contentType                                                  The value for the Content-Type header. Check self::contentTypes['signatureRequestBulkCreateEmbeddedWithTemplate'] to see the possible values for this operation
     *
     * @return array of Model\BulkSendJobSendResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestBulkCreateEmbeddedWithTemplate. This method will eventually become unavailable
     */
    public function signatureRequestBulkCreateEmbeddedWithTemplateWithHttpInfo(Model\SignatureRequestBulkCreateEmbeddedWithTemplateRequest $signature_request_bulk_create_embedded_with_template_request, string $contentType = self::contentTypes['signatureRequestBulkCreateEmbeddedWithTemplate'][0])
    {
        $request = $this->signatureRequestBulkCreateEmbeddedWithTemplateRequest($signature_request_bulk_create_embedded_with_template_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->response = $response;
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            $result = $this->handleRangeCodeResponse(
                $response,
                '4XX',
                '\Dropbox\Sign\Model\ErrorResponse'
            );
            if ($result) {
                return $result;
            }

            switch ($statusCode) {
                case 200:
                    if ('\Dropbox\Sign\Model\BulkSendJobSendResponse' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ('\Dropbox\Sign\Model\BulkSendJobSendResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dropbox\Sign\Model\BulkSendJobSendResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Dropbox\Sign\Model\BulkSendJobSendResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string)$response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            if ($this->handleRangeCodeException($e, '4XX', '\Dropbox\Sign\Model\ErrorResponse')) {
                throw $e;
            }
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dropbox\Sign\Model\BulkSendJobSendResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation signatureRequestBulkCreateEmbeddedWithTemplateAsync
     *
     * Embedded Bulk Send with Template
     *
     * @param Model\SignatureRequestBulkCreateEmbeddedWithTemplateRequest $signature_request_bulk_create_embedded_with_template_request (required)
     * @param string                                                      $contentType                                                  The value for the Content-Type header. Check self::contentTypes['signatureRequestBulkCreateEmbeddedWithTemplate'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestBulkCreateEmbeddedWithTemplate. This method will eventually become unavailable
     */
    public function signatureRequestBulkCreateEmbeddedWithTemplateAsync(Model\SignatureRequestBulkCreateEmbeddedWithTemplateRequest $signature_request_bulk_create_embedded_with_template_request, string $contentType = self::contentTypes['signatureRequestBulkCreateEmbeddedWithTemplate'][0])
    {
        return $this->signatureRequestBulkCreateEmbeddedWithTemplateAsyncWithHttpInfo($signature_request_bulk_create_embedded_with_template_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation signatureRequestBulkCreateEmbeddedWithTemplateAsyncWithHttpInfo
     *
     * Embedded Bulk Send with Template
     *
     * @param Model\SignatureRequestBulkCreateEmbeddedWithTemplateRequest $signature_request_bulk_create_embedded_with_template_request (required)
     * @param string                                                      $contentType                                                  The value for the Content-Type header. Check self::contentTypes['signatureRequestBulkCreateEmbeddedWithTemplate'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestBulkCreateEmbeddedWithTemplate. This method will eventually become unavailable
     */
    public function signatureRequestBulkCreateEmbeddedWithTemplateAsyncWithHttpInfo(Model\SignatureRequestBulkCreateEmbeddedWithTemplateRequest $signature_request_bulk_create_embedded_with_template_request, string $contentType = self::contentTypes['signatureRequestBulkCreateEmbeddedWithTemplate'][0])
    {
        $returnType = '\Dropbox\Sign\Model\BulkSendJobSendResponse';
        $request = $this->signatureRequestBulkCreateEmbeddedWithTemplateRequest($signature_request_bulk_create_embedded_with_template_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'signatureRequestBulkCreateEmbeddedWithTemplate'
     *
     * @param Model\SignatureRequestBulkCreateEmbeddedWithTemplateRequest $signature_request_bulk_create_embedded_with_template_request (required)
     * @param string                                                      $contentType                                                  The value for the Content-Type header. Check self::contentTypes['signatureRequestBulkCreateEmbeddedWithTemplate'] to see the possible values for this operation
     *
     * @return Request
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestBulkCreateEmbeddedWithTemplate. This method will eventually become unavailable
     */
    public function signatureRequestBulkCreateEmbeddedWithTemplateRequest(Model\SignatureRequestBulkCreateEmbeddedWithTemplateRequest $signature_request_bulk_create_embedded_with_template_request, string $contentType = self::contentTypes['signatureRequestBulkCreateEmbeddedWithTemplate'][0])
    {
        // verify the required parameter 'signature_request_bulk_create_embedded_with_template_request' is set
        if ($signature_request_bulk_create_embedded_with_template_request === null || (is_array($signature_request_bulk_create_embedded_with_template_request) && count($signature_request_bulk_create_embedded_with_template_request) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $signature_request_bulk_create_embedded_with_template_request when calling signatureRequestBulkCreateEmbeddedWithTemplate'
            );
        }

        $resourcePath = '/signature_request/bulk_create_embedded_with_template';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $formParams = ObjectSerializer::getFormParams(
            $signature_request_bulk_create_embedded_with_template_request
        );

        $multipart = !empty($formParams);

        $headers = $this->headerSelector->selectHeaders(
            $multipart ? ['multipart/form-data'] : ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) === 0) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($signature_request_bulk_create_embedded_with_template_request));
            } else {
                $httpBody = $signature_request_bulk_create_embedded_with_template_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name'     => 'body',
                        'contents' => $body,
                        'headers'  => ['Content-Type' => 'application/json'],
                    ];
                }

                if ($payloadHook = $this->config->getPayloadHook()) {
                    $payloadHook('multipart', $multipartContents, $signature_request_bulk_create_embedded_with_template_request);
                }
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':');
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation signatureRequestBulkSendWithTemplate
     *
     * Bulk Send with Template
     *
     * @param Model\SignatureRequestBulkSendWithTemplateRequest $signature_request_bulk_send_with_template_request signature_request_bulk_send_with_template_request (required)
     *
     * @return Model\BulkSendJobSendResponse
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     */
    public function signatureRequestBulkSendWithTemplate(Model\SignatureRequestBulkSendWithTemplateRequest $signature_request_bulk_send_with_template_request)
    {
        list($response) = $this->signatureRequestBulkSendWithTemplateWithHttpInfo($signature_request_bulk_send_with_template_request);
        return $response;
    }

    /**
     * Operation signatureRequestBulkSendWithTemplateWithHttpInfo
     *
     * Bulk Send with Template
     *
     * @param Model\SignatureRequestBulkSendWithTemplateRequest $signature_request_bulk_send_with_template_request (required)
     * @param string                                            $contentType                                       The value for the Content-Type header. Check self::contentTypes['signatureRequestBulkSendWithTemplate'] to see the possible values for this operation
     *
     * @return array of Model\BulkSendJobSendResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestBulkSendWithTemplate. This method will eventually become unavailable
     */
    public function signatureRequestBulkSendWithTemplateWithHttpInfo(Model\SignatureRequestBulkSendWithTemplateRequest $signature_request_bulk_send_with_template_request, string $contentType = self::contentTypes['signatureRequestBulkSendWithTemplate'][0])
    {
        $request = $this->signatureRequestBulkSendWithTemplateRequest($signature_request_bulk_send_with_template_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->response = $response;
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            $result = $this->handleRangeCodeResponse(
                $response,
                '4XX',
                '\Dropbox\Sign\Model\ErrorResponse'
            );
            if ($result) {
                return $result;
            }

            switch ($statusCode) {
                case 200:
                    if ('\Dropbox\Sign\Model\BulkSendJobSendResponse' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ('\Dropbox\Sign\Model\BulkSendJobSendResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dropbox\Sign\Model\BulkSendJobSendResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Dropbox\Sign\Model\BulkSendJobSendResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string)$response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            if ($this->handleRangeCodeException($e, '4XX', '\Dropbox\Sign\Model\ErrorResponse')) {
                throw $e;
            }
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dropbox\Sign\Model\BulkSendJobSendResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation signatureRequestBulkSendWithTemplateAsync
     *
     * Bulk Send with Template
     *
     * @param Model\SignatureRequestBulkSendWithTemplateRequest $signature_request_bulk_send_with_template_request (required)
     * @param string                                            $contentType                                       The value for the Content-Type header. Check self::contentTypes['signatureRequestBulkSendWithTemplate'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestBulkSendWithTemplate. This method will eventually become unavailable
     */
    public function signatureRequestBulkSendWithTemplateAsync(Model\SignatureRequestBulkSendWithTemplateRequest $signature_request_bulk_send_with_template_request, string $contentType = self::contentTypes['signatureRequestBulkSendWithTemplate'][0])
    {
        return $this->signatureRequestBulkSendWithTemplateAsyncWithHttpInfo($signature_request_bulk_send_with_template_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation signatureRequestBulkSendWithTemplateAsyncWithHttpInfo
     *
     * Bulk Send with Template
     *
     * @param Model\SignatureRequestBulkSendWithTemplateRequest $signature_request_bulk_send_with_template_request (required)
     * @param string                                            $contentType                                       The value for the Content-Type header. Check self::contentTypes['signatureRequestBulkSendWithTemplate'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestBulkSendWithTemplate. This method will eventually become unavailable
     */
    public function signatureRequestBulkSendWithTemplateAsyncWithHttpInfo(Model\SignatureRequestBulkSendWithTemplateRequest $signature_request_bulk_send_with_template_request, string $contentType = self::contentTypes['signatureRequestBulkSendWithTemplate'][0])
    {
        $returnType = '\Dropbox\Sign\Model\BulkSendJobSendResponse';
        $request = $this->signatureRequestBulkSendWithTemplateRequest($signature_request_bulk_send_with_template_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'signatureRequestBulkSendWithTemplate'
     *
     * @param Model\SignatureRequestBulkSendWithTemplateRequest $signature_request_bulk_send_with_template_request (required)
     * @param string                                            $contentType                                       The value for the Content-Type header. Check self::contentTypes['signatureRequestBulkSendWithTemplate'] to see the possible values for this operation
     *
     * @return Request
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestBulkSendWithTemplate. This method will eventually become unavailable
     */
    public function signatureRequestBulkSendWithTemplateRequest(Model\SignatureRequestBulkSendWithTemplateRequest $signature_request_bulk_send_with_template_request, string $contentType = self::contentTypes['signatureRequestBulkSendWithTemplate'][0])
    {
        // verify the required parameter 'signature_request_bulk_send_with_template_request' is set
        if ($signature_request_bulk_send_with_template_request === null || (is_array($signature_request_bulk_send_with_template_request) && count($signature_request_bulk_send_with_template_request) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $signature_request_bulk_send_with_template_request when calling signatureRequestBulkSendWithTemplate'
            );
        }

        $resourcePath = '/signature_request/bulk_send_with_template';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $formParams = ObjectSerializer::getFormParams(
            $signature_request_bulk_send_with_template_request
        );

        $multipart = !empty($formParams);

        $headers = $this->headerSelector->selectHeaders(
            $multipart ? ['multipart/form-data'] : ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) === 0) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($signature_request_bulk_send_with_template_request));
            } else {
                $httpBody = $signature_request_bulk_send_with_template_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name'     => 'body',
                        'contents' => $body,
                        'headers'  => ['Content-Type' => 'application/json'],
                    ];
                }

                if ($payloadHook = $this->config->getPayloadHook()) {
                    $payloadHook('multipart', $multipartContents, $signature_request_bulk_send_with_template_request);
                }
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':');
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation signatureRequestCancel
     *
     * Cancel Incomplete Signature Request
     *
     * @param string $signature_request_id The id of the incomplete SignatureRequest to cancel. (required)
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     */
    public function signatureRequestCancel(string $signature_request_id)
    {
        $this->signatureRequestCancelWithHttpInfo($signature_request_id);
    }

    /**
     * Operation signatureRequestCancelWithHttpInfo
     *
     * Cancel Incomplete Signature Request
     *
     * @param string $signature_request_id The id of the incomplete SignatureRequest to cancel. (required)
     * @param string $contentType          The value for the Content-Type header. Check self::contentTypes['signatureRequestCancel'] to see the possible values for this operation
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestCancel. This method will eventually become unavailable
     */
    public function signatureRequestCancelWithHttpInfo(string $signature_request_id, string $contentType = self::contentTypes['signatureRequestCancel'][0])
    {
        $request = $this->signatureRequestCancelRequest($signature_request_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->response = $response;
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            if ($this->handleRangeCodeException($e, '4XX', '\Dropbox\Sign\Model\ErrorResponse')) {
                throw $e;
            }
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation signatureRequestCancelAsync
     *
     * Cancel Incomplete Signature Request
     *
     * @param string $signature_request_id The id of the incomplete SignatureRequest to cancel. (required)
     * @param string $contentType          The value for the Content-Type header. Check self::contentTypes['signatureRequestCancel'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestCancel. This method will eventually become unavailable
     */
    public function signatureRequestCancelAsync(string $signature_request_id, string $contentType = self::contentTypes['signatureRequestCancel'][0])
    {
        return $this->signatureRequestCancelAsyncWithHttpInfo($signature_request_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation signatureRequestCancelAsyncWithHttpInfo
     *
     * Cancel Incomplete Signature Request
     *
     * @param string $signature_request_id The id of the incomplete SignatureRequest to cancel. (required)
     * @param string $contentType          The value for the Content-Type header. Check self::contentTypes['signatureRequestCancel'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestCancel. This method will eventually become unavailable
     */
    public function signatureRequestCancelAsyncWithHttpInfo(string $signature_request_id, string $contentType = self::contentTypes['signatureRequestCancel'][0])
    {
        $returnType = '';
        $request = $this->signatureRequestCancelRequest($signature_request_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'signatureRequestCancel'
     *
     * @param string $signature_request_id The id of the incomplete SignatureRequest to cancel. (required)
     * @param string $contentType          The value for the Content-Type header. Check self::contentTypes['signatureRequestCancel'] to see the possible values for this operation
     *
     * @return Request
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestCancel. This method will eventually become unavailable
     */
    public function signatureRequestCancelRequest(string $signature_request_id, string $contentType = self::contentTypes['signatureRequestCancel'][0])
    {
        // verify the required parameter 'signature_request_id' is set
        if ($signature_request_id === null || (is_array($signature_request_id) && count($signature_request_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $signature_request_id when calling signatureRequestCancel'
            );
        }

        $resourcePath = '/signature_request/cancel/{signature_request_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($signature_request_id !== null) {
            $resourcePath = str_replace(
                '{signature_request_id}',
                ObjectSerializer::toPathValue($signature_request_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            $multipart ? ['multipart/form-data'] : ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name'     => 'body',
                        'contents' => $body,
                        'headers'  => ['Content-Type' => 'application/json'],
                    ];
                }

                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':');
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation signatureRequestCreateEmbedded
     *
     * Create Embedded Signature Request
     *
     * @param Model\SignatureRequestCreateEmbeddedRequest $signature_request_create_embedded_request signature_request_create_embedded_request (required)
     *
     * @return Model\SignatureRequestGetResponse
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     */
    public function signatureRequestCreateEmbedded(Model\SignatureRequestCreateEmbeddedRequest $signature_request_create_embedded_request)
    {
        list($response) = $this->signatureRequestCreateEmbeddedWithHttpInfo($signature_request_create_embedded_request);
        return $response;
    }

    /**
     * Operation signatureRequestCreateEmbeddedWithHttpInfo
     *
     * Create Embedded Signature Request
     *
     * @param Model\SignatureRequestCreateEmbeddedRequest $signature_request_create_embedded_request (required)
     * @param string                                      $contentType                               The value for the Content-Type header. Check self::contentTypes['signatureRequestCreateEmbedded'] to see the possible values for this operation
     *
     * @return array of Model\SignatureRequestGetResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestCreateEmbedded. This method will eventually become unavailable
     */
    public function signatureRequestCreateEmbeddedWithHttpInfo(Model\SignatureRequestCreateEmbeddedRequest $signature_request_create_embedded_request, string $contentType = self::contentTypes['signatureRequestCreateEmbedded'][0])
    {
        $request = $this->signatureRequestCreateEmbeddedRequest($signature_request_create_embedded_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->response = $response;
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            $result = $this->handleRangeCodeResponse(
                $response,
                '4XX',
                '\Dropbox\Sign\Model\ErrorResponse'
            );
            if ($result) {
                return $result;
            }

            switch ($statusCode) {
                case 200:
                    if ('\Dropbox\Sign\Model\SignatureRequestGetResponse' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ('\Dropbox\Sign\Model\SignatureRequestGetResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dropbox\Sign\Model\SignatureRequestGetResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Dropbox\Sign\Model\SignatureRequestGetResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string)$response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            if ($this->handleRangeCodeException($e, '4XX', '\Dropbox\Sign\Model\ErrorResponse')) {
                throw $e;
            }
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dropbox\Sign\Model\SignatureRequestGetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation signatureRequestCreateEmbeddedAsync
     *
     * Create Embedded Signature Request
     *
     * @param Model\SignatureRequestCreateEmbeddedRequest $signature_request_create_embedded_request (required)
     * @param string                                      $contentType                               The value for the Content-Type header. Check self::contentTypes['signatureRequestCreateEmbedded'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestCreateEmbedded. This method will eventually become unavailable
     */
    public function signatureRequestCreateEmbeddedAsync(Model\SignatureRequestCreateEmbeddedRequest $signature_request_create_embedded_request, string $contentType = self::contentTypes['signatureRequestCreateEmbedded'][0])
    {
        return $this->signatureRequestCreateEmbeddedAsyncWithHttpInfo($signature_request_create_embedded_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation signatureRequestCreateEmbeddedAsyncWithHttpInfo
     *
     * Create Embedded Signature Request
     *
     * @param Model\SignatureRequestCreateEmbeddedRequest $signature_request_create_embedded_request (required)
     * @param string                                      $contentType                               The value for the Content-Type header. Check self::contentTypes['signatureRequestCreateEmbedded'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestCreateEmbedded. This method will eventually become unavailable
     */
    public function signatureRequestCreateEmbeddedAsyncWithHttpInfo(Model\SignatureRequestCreateEmbeddedRequest $signature_request_create_embedded_request, string $contentType = self::contentTypes['signatureRequestCreateEmbedded'][0])
    {
        $returnType = '\Dropbox\Sign\Model\SignatureRequestGetResponse';
        $request = $this->signatureRequestCreateEmbeddedRequest($signature_request_create_embedded_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'signatureRequestCreateEmbedded'
     *
     * @param Model\SignatureRequestCreateEmbeddedRequest $signature_request_create_embedded_request (required)
     * @param string                                      $contentType                               The value for the Content-Type header. Check self::contentTypes['signatureRequestCreateEmbedded'] to see the possible values for this operation
     *
     * @return Request
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestCreateEmbedded. This method will eventually become unavailable
     */
    public function signatureRequestCreateEmbeddedRequest(Model\SignatureRequestCreateEmbeddedRequest $signature_request_create_embedded_request, string $contentType = self::contentTypes['signatureRequestCreateEmbedded'][0])
    {
        // verify the required parameter 'signature_request_create_embedded_request' is set
        if ($signature_request_create_embedded_request === null || (is_array($signature_request_create_embedded_request) && count($signature_request_create_embedded_request) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $signature_request_create_embedded_request when calling signatureRequestCreateEmbedded'
            );
        }

        $resourcePath = '/signature_request/create_embedded';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $formParams = ObjectSerializer::getFormParams(
            $signature_request_create_embedded_request
        );

        $multipart = !empty($formParams);

        $headers = $this->headerSelector->selectHeaders(
            $multipart ? ['multipart/form-data'] : ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) === 0) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($signature_request_create_embedded_request));
            } else {
                $httpBody = $signature_request_create_embedded_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name'     => 'body',
                        'contents' => $body,
                        'headers'  => ['Content-Type' => 'application/json'],
                    ];
                }

                if ($payloadHook = $this->config->getPayloadHook()) {
                    $payloadHook('multipart', $multipartContents, $signature_request_create_embedded_request);
                }
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':');
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation signatureRequestCreateEmbeddedWithTemplate
     *
     * Create Embedded Signature Request with Template
     *
     * @param Model\SignatureRequestCreateEmbeddedWithTemplateRequest $signature_request_create_embedded_with_template_request signature_request_create_embedded_with_template_request (required)
     *
     * @return Model\SignatureRequestGetResponse
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     */
    public function signatureRequestCreateEmbeddedWithTemplate(Model\SignatureRequestCreateEmbeddedWithTemplateRequest $signature_request_create_embedded_with_template_request)
    {
        list($response) = $this->signatureRequestCreateEmbeddedWithTemplateWithHttpInfo($signature_request_create_embedded_with_template_request);
        return $response;
    }

    /**
     * Operation signatureRequestCreateEmbeddedWithTemplateWithHttpInfo
     *
     * Create Embedded Signature Request with Template
     *
     * @param Model\SignatureRequestCreateEmbeddedWithTemplateRequest $signature_request_create_embedded_with_template_request (required)
     * @param string                                                  $contentType                                             The value for the Content-Type header. Check self::contentTypes['signatureRequestCreateEmbeddedWithTemplate'] to see the possible values for this operation
     *
     * @return array of Model\SignatureRequestGetResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestCreateEmbeddedWithTemplate. This method will eventually become unavailable
     */
    public function signatureRequestCreateEmbeddedWithTemplateWithHttpInfo(Model\SignatureRequestCreateEmbeddedWithTemplateRequest $signature_request_create_embedded_with_template_request, string $contentType = self::contentTypes['signatureRequestCreateEmbeddedWithTemplate'][0])
    {
        $request = $this->signatureRequestCreateEmbeddedWithTemplateRequest($signature_request_create_embedded_with_template_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->response = $response;
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            $result = $this->handleRangeCodeResponse(
                $response,
                '4XX',
                '\Dropbox\Sign\Model\ErrorResponse'
            );
            if ($result) {
                return $result;
            }

            switch ($statusCode) {
                case 200:
                    if ('\Dropbox\Sign\Model\SignatureRequestGetResponse' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ('\Dropbox\Sign\Model\SignatureRequestGetResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dropbox\Sign\Model\SignatureRequestGetResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Dropbox\Sign\Model\SignatureRequestGetResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string)$response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            if ($this->handleRangeCodeException($e, '4XX', '\Dropbox\Sign\Model\ErrorResponse')) {
                throw $e;
            }
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dropbox\Sign\Model\SignatureRequestGetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation signatureRequestCreateEmbeddedWithTemplateAsync
     *
     * Create Embedded Signature Request with Template
     *
     * @param Model\SignatureRequestCreateEmbeddedWithTemplateRequest $signature_request_create_embedded_with_template_request (required)
     * @param string                                                  $contentType                                             The value for the Content-Type header. Check self::contentTypes['signatureRequestCreateEmbeddedWithTemplate'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestCreateEmbeddedWithTemplate. This method will eventually become unavailable
     */
    public function signatureRequestCreateEmbeddedWithTemplateAsync(Model\SignatureRequestCreateEmbeddedWithTemplateRequest $signature_request_create_embedded_with_template_request, string $contentType = self::contentTypes['signatureRequestCreateEmbeddedWithTemplate'][0])
    {
        return $this->signatureRequestCreateEmbeddedWithTemplateAsyncWithHttpInfo($signature_request_create_embedded_with_template_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation signatureRequestCreateEmbeddedWithTemplateAsyncWithHttpInfo
     *
     * Create Embedded Signature Request with Template
     *
     * @param Model\SignatureRequestCreateEmbeddedWithTemplateRequest $signature_request_create_embedded_with_template_request (required)
     * @param string                                                  $contentType                                             The value for the Content-Type header. Check self::contentTypes['signatureRequestCreateEmbeddedWithTemplate'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestCreateEmbeddedWithTemplate. This method will eventually become unavailable
     */
    public function signatureRequestCreateEmbeddedWithTemplateAsyncWithHttpInfo(Model\SignatureRequestCreateEmbeddedWithTemplateRequest $signature_request_create_embedded_with_template_request, string $contentType = self::contentTypes['signatureRequestCreateEmbeddedWithTemplate'][0])
    {
        $returnType = '\Dropbox\Sign\Model\SignatureRequestGetResponse';
        $request = $this->signatureRequestCreateEmbeddedWithTemplateRequest($signature_request_create_embedded_with_template_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'signatureRequestCreateEmbeddedWithTemplate'
     *
     * @param Model\SignatureRequestCreateEmbeddedWithTemplateRequest $signature_request_create_embedded_with_template_request (required)
     * @param string                                                  $contentType                                             The value for the Content-Type header. Check self::contentTypes['signatureRequestCreateEmbeddedWithTemplate'] to see the possible values for this operation
     *
     * @return Request
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestCreateEmbeddedWithTemplate. This method will eventually become unavailable
     */
    public function signatureRequestCreateEmbeddedWithTemplateRequest(Model\SignatureRequestCreateEmbeddedWithTemplateRequest $signature_request_create_embedded_with_template_request, string $contentType = self::contentTypes['signatureRequestCreateEmbeddedWithTemplate'][0])
    {
        // verify the required parameter 'signature_request_create_embedded_with_template_request' is set
        if ($signature_request_create_embedded_with_template_request === null || (is_array($signature_request_create_embedded_with_template_request) && count($signature_request_create_embedded_with_template_request) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $signature_request_create_embedded_with_template_request when calling signatureRequestCreateEmbeddedWithTemplate'
            );
        }

        $resourcePath = '/signature_request/create_embedded_with_template';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $formParams = ObjectSerializer::getFormParams(
            $signature_request_create_embedded_with_template_request
        );

        $multipart = !empty($formParams);

        $headers = $this->headerSelector->selectHeaders(
            $multipart ? ['multipart/form-data'] : ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) === 0) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($signature_request_create_embedded_with_template_request));
            } else {
                $httpBody = $signature_request_create_embedded_with_template_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name'     => 'body',
                        'contents' => $body,
                        'headers'  => ['Content-Type' => 'application/json'],
                    ];
                }

                if ($payloadHook = $this->config->getPayloadHook()) {
                    $payloadHook('multipart', $multipartContents, $signature_request_create_embedded_with_template_request);
                }
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':');
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation signatureRequestFiles
     *
     * Download Files
     *
     * @param string $signature_request_id The id of the SignatureRequest to retrieve. (required)
     * @param string $file_type            Set to &#x60;pdf&#x60; for a single merged document or &#x60;zip&#x60; for a collection of individual documents. (optional, default to 'pdf')
     *
     * @return SplFileObject
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     */
    public function signatureRequestFiles(string $signature_request_id, string $file_type = 'pdf')
    {
        list($response) = $this->signatureRequestFilesWithHttpInfo($signature_request_id, $file_type);
        return $response;
    }

    /**
     * Operation signatureRequestFilesWithHttpInfo
     *
     * Download Files
     *
     * @param string $signature_request_id The id of the SignatureRequest to retrieve. (required)
     * @param string $file_type            Set to &#x60;pdf&#x60; for a single merged document or &#x60;zip&#x60; for a collection of individual documents. (optional, default to 'pdf')
     * @param string $contentType          The value for the Content-Type header. Check self::contentTypes['signatureRequestFiles'] to see the possible values for this operation
     *
     * @return array of \SplFileObject|\Dropbox\Sign\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestFiles. This method will eventually become unavailable
     */
    public function signatureRequestFilesWithHttpInfo(string $signature_request_id, string $file_type = 'pdf', string $contentType = self::contentTypes['signatureRequestFiles'][0])
    {
        $request = $this->signatureRequestFilesRequest($signature_request_id, $file_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->response = $response;
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            $result = $this->handleRangeCodeResponse(
                $response,
                '4XX',
                '\Dropbox\Sign\Model\ErrorResponse'
            );
            if ($result) {
                return $result;
            }

            switch ($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string)$response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            if ($this->handleRangeCodeException($e, '4XX', '\Dropbox\Sign\Model\ErrorResponse')) {
                throw $e;
            }
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation signatureRequestFilesAsync
     *
     * Download Files
     *
     * @param string $signature_request_id The id of the SignatureRequest to retrieve. (required)
     * @param string $file_type            Set to &#x60;pdf&#x60; for a single merged document or &#x60;zip&#x60; for a collection of individual documents. (optional, default to 'pdf')
     * @param string $contentType          The value for the Content-Type header. Check self::contentTypes['signatureRequestFiles'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestFiles. This method will eventually become unavailable
     */
    public function signatureRequestFilesAsync(string $signature_request_id, string $file_type = 'pdf', string $contentType = self::contentTypes['signatureRequestFiles'][0])
    {
        return $this->signatureRequestFilesAsyncWithHttpInfo($signature_request_id, $file_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation signatureRequestFilesAsyncWithHttpInfo
     *
     * Download Files
     *
     * @param string $signature_request_id The id of the SignatureRequest to retrieve. (required)
     * @param string $file_type            Set to &#x60;pdf&#x60; for a single merged document or &#x60;zip&#x60; for a collection of individual documents. (optional, default to 'pdf')
     * @param string $contentType          The value for the Content-Type header. Check self::contentTypes['signatureRequestFiles'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestFiles. This method will eventually become unavailable
     */
    public function signatureRequestFilesAsyncWithHttpInfo(string $signature_request_id, string $file_type = 'pdf', string $contentType = self::contentTypes['signatureRequestFiles'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->signatureRequestFilesRequest($signature_request_id, $file_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'signatureRequestFiles'
     *
     * @param string $signature_request_id The id of the SignatureRequest to retrieve. (required)
     * @param string $file_type            Set to &#x60;pdf&#x60; for a single merged document or &#x60;zip&#x60; for a collection of individual documents. (optional, default to 'pdf')
     * @param string $contentType          The value for the Content-Type header. Check self::contentTypes['signatureRequestFiles'] to see the possible values for this operation
     *
     * @return Request
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestFiles. This method will eventually become unavailable
     */
    public function signatureRequestFilesRequest(string $signature_request_id, string $file_type = 'pdf', string $contentType = self::contentTypes['signatureRequestFiles'][0])
    {
        // verify the required parameter 'signature_request_id' is set
        if ($signature_request_id === null || (is_array($signature_request_id) && count($signature_request_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $signature_request_id when calling signatureRequestFiles'
            );
        }

        $resourcePath = '/signature_request/files/{signature_request_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $file_type,
            'file_type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // path params
        if ($signature_request_id !== null) {
            $resourcePath = str_replace(
                '{signature_request_id}',
                ObjectSerializer::toPathValue($signature_request_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            $multipart ? ['multipart/form-data'] : ['application/pdf', 'application/zip', 'application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name'     => 'body',
                        'contents' => $body,
                        'headers'  => ['Content-Type' => 'application/json'],
                    ];
                }

                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':');
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation signatureRequestFilesAsDataUri
     *
     * Download Files as Data Uri
     *
     * @param string $signature_request_id The id of the SignatureRequest to retrieve. (required)
     *
     * @return Model\FileResponseDataUri
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     */
    public function signatureRequestFilesAsDataUri(string $signature_request_id)
    {
        list($response) = $this->signatureRequestFilesAsDataUriWithHttpInfo($signature_request_id);
        return $response;
    }

    /**
     * Operation signatureRequestFilesAsDataUriWithHttpInfo
     *
     * Download Files as Data Uri
     *
     * @param string $signature_request_id The id of the SignatureRequest to retrieve. (required)
     * @param string $contentType          The value for the Content-Type header. Check self::contentTypes['signatureRequestFilesAsDataUri'] to see the possible values for this operation
     *
     * @return array of Model\FileResponseDataUri, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestFilesAsDataUri. This method will eventually become unavailable
     */
    public function signatureRequestFilesAsDataUriWithHttpInfo(string $signature_request_id, string $contentType = self::contentTypes['signatureRequestFilesAsDataUri'][0])
    {
        $request = $this->signatureRequestFilesAsDataUriRequest($signature_request_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->response = $response;
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            $result = $this->handleRangeCodeResponse(
                $response,
                '4XX',
                '\Dropbox\Sign\Model\ErrorResponse'
            );
            if ($result) {
                return $result;
            }

            switch ($statusCode) {
                case 200:
                    if ('\Dropbox\Sign\Model\FileResponseDataUri' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ('\Dropbox\Sign\Model\FileResponseDataUri' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dropbox\Sign\Model\FileResponseDataUri', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Dropbox\Sign\Model\FileResponseDataUri';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string)$response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            if ($this->handleRangeCodeException($e, '4XX', '\Dropbox\Sign\Model\ErrorResponse')) {
                throw $e;
            }
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dropbox\Sign\Model\FileResponseDataUri',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation signatureRequestFilesAsDataUriAsync
     *
     * Download Files as Data Uri
     *
     * @param string $signature_request_id The id of the SignatureRequest to retrieve. (required)
     * @param string $contentType          The value for the Content-Type header. Check self::contentTypes['signatureRequestFilesAsDataUri'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestFilesAsDataUri. This method will eventually become unavailable
     */
    public function signatureRequestFilesAsDataUriAsync(string $signature_request_id, string $contentType = self::contentTypes['signatureRequestFilesAsDataUri'][0])
    {
        return $this->signatureRequestFilesAsDataUriAsyncWithHttpInfo($signature_request_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation signatureRequestFilesAsDataUriAsyncWithHttpInfo
     *
     * Download Files as Data Uri
     *
     * @param string $signature_request_id The id of the SignatureRequest to retrieve. (required)
     * @param string $contentType          The value for the Content-Type header. Check self::contentTypes['signatureRequestFilesAsDataUri'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestFilesAsDataUri. This method will eventually become unavailable
     */
    public function signatureRequestFilesAsDataUriAsyncWithHttpInfo(string $signature_request_id, string $contentType = self::contentTypes['signatureRequestFilesAsDataUri'][0])
    {
        $returnType = '\Dropbox\Sign\Model\FileResponseDataUri';
        $request = $this->signatureRequestFilesAsDataUriRequest($signature_request_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'signatureRequestFilesAsDataUri'
     *
     * @param string $signature_request_id The id of the SignatureRequest to retrieve. (required)
     * @param string $contentType          The value for the Content-Type header. Check self::contentTypes['signatureRequestFilesAsDataUri'] to see the possible values for this operation
     *
     * @return Request
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestFilesAsDataUri. This method will eventually become unavailable
     */
    public function signatureRequestFilesAsDataUriRequest(string $signature_request_id, string $contentType = self::contentTypes['signatureRequestFilesAsDataUri'][0])
    {
        // verify the required parameter 'signature_request_id' is set
        if ($signature_request_id === null || (is_array($signature_request_id) && count($signature_request_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $signature_request_id when calling signatureRequestFilesAsDataUri'
            );
        }

        $resourcePath = '/signature_request/files_as_data_uri/{signature_request_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($signature_request_id !== null) {
            $resourcePath = str_replace(
                '{signature_request_id}',
                ObjectSerializer::toPathValue($signature_request_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            $multipart ? ['multipart/form-data'] : ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name'     => 'body',
                        'contents' => $body,
                        'headers'  => ['Content-Type' => 'application/json'],
                    ];
                }

                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':');
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation signatureRequestFilesAsFileUrl
     *
     * Download Files as File Url
     *
     * @param string $signature_request_id The id of the SignatureRequest to retrieve. (required)
     * @param int    $force_download       By default when opening the &#x60;file_url&#x60; a browser will download the PDF and save it locally. When set to &#x60;0&#x60; the PDF file will be displayed in the browser. (optional, default to 1)
     *
     * @return Model\FileResponse
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     */
    public function signatureRequestFilesAsFileUrl(string $signature_request_id, int $force_download = 1)
    {
        list($response) = $this->signatureRequestFilesAsFileUrlWithHttpInfo($signature_request_id, $force_download);
        return $response;
    }

    /**
     * Operation signatureRequestFilesAsFileUrlWithHttpInfo
     *
     * Download Files as File Url
     *
     * @param string $signature_request_id The id of the SignatureRequest to retrieve. (required)
     * @param int    $force_download       By default when opening the &#x60;file_url&#x60; a browser will download the PDF and save it locally. When set to &#x60;0&#x60; the PDF file will be displayed in the browser. (optional, default to 1)
     * @param string $contentType          The value for the Content-Type header. Check self::contentTypes['signatureRequestFilesAsFileUrl'] to see the possible values for this operation
     *
     * @return array of Model\FileResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestFilesAsFileUrl. This method will eventually become unavailable
     */
    public function signatureRequestFilesAsFileUrlWithHttpInfo(string $signature_request_id, int $force_download = 1, string $contentType = self::contentTypes['signatureRequestFilesAsFileUrl'][0])
    {
        $request = $this->signatureRequestFilesAsFileUrlRequest($signature_request_id, $force_download, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->response = $response;
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            $result = $this->handleRangeCodeResponse(
                $response,
                '4XX',
                '\Dropbox\Sign\Model\ErrorResponse'
            );
            if ($result) {
                return $result;
            }

            switch ($statusCode) {
                case 200:
                    if ('\Dropbox\Sign\Model\FileResponse' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ('\Dropbox\Sign\Model\FileResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dropbox\Sign\Model\FileResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Dropbox\Sign\Model\FileResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string)$response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            if ($this->handleRangeCodeException($e, '4XX', '\Dropbox\Sign\Model\ErrorResponse')) {
                throw $e;
            }
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dropbox\Sign\Model\FileResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation signatureRequestFilesAsFileUrlAsync
     *
     * Download Files as File Url
     *
     * @param string $signature_request_id The id of the SignatureRequest to retrieve. (required)
     * @param int    $force_download       By default when opening the &#x60;file_url&#x60; a browser will download the PDF and save it locally. When set to &#x60;0&#x60; the PDF file will be displayed in the browser. (optional, default to 1)
     * @param string $contentType          The value for the Content-Type header. Check self::contentTypes['signatureRequestFilesAsFileUrl'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestFilesAsFileUrl. This method will eventually become unavailable
     */
    public function signatureRequestFilesAsFileUrlAsync(string $signature_request_id, int $force_download = 1, string $contentType = self::contentTypes['signatureRequestFilesAsFileUrl'][0])
    {
        return $this->signatureRequestFilesAsFileUrlAsyncWithHttpInfo($signature_request_id, $force_download, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation signatureRequestFilesAsFileUrlAsyncWithHttpInfo
     *
     * Download Files as File Url
     *
     * @param string $signature_request_id The id of the SignatureRequest to retrieve. (required)
     * @param int    $force_download       By default when opening the &#x60;file_url&#x60; a browser will download the PDF and save it locally. When set to &#x60;0&#x60; the PDF file will be displayed in the browser. (optional, default to 1)
     * @param string $contentType          The value for the Content-Type header. Check self::contentTypes['signatureRequestFilesAsFileUrl'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestFilesAsFileUrl. This method will eventually become unavailable
     */
    public function signatureRequestFilesAsFileUrlAsyncWithHttpInfo(string $signature_request_id, int $force_download = 1, string $contentType = self::contentTypes['signatureRequestFilesAsFileUrl'][0])
    {
        $returnType = '\Dropbox\Sign\Model\FileResponse';
        $request = $this->signatureRequestFilesAsFileUrlRequest($signature_request_id, $force_download, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'signatureRequestFilesAsFileUrl'
     *
     * @param string $signature_request_id The id of the SignatureRequest to retrieve. (required)
     * @param int    $force_download       By default when opening the &#x60;file_url&#x60; a browser will download the PDF and save it locally. When set to &#x60;0&#x60; the PDF file will be displayed in the browser. (optional, default to 1)
     * @param string $contentType          The value for the Content-Type header. Check self::contentTypes['signatureRequestFilesAsFileUrl'] to see the possible values for this operation
     *
     * @return Request
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestFilesAsFileUrl. This method will eventually become unavailable
     */
    public function signatureRequestFilesAsFileUrlRequest(string $signature_request_id, int $force_download = 1, string $contentType = self::contentTypes['signatureRequestFilesAsFileUrl'][0])
    {
        // verify the required parameter 'signature_request_id' is set
        if ($signature_request_id === null || (is_array($signature_request_id) && count($signature_request_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $signature_request_id when calling signatureRequestFilesAsFileUrl'
            );
        }

        $resourcePath = '/signature_request/files_as_file_url/{signature_request_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $force_download,
            'force_download', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // path params
        if ($signature_request_id !== null) {
            $resourcePath = str_replace(
                '{signature_request_id}',
                ObjectSerializer::toPathValue($signature_request_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            $multipart ? ['multipart/form-data'] : ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name'     => 'body',
                        'contents' => $body,
                        'headers'  => ['Content-Type' => 'application/json'],
                    ];
                }

                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':');
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation signatureRequestGet
     *
     * Get Signature Request
     *
     * @param string $signature_request_id The id of the SignatureRequest to retrieve. (required)
     *
     * @return Model\SignatureRequestGetResponse
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     */
    public function signatureRequestGet(string $signature_request_id)
    {
        list($response) = $this->signatureRequestGetWithHttpInfo($signature_request_id);
        return $response;
    }

    /**
     * Operation signatureRequestGetWithHttpInfo
     *
     * Get Signature Request
     *
     * @param string $signature_request_id The id of the SignatureRequest to retrieve. (required)
     * @param string $contentType          The value for the Content-Type header. Check self::contentTypes['signatureRequestGet'] to see the possible values for this operation
     *
     * @return array of Model\SignatureRequestGetResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestGet. This method will eventually become unavailable
     */
    public function signatureRequestGetWithHttpInfo(string $signature_request_id, string $contentType = self::contentTypes['signatureRequestGet'][0])
    {
        $request = $this->signatureRequestGetRequest($signature_request_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->response = $response;
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            $result = $this->handleRangeCodeResponse(
                $response,
                '4XX',
                '\Dropbox\Sign\Model\ErrorResponse'
            );
            if ($result) {
                return $result;
            }

            switch ($statusCode) {
                case 200:
                    if ('\Dropbox\Sign\Model\SignatureRequestGetResponse' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ('\Dropbox\Sign\Model\SignatureRequestGetResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dropbox\Sign\Model\SignatureRequestGetResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Dropbox\Sign\Model\SignatureRequestGetResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string)$response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            if ($this->handleRangeCodeException($e, '4XX', '\Dropbox\Sign\Model\ErrorResponse')) {
                throw $e;
            }
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dropbox\Sign\Model\SignatureRequestGetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation signatureRequestGetAsync
     *
     * Get Signature Request
     *
     * @param string $signature_request_id The id of the SignatureRequest to retrieve. (required)
     * @param string $contentType          The value for the Content-Type header. Check self::contentTypes['signatureRequestGet'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestGet. This method will eventually become unavailable
     */
    public function signatureRequestGetAsync(string $signature_request_id, string $contentType = self::contentTypes['signatureRequestGet'][0])
    {
        return $this->signatureRequestGetAsyncWithHttpInfo($signature_request_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation signatureRequestGetAsyncWithHttpInfo
     *
     * Get Signature Request
     *
     * @param string $signature_request_id The id of the SignatureRequest to retrieve. (required)
     * @param string $contentType          The value for the Content-Type header. Check self::contentTypes['signatureRequestGet'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestGet. This method will eventually become unavailable
     */
    public function signatureRequestGetAsyncWithHttpInfo(string $signature_request_id, string $contentType = self::contentTypes['signatureRequestGet'][0])
    {
        $returnType = '\Dropbox\Sign\Model\SignatureRequestGetResponse';
        $request = $this->signatureRequestGetRequest($signature_request_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'signatureRequestGet'
     *
     * @param string $signature_request_id The id of the SignatureRequest to retrieve. (required)
     * @param string $contentType          The value for the Content-Type header. Check self::contentTypes['signatureRequestGet'] to see the possible values for this operation
     *
     * @return Request
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestGet. This method will eventually become unavailable
     */
    public function signatureRequestGetRequest(string $signature_request_id, string $contentType = self::contentTypes['signatureRequestGet'][0])
    {
        // verify the required parameter 'signature_request_id' is set
        if ($signature_request_id === null || (is_array($signature_request_id) && count($signature_request_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $signature_request_id when calling signatureRequestGet'
            );
        }

        $resourcePath = '/signature_request/{signature_request_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($signature_request_id !== null) {
            $resourcePath = str_replace(
                '{signature_request_id}',
                ObjectSerializer::toPathValue($signature_request_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            $multipart ? ['multipart/form-data'] : ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name'     => 'body',
                        'contents' => $body,
                        'headers'  => ['Content-Type' => 'application/json'],
                    ];
                }

                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':');
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation signatureRequestList
     *
     * List Signature Requests
     *
     * @param string $account_id Which account to return SignatureRequests for. Must be a team member. Use &#x60;all&#x60; to indicate all team members. Defaults to your account. (optional)
     * @param int    $page       Which page number of the SignatureRequest List to return. Defaults to &#x60;1&#x60;. (optional, default to 1)
     * @param int    $page_size  Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)
     * @param string $query      String that includes search terms and/or fields to be used to filter the SignatureRequest objects. (optional)
     *
     * @return Model\SignatureRequestListResponse
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     */
    public function signatureRequestList(string $account_id = null, int $page = 1, int $page_size = 20, string $query = null)
    {
        list($response) = $this->signatureRequestListWithHttpInfo($account_id, $page, $page_size, $query);
        return $response;
    }

    /**
     * Operation signatureRequestListWithHttpInfo
     *
     * List Signature Requests
     *
     * @param string $account_id  Which account to return SignatureRequests for. Must be a team member. Use &#x60;all&#x60; to indicate all team members. Defaults to your account. (optional)
     * @param int    $page        Which page number of the SignatureRequest List to return. Defaults to &#x60;1&#x60;. (optional, default to 1)
     * @param int    $page_size   Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)
     * @param string $query       String that includes search terms and/or fields to be used to filter the SignatureRequest objects. (optional)
     * @param string $contentType The value for the Content-Type header. Check self::contentTypes['signatureRequestList'] to see the possible values for this operation
     *
     * @return array of Model\SignatureRequestListResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestList. This method will eventually become unavailable
     */
    public function signatureRequestListWithHttpInfo(string $account_id = null, int $page = 1, int $page_size = 20, string $query = null, string $contentType = self::contentTypes['signatureRequestList'][0])
    {
        $request = $this->signatureRequestListRequest($account_id, $page, $page_size, $query, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->response = $response;
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            $result = $this->handleRangeCodeResponse(
                $response,
                '4XX',
                '\Dropbox\Sign\Model\ErrorResponse'
            );
            if ($result) {
                return $result;
            }

            switch ($statusCode) {
                case 200:
                    if ('\Dropbox\Sign\Model\SignatureRequestListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ('\Dropbox\Sign\Model\SignatureRequestListResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dropbox\Sign\Model\SignatureRequestListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Dropbox\Sign\Model\SignatureRequestListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string)$response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            if ($this->handleRangeCodeException($e, '4XX', '\Dropbox\Sign\Model\ErrorResponse')) {
                throw $e;
            }
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dropbox\Sign\Model\SignatureRequestListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation signatureRequestListAsync
     *
     * List Signature Requests
     *
     * @param string $account_id  Which account to return SignatureRequests for. Must be a team member. Use &#x60;all&#x60; to indicate all team members. Defaults to your account. (optional)
     * @param int    $page        Which page number of the SignatureRequest List to return. Defaults to &#x60;1&#x60;. (optional, default to 1)
     * @param int    $page_size   Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)
     * @param string $query       String that includes search terms and/or fields to be used to filter the SignatureRequest objects. (optional)
     * @param string $contentType The value for the Content-Type header. Check self::contentTypes['signatureRequestList'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestList. This method will eventually become unavailable
     */
    public function signatureRequestListAsync(string $account_id = null, int $page = 1, int $page_size = 20, string $query = null, string $contentType = self::contentTypes['signatureRequestList'][0])
    {
        return $this->signatureRequestListAsyncWithHttpInfo($account_id, $page, $page_size, $query, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation signatureRequestListAsyncWithHttpInfo
     *
     * List Signature Requests
     *
     * @param string $account_id  Which account to return SignatureRequests for. Must be a team member. Use &#x60;all&#x60; to indicate all team members. Defaults to your account. (optional)
     * @param int    $page        Which page number of the SignatureRequest List to return. Defaults to &#x60;1&#x60;. (optional, default to 1)
     * @param int    $page_size   Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)
     * @param string $query       String that includes search terms and/or fields to be used to filter the SignatureRequest objects. (optional)
     * @param string $contentType The value for the Content-Type header. Check self::contentTypes['signatureRequestList'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestList. This method will eventually become unavailable
     */
    public function signatureRequestListAsyncWithHttpInfo(string $account_id = null, int $page = 1, int $page_size = 20, string $query = null, string $contentType = self::contentTypes['signatureRequestList'][0])
    {
        $returnType = '\Dropbox\Sign\Model\SignatureRequestListResponse';
        $request = $this->signatureRequestListRequest($account_id, $page, $page_size, $query, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'signatureRequestList'
     *
     * @param string $account_id  Which account to return SignatureRequests for. Must be a team member. Use &#x60;all&#x60; to indicate all team members. Defaults to your account. (optional)
     * @param int    $page        Which page number of the SignatureRequest List to return. Defaults to &#x60;1&#x60;. (optional, default to 1)
     * @param int    $page_size   Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)
     * @param string $query       String that includes search terms and/or fields to be used to filter the SignatureRequest objects. (optional)
     * @param string $contentType The value for the Content-Type header. Check self::contentTypes['signatureRequestList'] to see the possible values for this operation
     *
     * @return Request
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestList. This method will eventually become unavailable
     */
    public function signatureRequestListRequest(string $account_id = null, int $page = 1, int $page_size = 20, string $query = null, string $contentType = self::contentTypes['signatureRequestList'][0])
    {
        $resourcePath = '/signature_request/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $account_id,
            'account_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        $headers = $this->headerSelector->selectHeaders(
            $multipart ? ['multipart/form-data'] : ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name'     => 'body',
                        'contents' => $body,
                        'headers'  => ['Content-Type' => 'application/json'],
                    ];
                }

                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':');
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation signatureRequestReleaseHold
     *
     * Release On-Hold Signature Request
     *
     * @param string $signature_request_id The id of the SignatureRequest to release. (required)
     *
     * @return Model\SignatureRequestGetResponse
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     */
    public function signatureRequestReleaseHold(string $signature_request_id)
    {
        list($response) = $this->signatureRequestReleaseHoldWithHttpInfo($signature_request_id);
        return $response;
    }

    /**
     * Operation signatureRequestReleaseHoldWithHttpInfo
     *
     * Release On-Hold Signature Request
     *
     * @param string $signature_request_id The id of the SignatureRequest to release. (required)
     * @param string $contentType          The value for the Content-Type header. Check self::contentTypes['signatureRequestReleaseHold'] to see the possible values for this operation
     *
     * @return array of Model\SignatureRequestGetResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestReleaseHold. This method will eventually become unavailable
     */
    public function signatureRequestReleaseHoldWithHttpInfo(string $signature_request_id, string $contentType = self::contentTypes['signatureRequestReleaseHold'][0])
    {
        $request = $this->signatureRequestReleaseHoldRequest($signature_request_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->response = $response;
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            $result = $this->handleRangeCodeResponse(
                $response,
                '4XX',
                '\Dropbox\Sign\Model\ErrorResponse'
            );
            if ($result) {
                return $result;
            }

            switch ($statusCode) {
                case 200:
                    if ('\Dropbox\Sign\Model\SignatureRequestGetResponse' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ('\Dropbox\Sign\Model\SignatureRequestGetResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dropbox\Sign\Model\SignatureRequestGetResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Dropbox\Sign\Model\SignatureRequestGetResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string)$response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            if ($this->handleRangeCodeException($e, '4XX', '\Dropbox\Sign\Model\ErrorResponse')) {
                throw $e;
            }
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dropbox\Sign\Model\SignatureRequestGetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation signatureRequestReleaseHoldAsync
     *
     * Release On-Hold Signature Request
     *
     * @param string $signature_request_id The id of the SignatureRequest to release. (required)
     * @param string $contentType          The value for the Content-Type header. Check self::contentTypes['signatureRequestReleaseHold'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestReleaseHold. This method will eventually become unavailable
     */
    public function signatureRequestReleaseHoldAsync(string $signature_request_id, string $contentType = self::contentTypes['signatureRequestReleaseHold'][0])
    {
        return $this->signatureRequestReleaseHoldAsyncWithHttpInfo($signature_request_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation signatureRequestReleaseHoldAsyncWithHttpInfo
     *
     * Release On-Hold Signature Request
     *
     * @param string $signature_request_id The id of the SignatureRequest to release. (required)
     * @param string $contentType          The value for the Content-Type header. Check self::contentTypes['signatureRequestReleaseHold'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestReleaseHold. This method will eventually become unavailable
     */
    public function signatureRequestReleaseHoldAsyncWithHttpInfo(string $signature_request_id, string $contentType = self::contentTypes['signatureRequestReleaseHold'][0])
    {
        $returnType = '\Dropbox\Sign\Model\SignatureRequestGetResponse';
        $request = $this->signatureRequestReleaseHoldRequest($signature_request_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'signatureRequestReleaseHold'
     *
     * @param string $signature_request_id The id of the SignatureRequest to release. (required)
     * @param string $contentType          The value for the Content-Type header. Check self::contentTypes['signatureRequestReleaseHold'] to see the possible values for this operation
     *
     * @return Request
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestReleaseHold. This method will eventually become unavailable
     */
    public function signatureRequestReleaseHoldRequest(string $signature_request_id, string $contentType = self::contentTypes['signatureRequestReleaseHold'][0])
    {
        // verify the required parameter 'signature_request_id' is set
        if ($signature_request_id === null || (is_array($signature_request_id) && count($signature_request_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $signature_request_id when calling signatureRequestReleaseHold'
            );
        }

        $resourcePath = '/signature_request/release_hold/{signature_request_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($signature_request_id !== null) {
            $resourcePath = str_replace(
                '{signature_request_id}',
                ObjectSerializer::toPathValue($signature_request_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            $multipart ? ['multipart/form-data'] : ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name'     => 'body',
                        'contents' => $body,
                        'headers'  => ['Content-Type' => 'application/json'],
                    ];
                }

                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':');
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation signatureRequestRemind
     *
     * Send Request Reminder
     *
     * @param string                              $signature_request_id             The id of the SignatureRequest to send a reminder for. (required)
     * @param Model\SignatureRequestRemindRequest $signature_request_remind_request signature_request_remind_request (required)
     *
     * @return Model\SignatureRequestGetResponse
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     */
    public function signatureRequestRemind(string $signature_request_id, Model\SignatureRequestRemindRequest $signature_request_remind_request)
    {
        list($response) = $this->signatureRequestRemindWithHttpInfo($signature_request_id, $signature_request_remind_request);
        return $response;
    }

    /**
     * Operation signatureRequestRemindWithHttpInfo
     *
     * Send Request Reminder
     *
     * @param string                              $signature_request_id             The id of the SignatureRequest to send a reminder for. (required)
     * @param Model\SignatureRequestRemindRequest $signature_request_remind_request (required)
     * @param string                              $contentType                      The value for the Content-Type header. Check self::contentTypes['signatureRequestRemind'] to see the possible values for this operation
     *
     * @return array of Model\SignatureRequestGetResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestRemind. This method will eventually become unavailable
     */
    public function signatureRequestRemindWithHttpInfo(string $signature_request_id, Model\SignatureRequestRemindRequest $signature_request_remind_request, string $contentType = self::contentTypes['signatureRequestRemind'][0])
    {
        $request = $this->signatureRequestRemindRequest($signature_request_id, $signature_request_remind_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->response = $response;
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            $result = $this->handleRangeCodeResponse(
                $response,
                '4XX',
                '\Dropbox\Sign\Model\ErrorResponse'
            );
            if ($result) {
                return $result;
            }

            switch ($statusCode) {
                case 200:
                    if ('\Dropbox\Sign\Model\SignatureRequestGetResponse' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ('\Dropbox\Sign\Model\SignatureRequestGetResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dropbox\Sign\Model\SignatureRequestGetResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Dropbox\Sign\Model\SignatureRequestGetResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string)$response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            if ($this->handleRangeCodeException($e, '4XX', '\Dropbox\Sign\Model\ErrorResponse')) {
                throw $e;
            }
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dropbox\Sign\Model\SignatureRequestGetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation signatureRequestRemindAsync
     *
     * Send Request Reminder
     *
     * @param string                              $signature_request_id             The id of the SignatureRequest to send a reminder for. (required)
     * @param Model\SignatureRequestRemindRequest $signature_request_remind_request (required)
     * @param string                              $contentType                      The value for the Content-Type header. Check self::contentTypes['signatureRequestRemind'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestRemind. This method will eventually become unavailable
     */
    public function signatureRequestRemindAsync(string $signature_request_id, Model\SignatureRequestRemindRequest $signature_request_remind_request, string $contentType = self::contentTypes['signatureRequestRemind'][0])
    {
        return $this->signatureRequestRemindAsyncWithHttpInfo($signature_request_id, $signature_request_remind_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation signatureRequestRemindAsyncWithHttpInfo
     *
     * Send Request Reminder
     *
     * @param string                              $signature_request_id             The id of the SignatureRequest to send a reminder for. (required)
     * @param Model\SignatureRequestRemindRequest $signature_request_remind_request (required)
     * @param string                              $contentType                      The value for the Content-Type header. Check self::contentTypes['signatureRequestRemind'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestRemind. This method will eventually become unavailable
     */
    public function signatureRequestRemindAsyncWithHttpInfo(string $signature_request_id, Model\SignatureRequestRemindRequest $signature_request_remind_request, string $contentType = self::contentTypes['signatureRequestRemind'][0])
    {
        $returnType = '\Dropbox\Sign\Model\SignatureRequestGetResponse';
        $request = $this->signatureRequestRemindRequest($signature_request_id, $signature_request_remind_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'signatureRequestRemind'
     *
     * @param string                              $signature_request_id             The id of the SignatureRequest to send a reminder for. (required)
     * @param Model\SignatureRequestRemindRequest $signature_request_remind_request (required)
     * @param string                              $contentType                      The value for the Content-Type header. Check self::contentTypes['signatureRequestRemind'] to see the possible values for this operation
     *
     * @return Request
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestRemind. This method will eventually become unavailable
     */
    public function signatureRequestRemindRequest(string $signature_request_id, Model\SignatureRequestRemindRequest $signature_request_remind_request, string $contentType = self::contentTypes['signatureRequestRemind'][0])
    {
        // verify the required parameter 'signature_request_id' is set
        if ($signature_request_id === null || (is_array($signature_request_id) && count($signature_request_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $signature_request_id when calling signatureRequestRemind'
            );
        }

        // verify the required parameter 'signature_request_remind_request' is set
        if ($signature_request_remind_request === null || (is_array($signature_request_remind_request) && count($signature_request_remind_request) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $signature_request_remind_request when calling signatureRequestRemind'
            );
        }

        $resourcePath = '/signature_request/remind/{signature_request_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $formParams = ObjectSerializer::getFormParams(
            $signature_request_remind_request
        );

        $multipart = !empty($formParams);

        // path params
        if ($signature_request_id !== null) {
            $resourcePath = str_replace(
                '{signature_request_id}',
                ObjectSerializer::toPathValue($signature_request_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            $multipart ? ['multipart/form-data'] : ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) === 0) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($signature_request_remind_request));
            } else {
                $httpBody = $signature_request_remind_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name'     => 'body',
                        'contents' => $body,
                        'headers'  => ['Content-Type' => 'application/json'],
                    ];
                }

                if ($payloadHook = $this->config->getPayloadHook()) {
                    $payloadHook('multipart', $multipartContents, $signature_request_remind_request);
                }
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':');
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation signatureRequestRemove
     *
     * Remove Signature Request Access
     *
     * @param string $signature_request_id The id of the SignatureRequest to remove. (required)
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     */
    public function signatureRequestRemove(string $signature_request_id)
    {
        $this->signatureRequestRemoveWithHttpInfo($signature_request_id);
    }

    /**
     * Operation signatureRequestRemoveWithHttpInfo
     *
     * Remove Signature Request Access
     *
     * @param string $signature_request_id The id of the SignatureRequest to remove. (required)
     * @param string $contentType          The value for the Content-Type header. Check self::contentTypes['signatureRequestRemove'] to see the possible values for this operation
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestRemove. This method will eventually become unavailable
     */
    public function signatureRequestRemoveWithHttpInfo(string $signature_request_id, string $contentType = self::contentTypes['signatureRequestRemove'][0])
    {
        $request = $this->signatureRequestRemoveRequest($signature_request_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->response = $response;
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            if ($this->handleRangeCodeException($e, '4XX', '\Dropbox\Sign\Model\ErrorResponse')) {
                throw $e;
            }
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation signatureRequestRemoveAsync
     *
     * Remove Signature Request Access
     *
     * @param string $signature_request_id The id of the SignatureRequest to remove. (required)
     * @param string $contentType          The value for the Content-Type header. Check self::contentTypes['signatureRequestRemove'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestRemove. This method will eventually become unavailable
     */
    public function signatureRequestRemoveAsync(string $signature_request_id, string $contentType = self::contentTypes['signatureRequestRemove'][0])
    {
        return $this->signatureRequestRemoveAsyncWithHttpInfo($signature_request_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation signatureRequestRemoveAsyncWithHttpInfo
     *
     * Remove Signature Request Access
     *
     * @param string $signature_request_id The id of the SignatureRequest to remove. (required)
     * @param string $contentType          The value for the Content-Type header. Check self::contentTypes['signatureRequestRemove'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestRemove. This method will eventually become unavailable
     */
    public function signatureRequestRemoveAsyncWithHttpInfo(string $signature_request_id, string $contentType = self::contentTypes['signatureRequestRemove'][0])
    {
        $returnType = '';
        $request = $this->signatureRequestRemoveRequest($signature_request_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'signatureRequestRemove'
     *
     * @param string $signature_request_id The id of the SignatureRequest to remove. (required)
     * @param string $contentType          The value for the Content-Type header. Check self::contentTypes['signatureRequestRemove'] to see the possible values for this operation
     *
     * @return Request
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestRemove. This method will eventually become unavailable
     */
    public function signatureRequestRemoveRequest(string $signature_request_id, string $contentType = self::contentTypes['signatureRequestRemove'][0])
    {
        // verify the required parameter 'signature_request_id' is set
        if ($signature_request_id === null || (is_array($signature_request_id) && count($signature_request_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $signature_request_id when calling signatureRequestRemove'
            );
        }

        $resourcePath = '/signature_request/remove/{signature_request_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($signature_request_id !== null) {
            $resourcePath = str_replace(
                '{signature_request_id}',
                ObjectSerializer::toPathValue($signature_request_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            $multipart ? ['multipart/form-data'] : ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name'     => 'body',
                        'contents' => $body,
                        'headers'  => ['Content-Type' => 'application/json'],
                    ];
                }

                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':');
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation signatureRequestSend
     *
     * Send Signature Request
     *
     * @param Model\SignatureRequestSendRequest $signature_request_send_request signature_request_send_request (required)
     *
     * @return Model\SignatureRequestGetResponse
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     */
    public function signatureRequestSend(Model\SignatureRequestSendRequest $signature_request_send_request)
    {
        list($response) = $this->signatureRequestSendWithHttpInfo($signature_request_send_request);
        return $response;
    }

    /**
     * Operation signatureRequestSendWithHttpInfo
     *
     * Send Signature Request
     *
     * @param Model\SignatureRequestSendRequest $signature_request_send_request (required)
     * @param string                            $contentType                    The value for the Content-Type header. Check self::contentTypes['signatureRequestSend'] to see the possible values for this operation
     *
     * @return array of Model\SignatureRequestGetResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestSend. This method will eventually become unavailable
     */
    public function signatureRequestSendWithHttpInfo(Model\SignatureRequestSendRequest $signature_request_send_request, string $contentType = self::contentTypes['signatureRequestSend'][0])
    {
        $request = $this->signatureRequestSendRequest($signature_request_send_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->response = $response;
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            $result = $this->handleRangeCodeResponse(
                $response,
                '4XX',
                '\Dropbox\Sign\Model\ErrorResponse'
            );
            if ($result) {
                return $result;
            }

            switch ($statusCode) {
                case 200:
                    if ('\Dropbox\Sign\Model\SignatureRequestGetResponse' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ('\Dropbox\Sign\Model\SignatureRequestGetResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dropbox\Sign\Model\SignatureRequestGetResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Dropbox\Sign\Model\SignatureRequestGetResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string)$response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            if ($this->handleRangeCodeException($e, '4XX', '\Dropbox\Sign\Model\ErrorResponse')) {
                throw $e;
            }
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dropbox\Sign\Model\SignatureRequestGetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation signatureRequestSendAsync
     *
     * Send Signature Request
     *
     * @param Model\SignatureRequestSendRequest $signature_request_send_request (required)
     * @param string                            $contentType                    The value for the Content-Type header. Check self::contentTypes['signatureRequestSend'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestSend. This method will eventually become unavailable
     */
    public function signatureRequestSendAsync(Model\SignatureRequestSendRequest $signature_request_send_request, string $contentType = self::contentTypes['signatureRequestSend'][0])
    {
        return $this->signatureRequestSendAsyncWithHttpInfo($signature_request_send_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation signatureRequestSendAsyncWithHttpInfo
     *
     * Send Signature Request
     *
     * @param Model\SignatureRequestSendRequest $signature_request_send_request (required)
     * @param string                            $contentType                    The value for the Content-Type header. Check self::contentTypes['signatureRequestSend'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestSend. This method will eventually become unavailable
     */
    public function signatureRequestSendAsyncWithHttpInfo(Model\SignatureRequestSendRequest $signature_request_send_request, string $contentType = self::contentTypes['signatureRequestSend'][0])
    {
        $returnType = '\Dropbox\Sign\Model\SignatureRequestGetResponse';
        $request = $this->signatureRequestSendRequest($signature_request_send_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'signatureRequestSend'
     *
     * @param Model\SignatureRequestSendRequest $signature_request_send_request (required)
     * @param string                            $contentType                    The value for the Content-Type header. Check self::contentTypes['signatureRequestSend'] to see the possible values for this operation
     *
     * @return Request
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestSend. This method will eventually become unavailable
     */
    public function signatureRequestSendRequest(Model\SignatureRequestSendRequest $signature_request_send_request, string $contentType = self::contentTypes['signatureRequestSend'][0])
    {
        // verify the required parameter 'signature_request_send_request' is set
        if ($signature_request_send_request === null || (is_array($signature_request_send_request) && count($signature_request_send_request) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $signature_request_send_request when calling signatureRequestSend'
            );
        }

        $resourcePath = '/signature_request/send';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $formParams = ObjectSerializer::getFormParams(
            $signature_request_send_request
        );

        $multipart = !empty($formParams);

        $headers = $this->headerSelector->selectHeaders(
            $multipart ? ['multipart/form-data'] : ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) === 0) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($signature_request_send_request));
            } else {
                $httpBody = $signature_request_send_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name'     => 'body',
                        'contents' => $body,
                        'headers'  => ['Content-Type' => 'application/json'],
                    ];
                }

                if ($payloadHook = $this->config->getPayloadHook()) {
                    $payloadHook('multipart', $multipartContents, $signature_request_send_request);
                }
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':');
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation signatureRequestSendWithTemplate
     *
     * Send with Template
     *
     * @param Model\SignatureRequestSendWithTemplateRequest $signature_request_send_with_template_request signature_request_send_with_template_request (required)
     *
     * @return Model\SignatureRequestGetResponse
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     */
    public function signatureRequestSendWithTemplate(Model\SignatureRequestSendWithTemplateRequest $signature_request_send_with_template_request)
    {
        list($response) = $this->signatureRequestSendWithTemplateWithHttpInfo($signature_request_send_with_template_request);
        return $response;
    }

    /**
     * Operation signatureRequestSendWithTemplateWithHttpInfo
     *
     * Send with Template
     *
     * @param Model\SignatureRequestSendWithTemplateRequest $signature_request_send_with_template_request (required)
     * @param string                                        $contentType                                  The value for the Content-Type header. Check self::contentTypes['signatureRequestSendWithTemplate'] to see the possible values for this operation
     *
     * @return array of Model\SignatureRequestGetResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestSendWithTemplate. This method will eventually become unavailable
     */
    public function signatureRequestSendWithTemplateWithHttpInfo(Model\SignatureRequestSendWithTemplateRequest $signature_request_send_with_template_request, string $contentType = self::contentTypes['signatureRequestSendWithTemplate'][0])
    {
        $request = $this->signatureRequestSendWithTemplateRequest($signature_request_send_with_template_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->response = $response;
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            $result = $this->handleRangeCodeResponse(
                $response,
                '4XX',
                '\Dropbox\Sign\Model\ErrorResponse'
            );
            if ($result) {
                return $result;
            }

            switch ($statusCode) {
                case 200:
                    if ('\Dropbox\Sign\Model\SignatureRequestGetResponse' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ('\Dropbox\Sign\Model\SignatureRequestGetResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dropbox\Sign\Model\SignatureRequestGetResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Dropbox\Sign\Model\SignatureRequestGetResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string)$response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            if ($this->handleRangeCodeException($e, '4XX', '\Dropbox\Sign\Model\ErrorResponse')) {
                throw $e;
            }
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dropbox\Sign\Model\SignatureRequestGetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation signatureRequestSendWithTemplateAsync
     *
     * Send with Template
     *
     * @param Model\SignatureRequestSendWithTemplateRequest $signature_request_send_with_template_request (required)
     * @param string                                        $contentType                                  The value for the Content-Type header. Check self::contentTypes['signatureRequestSendWithTemplate'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestSendWithTemplate. This method will eventually become unavailable
     */
    public function signatureRequestSendWithTemplateAsync(Model\SignatureRequestSendWithTemplateRequest $signature_request_send_with_template_request, string $contentType = self::contentTypes['signatureRequestSendWithTemplate'][0])
    {
        return $this->signatureRequestSendWithTemplateAsyncWithHttpInfo($signature_request_send_with_template_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation signatureRequestSendWithTemplateAsyncWithHttpInfo
     *
     * Send with Template
     *
     * @param Model\SignatureRequestSendWithTemplateRequest $signature_request_send_with_template_request (required)
     * @param string                                        $contentType                                  The value for the Content-Type header. Check self::contentTypes['signatureRequestSendWithTemplate'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestSendWithTemplate. This method will eventually become unavailable
     */
    public function signatureRequestSendWithTemplateAsyncWithHttpInfo(Model\SignatureRequestSendWithTemplateRequest $signature_request_send_with_template_request, string $contentType = self::contentTypes['signatureRequestSendWithTemplate'][0])
    {
        $returnType = '\Dropbox\Sign\Model\SignatureRequestGetResponse';
        $request = $this->signatureRequestSendWithTemplateRequest($signature_request_send_with_template_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'signatureRequestSendWithTemplate'
     *
     * @param Model\SignatureRequestSendWithTemplateRequest $signature_request_send_with_template_request (required)
     * @param string                                        $contentType                                  The value for the Content-Type header. Check self::contentTypes['signatureRequestSendWithTemplate'] to see the possible values for this operation
     *
     * @return Request
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestSendWithTemplate. This method will eventually become unavailable
     */
    public function signatureRequestSendWithTemplateRequest(Model\SignatureRequestSendWithTemplateRequest $signature_request_send_with_template_request, string $contentType = self::contentTypes['signatureRequestSendWithTemplate'][0])
    {
        // verify the required parameter 'signature_request_send_with_template_request' is set
        if ($signature_request_send_with_template_request === null || (is_array($signature_request_send_with_template_request) && count($signature_request_send_with_template_request) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $signature_request_send_with_template_request when calling signatureRequestSendWithTemplate'
            );
        }

        $resourcePath = '/signature_request/send_with_template';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $formParams = ObjectSerializer::getFormParams(
            $signature_request_send_with_template_request
        );

        $multipart = !empty($formParams);

        $headers = $this->headerSelector->selectHeaders(
            $multipart ? ['multipart/form-data'] : ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) === 0) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($signature_request_send_with_template_request));
            } else {
                $httpBody = $signature_request_send_with_template_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name'     => 'body',
                        'contents' => $body,
                        'headers'  => ['Content-Type' => 'application/json'],
                    ];
                }

                if ($payloadHook = $this->config->getPayloadHook()) {
                    $payloadHook('multipart', $multipartContents, $signature_request_send_with_template_request);
                }
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':');
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation signatureRequestUpdate
     *
     * Update Signature Request
     *
     * @param string                              $signature_request_id             The id of the SignatureRequest to update. (required)
     * @param Model\SignatureRequestUpdateRequest $signature_request_update_request signature_request_update_request (required)
     *
     * @return Model\SignatureRequestGetResponse
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     */
    public function signatureRequestUpdate(string $signature_request_id, Model\SignatureRequestUpdateRequest $signature_request_update_request)
    {
        list($response) = $this->signatureRequestUpdateWithHttpInfo($signature_request_id, $signature_request_update_request);
        return $response;
    }

    /**
     * Operation signatureRequestUpdateWithHttpInfo
     *
     * Update Signature Request
     *
     * @param string                              $signature_request_id             The id of the SignatureRequest to update. (required)
     * @param Model\SignatureRequestUpdateRequest $signature_request_update_request (required)
     * @param string                              $contentType                      The value for the Content-Type header. Check self::contentTypes['signatureRequestUpdate'] to see the possible values for this operation
     *
     * @return array of Model\SignatureRequestGetResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestUpdate. This method will eventually become unavailable
     */
    public function signatureRequestUpdateWithHttpInfo(string $signature_request_id, Model\SignatureRequestUpdateRequest $signature_request_update_request, string $contentType = self::contentTypes['signatureRequestUpdate'][0])
    {
        $request = $this->signatureRequestUpdateRequest($signature_request_id, $signature_request_update_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->response = $response;
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            $result = $this->handleRangeCodeResponse(
                $response,
                '4XX',
                '\Dropbox\Sign\Model\ErrorResponse'
            );
            if ($result) {
                return $result;
            }

            switch ($statusCode) {
                case 200:
                    if ('\Dropbox\Sign\Model\SignatureRequestGetResponse' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ('\Dropbox\Sign\Model\SignatureRequestGetResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dropbox\Sign\Model\SignatureRequestGetResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Dropbox\Sign\Model\SignatureRequestGetResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string)$response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            if ($this->handleRangeCodeException($e, '4XX', '\Dropbox\Sign\Model\ErrorResponse')) {
                throw $e;
            }
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dropbox\Sign\Model\SignatureRequestGetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation signatureRequestUpdateAsync
     *
     * Update Signature Request
     *
     * @param string                              $signature_request_id             The id of the SignatureRequest to update. (required)
     * @param Model\SignatureRequestUpdateRequest $signature_request_update_request (required)
     * @param string                              $contentType                      The value for the Content-Type header. Check self::contentTypes['signatureRequestUpdate'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestUpdate. This method will eventually become unavailable
     */
    public function signatureRequestUpdateAsync(string $signature_request_id, Model\SignatureRequestUpdateRequest $signature_request_update_request, string $contentType = self::contentTypes['signatureRequestUpdate'][0])
    {
        return $this->signatureRequestUpdateAsyncWithHttpInfo($signature_request_id, $signature_request_update_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation signatureRequestUpdateAsyncWithHttpInfo
     *
     * Update Signature Request
     *
     * @param string                              $signature_request_id             The id of the SignatureRequest to update. (required)
     * @param Model\SignatureRequestUpdateRequest $signature_request_update_request (required)
     * @param string                              $contentType                      The value for the Content-Type header. Check self::contentTypes['signatureRequestUpdate'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestUpdate. This method will eventually become unavailable
     */
    public function signatureRequestUpdateAsyncWithHttpInfo(string $signature_request_id, Model\SignatureRequestUpdateRequest $signature_request_update_request, string $contentType = self::contentTypes['signatureRequestUpdate'][0])
    {
        $returnType = '\Dropbox\Sign\Model\SignatureRequestGetResponse';
        $request = $this->signatureRequestUpdateRequest($signature_request_id, $signature_request_update_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'signatureRequestUpdate'
     *
     * @param string                              $signature_request_id             The id of the SignatureRequest to update. (required)
     * @param Model\SignatureRequestUpdateRequest $signature_request_update_request (required)
     * @param string                              $contentType                      The value for the Content-Type header. Check self::contentTypes['signatureRequestUpdate'] to see the possible values for this operation
     *
     * @return Request
     * @throws InvalidArgumentException
     * @deprecated Prefer to use ::signatureRequestUpdate. This method will eventually become unavailable
     */
    public function signatureRequestUpdateRequest(string $signature_request_id, Model\SignatureRequestUpdateRequest $signature_request_update_request, string $contentType = self::contentTypes['signatureRequestUpdate'][0])
    {
        // verify the required parameter 'signature_request_id' is set
        if ($signature_request_id === null || (is_array($signature_request_id) && count($signature_request_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $signature_request_id when calling signatureRequestUpdate'
            );
        }

        // verify the required parameter 'signature_request_update_request' is set
        if ($signature_request_update_request === null || (is_array($signature_request_update_request) && count($signature_request_update_request) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $signature_request_update_request when calling signatureRequestUpdate'
            );
        }

        $resourcePath = '/signature_request/update/{signature_request_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $formParams = ObjectSerializer::getFormParams(
            $signature_request_update_request
        );

        $multipart = !empty($formParams);

        // path params
        if ($signature_request_id !== null) {
            $resourcePath = str_replace(
                '{signature_request_id}',
                ObjectSerializer::toPathValue($signature_request_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            $multipart ? ['multipart/form-data'] : ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) === 0) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($signature_request_update_request));
            } else {
                $httpBody = $signature_request_update_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name'     => 'body',
                        'contents' => $body,
                        'headers'  => ['Content-Type' => 'application/json'],
                    ];
                }

                if ($payloadHook = $this->config->getPayloadHook()) {
                    $payloadHook('multipart', $multipartContents, $signature_request_update_request);
                }
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':');
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @return array of http client options
     * @throws RuntimeException on file opening failure
     */
    protected function createHttpClientOption()
    {
        $options = $this->config->getOptions();
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * @return object|array|null
     */
    private function handleRangeCodeResponse(
        ResponseInterface $response,
        string $rangeCode,
        string $returnDataType
    ) {
        $statusCode = $response->getStatusCode();
        $rangeCodeLeft = (int)(substr($rangeCode, 0, 1) . '00');
        $rangeCodeRight = (int)(substr($rangeCode, 0, 1) . '99');

        if (
            $statusCode < $rangeCodeLeft
            || $statusCode > $rangeCodeRight
        ) {
            return null;
        }

        if ($returnDataType === '\SplFileObject') {
            $content = $response->getBody(); // stream goes to serializer
        } else {
            $content = (string)$response->getBody();
        }

        return [
            ObjectSerializer::deserialize($content, $returnDataType, []),
            $statusCode,
            $response->getHeaders(),
        ];
    }

    /**
     * @return object|array|null
     */
    private function handleRangeCodeException(
        ApiException $e,
        string $rangeCode,
        string $exceptionDataType
    ): bool {
        $statusCode = $e->getCode();
        $rangeCodeLeft = (int)(substr($rangeCode, 0, 1) . '00');
        $rangeCodeRight = (int)(substr($rangeCode, 0, 1) . '99');

        if (
            $statusCode < $rangeCodeLeft
            || $statusCode > $rangeCodeRight
        ) {
            return false;
        }

        $data = ObjectSerializer::deserialize(
            $e->getResponseBody(),
            $exceptionDataType,
            $e->getResponseHeaders()
        );

        $e->setResponseObject($data);

        return true;
    }
}
