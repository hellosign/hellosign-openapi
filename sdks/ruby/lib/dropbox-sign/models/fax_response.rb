=begin
#Dropbox Sign API

#Dropbox Sign v3 API

The version of the OpenAPI document: 3.0.0
Contact: apisupport@hellosign.com
Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Dropbox
end

module Dropbox::Sign
  class FaxResponse
    # Fax ID
    # @return [String]
    attr_accessor :fax_id

    # Fax Title
    # @return [String]
    attr_accessor :title

    # Fax Original Title
    # @return [String]
    attr_accessor :original_title

    # Fax Metadata
    # @return [Hash<String, Object>]
    attr_accessor :metadata

    # Fax Created At Timestamp
    # @return [Integer]
    attr_accessor :created_at

    # Fax Sender Email
    # @return [String]
    attr_accessor :sender

    # Fax Files URL
    # @return [String]
    attr_accessor :files_url

    # Fax Transmissions List
    # @return [Array<FaxResponseTransmission>]
    attr_accessor :transmissions

    # Fax Subject
    # @return [String, nil]
    attr_accessor :subject

    # Fax Message
    # @return [String, nil]
    attr_accessor :message

    # The path where the completed document can be downloaded
    # @return [String, nil]
    attr_accessor :final_copy_uri

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'fax_id' => :'fax_id',
        :'title' => :'title',
        :'original_title' => :'original_title',
        :'metadata' => :'metadata',
        :'created_at' => :'created_at',
        :'sender' => :'sender',
        :'files_url' => :'files_url',
        :'transmissions' => :'transmissions',
        :'subject' => :'subject',
        :'message' => :'message',
        :'final_copy_uri' => :'final_copy_uri'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'fax_id' => :'String',
        :'title' => :'String',
        :'original_title' => :'String',
        :'metadata' => :'Hash<String, Object>',
        :'created_at' => :'Integer',
        :'sender' => :'String',
        :'files_url' => :'String',
        :'transmissions' => :'Array<FaxResponseTransmission>',
        :'subject' => :'String',
        :'message' => :'String',
        :'final_copy_uri' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'subject',
        :'message',
        :'final_copy_uri'
      ])
    end

    # Returns attribute map of this model + parent
    def self.merged_attributes
      self.attribute_map
    end

    # Attribute type mapping of this model + parent
    def self.merged_types
      self.openapi_types
    end

    # Returns list of attributes with nullable: true of this model + parent
    def self.merged_nullable
      self.openapi_nullable
    end

    # Attempt to instantiate and hydrate a new instance of this class
    # @param [Object] data Data to be converted
    # @return [FaxResponse]
    def self.init(data)
      ApiClient.default.convert_to_type(
        data,
        "FaxResponse"
      ) || FaxResponse.new
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Dropbox::Sign::FaxResponse` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.merged_attributes.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Dropbox::Sign::FaxResponse`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'fax_id')
        self.fax_id = attributes[:'fax_id']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'original_title')
        self.original_title = attributes[:'original_title']
      end

      if attributes.key?(:'metadata')
        if (value = attributes[:'metadata']).is_a?(Hash)
          self.metadata = value
        end
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'sender')
        self.sender = attributes[:'sender']
      end

      if attributes.key?(:'files_url')
        self.files_url = attributes[:'files_url']
      end

      if attributes.key?(:'transmissions')
        if (value = attributes[:'transmissions']).is_a?(Array)
          self.transmissions = value
        end
      end

      if attributes.key?(:'subject')
        self.subject = attributes[:'subject']
      end

      if attributes.key?(:'message')
        self.message = attributes[:'message']
      end

      if attributes.key?(:'final_copy_uri')
        self.final_copy_uri = attributes[:'final_copy_uri']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @fax_id.nil?
        invalid_properties.push('invalid value for "fax_id", fax_id cannot be nil.')
      end

      if @title.nil?
        invalid_properties.push('invalid value for "title", title cannot be nil.')
      end

      if @original_title.nil?
        invalid_properties.push('invalid value for "original_title", original_title cannot be nil.')
      end

      if @metadata.nil?
        invalid_properties.push('invalid value for "metadata", metadata cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @sender.nil?
        invalid_properties.push('invalid value for "sender", sender cannot be nil.')
      end

      if @files_url.nil?
        invalid_properties.push('invalid value for "files_url", files_url cannot be nil.')
      end

      if @transmissions.nil?
        invalid_properties.push('invalid value for "transmissions", transmissions cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @fax_id.nil?
      return false if @title.nil?
      return false if @original_title.nil?
      return false if @metadata.nil?
      return false if @created_at.nil?
      return false if @sender.nil?
      return false if @files_url.nil?
      return false if @transmissions.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] fax_id Value to be assigned
    def fax_id=(fax_id)
      if fax_id.nil?
        fail ArgumentError, 'fax_id cannot be nil'
      end

      @fax_id = fax_id
    end

    # Custom attribute writer method with validation
    # @param [Object] title Value to be assigned
    def title=(title)
      if title.nil?
        fail ArgumentError, 'title cannot be nil'
      end

      @title = title
    end

    # Custom attribute writer method with validation
    # @param [Object] original_title Value to be assigned
    def original_title=(original_title)
      if original_title.nil?
        fail ArgumentError, 'original_title cannot be nil'
      end

      @original_title = original_title
    end

    # Custom attribute writer method with validation
    # @param [Object] metadata Value to be assigned
    def metadata=(metadata)
      if metadata.nil?
        fail ArgumentError, 'metadata cannot be nil'
      end

      @metadata = metadata
    end

    # Custom attribute writer method with validation
    # @param [Object] created_at Value to be assigned
    def created_at=(created_at)
      if created_at.nil?
        fail ArgumentError, 'created_at cannot be nil'
      end

      @created_at = created_at
    end

    # Custom attribute writer method with validation
    # @param [Object] sender Value to be assigned
    def sender=(sender)
      if sender.nil?
        fail ArgumentError, 'sender cannot be nil'
      end

      @sender = sender
    end

    # Custom attribute writer method with validation
    # @param [Object] files_url Value to be assigned
    def files_url=(files_url)
      if files_url.nil?
        fail ArgumentError, 'files_url cannot be nil'
      end

      @files_url = files_url
    end

    # Custom attribute writer method with validation
    # @param [Object] transmissions Value to be assigned
    def transmissions=(transmissions)
      if transmissions.nil?
        fail ArgumentError, 'transmissions cannot be nil'
      end

      @transmissions = transmissions
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          fax_id == o.fax_id &&
          title == o.title &&
          original_title == o.original_title &&
          metadata == o.metadata &&
          created_at == o.created_at &&
          sender == o.sender &&
          files_url == o.files_url &&
          transmissions == o.transmissions &&
          subject == o.subject &&
          message == o.message &&
          final_copy_uri == o.final_copy_uri
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [fax_id, title, original_title, metadata, created_at, sender, files_url, transmissions, subject, message, final_copy_uri].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attribute_map = self.class.merged_attributes

      self.class.merged_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        klass = Dropbox::Sign.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash(include_nil = true)
      hash = {}
      self.class.merged_attributes.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          next unless include_nil
          is_nullable = self.class.merged_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value, include_nil)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value, include_nil = true)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v, include_nil) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v, include_nil) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash(include_nil)
      else
        value
      end
    end
  end
end
