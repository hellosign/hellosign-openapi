=begin
#Dropbox Sign API

#Dropbox Sign v3 API

The version of the OpenAPI document: 3.0.0
Contact: apisupport@hellosign.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.0

=end

require 'spec_helper'
require 'json_spec'
require_relative '../test_utils'

root_file_path = __dir__ + "/../../test_fixtures"

describe Dropbox::Sign::SignatureRequestApi do
  context 'SignatureRequestApiTest' do
    api = Dropbox::Sign::SignatureRequestApi.new

    it 'testSignatureRequestBulkCreateEmbeddedWithTemplate' do
      request_class = 'SignatureRequestBulkCreateEmbeddedWithTemplateRequest'
      request_data = get_fixture_data(request_class)[:default]

      response_class = 'BulkSendJobSendResponse'
      response_data = get_fixture_data(response_class)[:default]

      set_expected_response(200, JSON.dump(response_data))
      expected = Dropbox::Sign::BulkSendJobSendResponse.init(response_data)
      obj = Dropbox::Sign::SignatureRequestBulkCreateEmbeddedWithTemplateRequest.init(request_data)
      obj.signer_file = File.new("#{root_file_path}/bulk-send-sample.csv", "r")

      result = api.signature_request_bulk_create_embedded_with_template(obj)

      expect(result.class.to_s).to eq("Dropbox::Sign::#{response_class}")
      expect(result.to_json).to be_json_eql(JSON.dump(expected))
    end

    it 'testSignatureRequestBulkSendWithTemplate' do
      request_class = 'SignatureRequestBulkSendWithTemplateRequest'
      request_data = get_fixture_data(request_class)[:default]

      response_class = 'BulkSendJobSendResponse'
      response_data = get_fixture_data(response_class)[:default]

      set_expected_response(200, JSON.dump(response_data))
      expected = Dropbox::Sign::BulkSendJobSendResponse.init(response_data)
      obj = Dropbox::Sign::SignatureRequestBulkSendWithTemplateRequest.init(request_data)
      obj.signer_file = File.new("#{root_file_path}/bulk-send-sample.csv", "r")

      result = api.signature_request_bulk_send_with_template(obj)

      expect(result.class.to_s).to eq("Dropbox::Sign::#{response_class}")
      expect(result.to_json).to be_json_eql(JSON.dump(expected))
    end

    skip 'testSignatureRequestCancel' do
    end

    it 'testSignatureRequestCreateEmbedded' do
      request_class = 'SignatureRequestCreateEmbeddedRequest'
      request_data = get_fixture_data(request_class)[:default]

      response_class = 'SignatureRequestGetResponse'
      response_data = get_fixture_data(response_class)[:default]

      set_expected_response(200, JSON.dump(response_data))
      expected = Dropbox::Sign::SignatureRequestGetResponse.init(response_data)
      obj = Dropbox::Sign::SignatureRequestCreateEmbeddedRequest.init(request_data)
      obj.files = [File.new("#{root_file_path}/pdf-sample.pdf", "r")]

      result = api.signature_request_create_embedded(obj)

      expect(result.class.to_s).to eq("Dropbox::Sign::#{response_class}")
      expect(result.to_json).to be_json_eql(JSON.dump(expected))
    end

    it 'testSignatureRequestCreateEmbeddedWithTemplate' do
      request_class = 'SignatureRequestCreateEmbeddedWithTemplateRequest'
      request_data = get_fixture_data(request_class)[:default]

      response_class = 'SignatureRequestGetResponse'
      response_data = get_fixture_data(response_class)[:default]

      set_expected_response(200, JSON.dump(response_data))
      expected = Dropbox::Sign::SignatureRequestGetResponse.init(response_data)
      obj = Dropbox::Sign::SignatureRequestCreateEmbeddedWithTemplateRequest.init(request_data)
      obj.files = [File.new("#{root_file_path}/pdf-sample.pdf", "r")]

      result = api.signature_request_create_embedded_with_template(obj)

      expect(result.class.to_s).to eq("Dropbox::Sign::#{response_class}")
      expect(result.to_json).to be_json_eql(JSON.dump(expected))
    end

    it 'testSignatureRequestFiles' do
      signature_request_id = 'fa5c8a0b0f492d768749333ad6fcc214c111e967'

      response_class = 'FileResponse'
      response_data = get_fixture_data(response_class)[:default]

      set_expected_response(200, JSON.dump(response_data))
      expected = Dropbox::Sign::FileResponse.init(response_data)

      result = api.signature_request_files_as_file_url(signature_request_id,{})

      expect(result.class.to_s).to eq("Dropbox::Sign::#{response_class}")
      expect(result.to_json).to be_json_eql(JSON.dump(expected))
    end

    it 'testSignatureRequestGet' do
      signature_request_id = 'fa5c8a0b0f492d768749333ad6fcc214c111e967'

      response_class = 'SignatureRequestGetResponse'
      response_data = get_fixture_data(response_class)[:default]

      set_expected_response(200, JSON.dump(response_data))
      expected = Dropbox::Sign::SignatureRequestGetResponse.init(response_data)

      result = api.signature_request_get(signature_request_id)

      expect(result.class.to_s).to eq("Dropbox::Sign::#{response_class}")
      expect(result.to_json).to be_json_eql(JSON.dump(expected))
    end

    it 'testSignatureRequestList' do
      account_id = 'all'

      response_class = 'SignatureRequestListResponse'
      response_data = get_fixture_data(response_class)[:default]

      set_expected_response(200, JSON.dump(response_data))
      expected = Dropbox::Sign::SignatureRequestListResponse.init(response_data)

      result = api.signature_request_list({:account_id => account_id})

      expect(result.class.to_s).to eq("Dropbox::Sign::#{response_class}")
      expect(result.to_json).to be_json_eql(JSON.dump(expected))
    end

    it 'testSignatureRequestReleaseHold' do
      signature_request_list = 'fa5c8a0b0f492d768749333ad6fcc214c111e967'

      response_class = 'SignatureRequestGetResponse'
      response_data = get_fixture_data(response_class)[:default]

      set_expected_response(200, JSON.dump(response_data))
      expected = Dropbox::Sign::SignatureRequestGetResponse.init(response_data)

      result = api.signature_request_release_hold(signature_request_list)

      expect(result.class.to_s).to eq("Dropbox::Sign::#{response_class}")
      expect(result.to_json).to be_json_eql(JSON.dump(expected))
    end

    it 'testSignatureRequestRemind' do
      signature_request_list = 'fa5c8a0b0f492d768749333ad6fcc214c111e967'

      request_class = 'SignatureRequestRemindRequest'
      request_data = get_fixture_data(request_class)[:default]

      response_class = 'SignatureRequestGetResponse'
      response_data = get_fixture_data(response_class)[:default]

      set_expected_response(200, JSON.dump(response_data))
      expected = Dropbox::Sign::SignatureRequestGetResponse.init(response_data)
      obj = Dropbox::Sign::SignatureRequestRemindRequest.init(request_data)

      result = api.signature_request_remind(signature_request_list, obj)

      expect(result.class.to_s).to eq("Dropbox::Sign::#{response_class}")
      expect(result.to_json).to be_json_eql(JSON.dump(expected))
    end

    skip 'testSignatureRequestRemove' do
    end

    it 'testSignatureRequestSendRequest' do
      request_class = 'SignatureRequestSendRequest'
      request_data = get_fixture_data(request_class)[:default]

      response_class = 'SignatureRequestGetResponse'
      response_data = get_fixture_data(response_class)[:default]

      set_expected_response(200, JSON.dump(response_data))
      expected = Dropbox::Sign::SignatureRequestGetResponse.init(response_data)
      obj = Dropbox::Sign::SignatureRequestSendRequest.init(request_data)
      obj.files = [File.new("#{root_file_path}/pdf-sample.pdf", "r")]

      result = api.signature_request_send(obj)

      expect(result.class.to_s).to eq("Dropbox::Sign::#{response_class}")
      expect(result.to_json).to be_json_eql(JSON.dump(expected))
    end

    it 'testFileForcesMultipartFormData' do
      request_class = 'SignatureRequestSendRequest'
      request_data = get_fixture_data(request_class)[:default]

      obj = Dropbox::Sign::SignatureRequestSendRequest.init(request_data)
      obj.files = [File.new("#{root_file_path}/pdf-sample.pdf", "r")]

      result = Dropbox::Sign::ApiClient.default.generate_form_data(
        obj,
        Dropbox::Sign::SignatureRequestSendRequest.openapi_types,
      )

      expect(result[:has_file]).to eq(true)
    end

    it 'testNoFileForcesApplicationJson' do
      request_class = 'SignatureRequestSendRequest'
      request_data = get_fixture_data(request_class)[:default]

      obj = Dropbox::Sign::SignatureRequestSendRequest.init(request_data)

      result = Dropbox::Sign::ApiClient.default.generate_form_data(
        obj,
        Dropbox::Sign::SignatureRequestSendRequest.openapi_types,
      )

      expect(result[:has_file]).to eq(false)
    end

    it 'testSignatureRequestSendWithTemplate' do
      request_class = 'SignatureRequestSendWithTemplateRequest'
      request_data = get_fixture_data(request_class)[:default]

      response_class = 'SignatureRequestGetResponse'
      response_data = get_fixture_data(response_class)[:default]

      set_expected_response(200, JSON.dump(response_data))
      expected = Dropbox::Sign::SignatureRequestGetResponse.init(response_data)
      obj = Dropbox::Sign::SignatureRequestSendWithTemplateRequest.init(request_data)

      result = api.signature_request_send_with_template(obj)

      expect(result.class.to_s).to eq("Dropbox::Sign::#{response_class}")
      expect(result.to_json).to be_json_eql(JSON.dump(expected))
    end

    it 'testSignatureRequestUpdate' do
      signature_request_id = 'fa5c8a0b0f492d768749333ad6fcc214c111e967'

      request_class = 'SignatureRequestUpdateRequest'
      request_data = get_fixture_data(request_class)[:default]

      response_class = 'SignatureRequestGetResponse'
      response_data = get_fixture_data(response_class)[:default]

      set_expected_response(200, JSON.dump(response_data))
      expected = Dropbox::Sign::SignatureRequestGetResponse.init(response_data)
      obj = Dropbox::Sign::SignatureRequestUpdateRequest.init(request_data)

      result = api.signature_request_update(signature_request_id, obj)

      expect(result.class.to_s).to eq("Dropbox::Sign::#{response_class}")
      expect(result.to_json).to be_json_eql(JSON.dump(expected))
    end
  end
end
