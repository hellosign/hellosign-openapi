# coding: utf-8

"""
    Dropbox Sign API

    Dropbox Sign v3 API

    The version of the OpenAPI document: 3.0.0
    Contact: apisupport@hellosign.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from dropbox_sign.models.account_response import AccountResponse
from dropbox_sign.models.event_callback_request_event import EventCallbackRequestEvent
from dropbox_sign.models.signature_request_response import SignatureRequestResponse
from dropbox_sign.models.template_response import TemplateResponse
from typing import Optional, Set, Tuple
from typing_extensions import Self
import io
from pydantic import StrictBool
from typing import Union


class EventCallbackRequest(BaseModel):
    """
    EventCallbackRequest
    """  # noqa: E501

    event: EventCallbackRequestEvent
    account: Optional[AccountResponse] = None
    signature_request: Optional[SignatureRequestResponse] = None
    template: Optional[TemplateResponse] = None
    __properties: ClassVar[List[str]] = [
        "event",
        "account",
        "signature_request",
        "template",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
        arbitrary_types_allowed=True,
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_json_form_params(
        self, excluded_fields: Set[str] = None
    ) -> List[Tuple[str, str]]:
        data: List[Tuple[str, str]] = []

        for key, value in self.to_dict(excluded_fields).items():
            if isinstance(value, (int, str, bool)):
                data.append((key, value))
            else:
                data.append((key, json.dumps(value, ensure_ascii=False)))

        return data

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventCallbackRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self, excluded_fields: Set[str] = None) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of event
        if self.event:
            _dict["event"] = self.event.to_dict()
        # override the default output from pydantic by calling `to_dict()` of account
        if self.account:
            _dict["account"] = self.account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of signature_request
        if self.signature_request:
            _dict["signature_request"] = self.signature_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of template
        if self.template:
            _dict["template"] = self.template.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventCallbackRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "event": (
                    EventCallbackRequestEvent.from_dict(obj["event"])
                    if obj.get("event") is not None
                    else None
                ),
                "account": (
                    AccountResponse.from_dict(obj["account"])
                    if obj.get("account") is not None
                    else None
                ),
                "signature_request": (
                    SignatureRequestResponse.from_dict(obj["signature_request"])
                    if obj.get("signature_request") is not None
                    else None
                ),
                "template": (
                    TemplateResponse.from_dict(obj["template"])
                    if obj.get("template") is not None
                    else None
                ),
            }
        )
        return _obj

    @classmethod
    def init(cls, data: Any) -> Self:
        """
        Attempt to instantiate and hydrate a new instance of this class
        """
        if isinstance(data, str):
            data = json.loads(data)

        return cls.from_dict(data)

    @classmethod
    def openapi_types(cls) -> Dict[str, str]:
        return {
            "event": "(EventCallbackRequestEvent,)",
            "account": "(AccountResponse,)",
            "signature_request": "(SignatureRequestResponse,)",
            "template": "(TemplateResponse,)",
        }

    @classmethod
    def openapi_type_is_array(cls, property_name: str) -> bool:
        return property_name in []
