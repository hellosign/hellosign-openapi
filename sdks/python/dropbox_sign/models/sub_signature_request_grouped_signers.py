# coding: utf-8

"""
    Dropbox Sign API

    Dropbox Sign v3 API

    The version of the OpenAPI document: 3.0.0
    Contact: apisupport@hellosign.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dropbox_sign.models.sub_signature_request_signer import SubSignatureRequestSigner
from typing import Optional, Set, Tuple
from typing_extensions import Self
import io

class SubSignatureRequestGroupedSigners(BaseModel):
    """
    SubSignatureRequestGroupedSigners
    """ # noqa: E501
    group: StrictStr = Field(description="The name of the group.")
    signers: List[SubSignatureRequestSigner] = Field(description="Signers belonging to this Group.  **NOTE:** Only `name`, `email_address`, and `pin` are available to Grouped Signers. We will ignore all other properties, even though they are listed below.")
    order: Optional[StrictInt] = Field(default=None, description="The order the group is required to sign in. Use this instead of Signer-level `order`.")
    __properties: ClassVar[List[str]] = ["group", "signers", "order"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self, excluded_fields: Set[str] = None) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict(excluded_fields))

    def to_json_form_params(self, excluded_fields: Set[str] = None) -> List[Tuple[str, str]]:
        data: List[Tuple[str, str]] = []

        for key, value in self.to_dict(excluded_fields).items():
            data.append((key, json.dumps(value)))

        return data

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubSignatureRequestGroupedSigners from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self, excluded_fields: Set[str] = None) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in signers (list)
        _items = []
        if self.signers:
            for _item_signers in self.signers:
                if _item_signers:
                    _items.append(_item_signers.to_dict())
            _dict['signers'] = _items
        # set to None if order (nullable) is None
        # and model_fields_set contains the field
        if self.order is None and "order" in self.model_fields_set:
            _dict['order'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubSignatureRequestGroupedSigners from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "group": obj.get("group"),
            "signers": [SubSignatureRequestSigner.from_dict(_item) for _item in obj["signers"]] if obj.get("signers") is not None else None,
            "order": obj.get("order")
        })
        return _obj

    @classmethod
    def init(cls, data: Optional[Dict[str, Any]]) -> Self:
        """
        Attempt to instantiate and hydrate a new instance of this class
        """
        return cls.from_dict(data)

    @classmethod
    def openapi_types(cls) -> Dict[StrictStr, StrictStr]:
        return {
            "group": "(str,)",
            "signers": "(List[SubSignatureRequestSigner],)",
            "order": "(int,)",
        }

    @classmethod
    def openapi_type_is_array(cls, property_name: StrictStr) -> StrictBool:
        return property_name in [
            "signers",
        ]

    model_config = {
        "arbitrary_types_allowed": True
    }

