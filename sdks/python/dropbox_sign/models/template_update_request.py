# coding: utf-8

"""
Dropbox Sign API

Dropbox Sign v3 API

The version of the OpenAPI document: 3.0.0
Contact: apisupport@hellosign.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from dropbox_sign.models.sub_signer_experience import SubSignerExperience
from dropbox_sign.models.sub_update_form_field import SubUpdateFormField
from typing import Optional, Set
from typing_extensions import Self
from typing import Tuple, Union
import io
from pydantic import StrictBool


class TemplateUpdateRequest(BaseModel):
    """
    TemplateUpdateRequest
    """  # noqa: E501

    cc_roles: Optional[List[StrictStr]] = Field(
        default=None,
        description="The CC roles that must be assigned when using the template to send a signature request.",
    )
    title: Optional[StrictStr] = Field(
        default=None,
        description="The title you want to assign to the SignatureRequest.",
    )
    subject: Optional[Annotated[str, Field(strict=True, max_length=200)]] = Field(
        default=None, description="The new default template email subject."
    )
    message: Optional[Annotated[str, Field(strict=True, max_length=5000)]] = Field(
        default=None, description="The new default template email message."
    )
    form_fields: Optional[List[SubUpdateFormField]] = Field(
        default=None,
        description="A list of document form fields to update. The endpoint will not create or remove any fields. Every field must be identified by `api_id`, and the only supported change is renaming the field.",
    )
    signer_experience: Optional[SubSignerExperience] = None
    __properties: ClassVar[List[str]] = [
        "cc_roles",
        "title",
        "subject",
        "message",
        "form_fields",
        "signer_experience",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
        arbitrary_types_allowed=True,
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_json_form_params(
        self, excluded_fields: Set[str] = None
    ) -> List[Tuple[str, str]]:
        data: List[Tuple[str, str]] = []

        for key, value in self.to_dict(excluded_fields).items():
            if isinstance(value, (int, str, bool)):
                data.append((key, value))
            else:
                data.append((key, json.dumps(value, ensure_ascii=False)))

        return data

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TemplateUpdateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self, excluded_fields: Set[str] = None) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in form_fields (list)
        _items = []
        if self.form_fields:
            for _item_form_fields in self.form_fields:
                if _item_form_fields:
                    _items.append(_item_form_fields.to_dict())
            _dict["form_fields"] = _items
        # override the default output from pydantic by calling `to_dict()` of signer_experience
        if self.signer_experience:
            _dict["signer_experience"] = self.signer_experience.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TemplateUpdateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "cc_roles": obj.get("cc_roles"),
                "title": obj.get("title"),
                "subject": obj.get("subject"),
                "message": obj.get("message"),
                "form_fields": (
                    [
                        SubUpdateFormField.from_dict(_item)
                        for _item in obj["form_fields"]
                    ]
                    if obj.get("form_fields") is not None
                    else None
                ),
                "signer_experience": (
                    SubSignerExperience.from_dict(obj["signer_experience"])
                    if obj.get("signer_experience") is not None
                    else None
                ),
            }
        )
        return _obj

    @classmethod
    def init(cls, data: Any) -> Self:
        """
        Attempt to instantiate and hydrate a new instance of this class
        """
        if isinstance(data, str):
            data = json.loads(data)

        return cls.from_dict(data)

    @classmethod
    def openapi_types(cls) -> Dict[str, str]:
        return {
            "cc_roles": "(List[str],)",
            "title": "(str,)",
            "subject": "(str,)",
            "message": "(str,)",
            "form_fields": "(List[SubUpdateFormField],)",
            "signer_experience": "(SubSignerExperience,)",
        }

    @classmethod
    def openapi_type_is_array(cls, property_name: str) -> bool:
        return property_name in [
            "cc_roles",
            "form_fields",
        ]
