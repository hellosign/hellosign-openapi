# coding: utf-8

"""
    Dropbox Sign API

    Dropbox Sign v3 API

    The version of the OpenAPI document: 3.0.0
    Contact: apisupport@hellosign.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set, Tuple
from typing_extensions import Self
import io

class AccountResponseQuotas(BaseModel):
    """
    Details concerning remaining monthly quotas.
    """ # noqa: E501
    api_signature_requests_left: Optional[StrictInt] = Field(default=None, description="API signature requests remaining.")
    documents_left: Optional[StrictInt] = Field(default=None, description="Signature requests remaining.")
    templates_total: Optional[StrictInt] = Field(default=None, description="Total API templates allowed.")
    templates_left: Optional[StrictInt] = Field(default=None, description="API templates remaining.")
    sms_verifications_left: Optional[StrictInt] = Field(default=None, description="SMS verifications  remaining.")
    num_fax_pages_left: Optional[StrictInt] = Field(default=None, description="Number of fax pages left")
    __properties: ClassVar[List[str]] = ["api_signature_requests_left", "documents_left", "templates_total", "templates_left", "sms_verifications_left", "num_fax_pages_left"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self, excluded_fields: Set[str] = None) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict(excluded_fields))

    def to_json_form_params(self, excluded_fields: Set[str] = None) -> List[Tuple[str, str]]:
        data: List[Tuple[str, str]] = []

        for key, value in self.to_dict(excluded_fields).items():
            data.append((key, json.dumps(value)))

        return data

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountResponseQuotas from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self, excluded_fields: Set[str] = None) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if api_signature_requests_left (nullable) is None
        # and model_fields_set contains the field
        if self.api_signature_requests_left is None and "api_signature_requests_left" in self.model_fields_set:
            _dict['api_signature_requests_left'] = None

        # set to None if documents_left (nullable) is None
        # and model_fields_set contains the field
        if self.documents_left is None and "documents_left" in self.model_fields_set:
            _dict['documents_left'] = None

        # set to None if templates_total (nullable) is None
        # and model_fields_set contains the field
        if self.templates_total is None and "templates_total" in self.model_fields_set:
            _dict['templates_total'] = None

        # set to None if templates_left (nullable) is None
        # and model_fields_set contains the field
        if self.templates_left is None and "templates_left" in self.model_fields_set:
            _dict['templates_left'] = None

        # set to None if sms_verifications_left (nullable) is None
        # and model_fields_set contains the field
        if self.sms_verifications_left is None and "sms_verifications_left" in self.model_fields_set:
            _dict['sms_verifications_left'] = None

        # set to None if num_fax_pages_left (nullable) is None
        # and model_fields_set contains the field
        if self.num_fax_pages_left is None and "num_fax_pages_left" in self.model_fields_set:
            _dict['num_fax_pages_left'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountResponseQuotas from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "api_signature_requests_left": obj.get("api_signature_requests_left"),
            "documents_left": obj.get("documents_left"),
            "templates_total": obj.get("templates_total"),
            "templates_left": obj.get("templates_left"),
            "sms_verifications_left": obj.get("sms_verifications_left"),
            "num_fax_pages_left": obj.get("num_fax_pages_left")
        })
        return _obj

    @classmethod
    def init(cls, data: Optional[Dict[str, Any]]) -> Self:
        """
        Attempt to instantiate and hydrate a new instance of this class
        """
        return cls.from_dict(data)

    @classmethod
    def openapi_types(cls) -> Dict[StrictStr, StrictStr]:
        return {
            "api_signature_requests_left": "(int,)",
            "documents_left": "(int,)",
            "templates_total": "(int,)",
            "templates_left": "(int,)",
            "sms_verifications_left": "(int,)",
            "num_fax_pages_left": "(int,)",
        }

    @classmethod
    def openapi_type_is_array(cls, property_name: StrictStr) -> StrictBool:
        return property_name in [
        ]

    model_config = {
        "arbitrary_types_allowed": True
    }

