# coding: utf-8

"""
    Dropbox Sign API

    Dropbox Sign v3 API

    The version of the OpenAPI document: 3.0.0
    Contact: apisupport@hellosign.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set, Tuple
from typing_extensions import Self
import io

class BulkSendJobResponse(BaseModel):
    """
    Contains information about the BulkSendJob such as when it was created and how many signature requests are queued.
    """ # noqa: E501
    bulk_send_job_id: Optional[StrictStr] = Field(default=None, description="The id of the BulkSendJob.")
    total: Optional[StrictInt] = Field(default=None, description="The total amount of Signature Requests queued for sending.")
    is_creator: Optional[StrictBool] = Field(default=None, description="True if you are the owner of this BulkSendJob, false if it's been shared with you by a team member.")
    created_at: Optional[StrictInt] = Field(default=None, description="Time that the BulkSendJob was created.")
    __properties: ClassVar[List[str]] = ["bulk_send_job_id", "total", "is_creator", "created_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self, excluded_fields: Set[str] = None) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict(excluded_fields))

    def to_json_form_params(self, excluded_fields: Set[str] = None) -> List[Tuple[str, str]]:
        data: List[Tuple[str, str]] = []

        for key, value in self.to_dict(excluded_fields).items():
            data.append((key, json.dumps(value)))

        return data

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BulkSendJobResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self, excluded_fields: Set[str] = None) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if bulk_send_job_id (nullable) is None
        # and model_fields_set contains the field
        if self.bulk_send_job_id is None and "bulk_send_job_id" in self.model_fields_set:
            _dict['bulk_send_job_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BulkSendJobResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bulk_send_job_id": obj.get("bulk_send_job_id"),
            "total": obj.get("total"),
            "is_creator": obj.get("is_creator"),
            "created_at": obj.get("created_at")
        })
        return _obj

    @classmethod
    def init(cls, data: Optional[Dict[str, Any]]) -> Self:
        """
        Attempt to instantiate and hydrate a new instance of this class
        """
        return cls.from_dict(data)

    @classmethod
    def openapi_types(cls) -> Dict[StrictStr, StrictStr]:
        return {
            "bulk_send_job_id": "(str,)",
            "total": "(int,)",
            "is_creator": "(bool,)",
            "created_at": "(int,)",
        }

    @classmethod
    def openapi_type_is_array(cls, property_name: StrictStr) -> StrictBool:
        return property_name in [
        ]

    model_config = {
        "arbitrary_types_allowed": True
    }

