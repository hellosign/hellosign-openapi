{{>licenseInfo}}
{{^useCustomTemplateCode}}
import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
{{#imports}}
import { {{classname}} } from '{{filename}}';
{{/imports}}

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';
{{#hasAuthMethods}}
import { HttpBasicAuth, HttpBearerAuth, ApiKeyAuth, OAuth } from '../model/models';
{{/hasAuthMethods}}

import { HttpError, RequestFile } from './apis';
{{/useCustomTemplateCode}}
{{#useCustomTemplateCode}}
import axios, { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import http from 'http';

import {
    ObjectSerializer, Authentication, VoidAuth, Interceptor,
    HttpBasicAuth, HttpBearerAuth, ApiKeyAuth, OAuth,
    {{#imports}}{{classname}},{{/imports}}
} from '../model';

import {
    HttpError,
    optionsI,
    returnTypeT,
    returnTypeI,
    generateFormData,
    toFormData,
    queryParamsSerializer,
    USER_AGENT,
} from './';
{{/useCustomTemplateCode}}

let defaultBasePath = '{{{basePath}}}';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

{{#operations}}
{{#description}}
/**
* {{&description}}
*/
{{/description}}
export enum {{classname}}ApiKeys {
{{#authMethods}}
{{#isApiKey}}
    {{name}},
{{/isApiKey}}
{{/authMethods}}
}

export class {{classname}} {
    protected _basePath = defaultBasePath;
{{^useCustomTemplateCode}}
    protected _defaultHeaders : any = {};
{{/useCustomTemplateCode}}
{{#useCustomTemplateCode}}
    protected _defaultHeaders : any = { 'User-Agent': USER_AGENT };
{{/useCustomTemplateCode}}
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
{{#hasAuthMethods}}
{{#authMethods}}
{{#isBasicBasic}}
        '{{name}}': new HttpBasicAuth(),
{{/isBasicBasic}}
{{#isBasicBearer}}
        '{{name}}': new HttpBearerAuth(),
{{/isBasicBearer}}
{{#isApiKey}}
        '{{name}}': new ApiKeyAuth({{#isKeyInHeader}}'header'{{/isKeyInHeader}}{{#isKeyInQuery}}'query'{{/isKeyInQuery}}{{#isKeyInCookie}}'cookie'{{/isKeyInCookie}}, '{{keyParamName}}'),
{{/isApiKey}}
{{#isOAuth}}
        '{{name}}': new OAuth(),
{{/isOAuth}}
{{/authMethods}}
{{/hasAuthMethods}}
    }

    protected interceptors: Interceptor[] = [];

{{^useCustomTemplateCode}}
    constructor(basePath?: string);
{{#authMethods}}
{{#isBasicBasic}}
    constructor(username: string, password: string, basePath?: string);
{{/isBasicBasic}}
{{/authMethods}}
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
{{#authMethods}}
{{#isBasicBasic}}
            this.username = basePathOrUsername;
            this.password = password
{{/isBasicBasic}}
{{/authMethods}}
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }
{{/useCustomTemplateCode}}
{{#useCustomTemplateCode}}
    constructor(basePath?: string) {
        if (basePath) {
            this.basePath = basePath;
        }
    }
{{/useCustomTemplateCode}}

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
{{^useCustomTemplateCode}}
        this._defaultHeaders = defaultHeaders;
{{/useCustomTemplateCode}}
{{#useCustomTemplateCode}}
        this._defaultHeaders = { ...defaultHeaders, "User-Agent": USER_AGENT };
{{/useCustomTemplateCode}}
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

{{^useCustomTemplateCode}}
    public setApiKey(key: {{classname}}ApiKeys, value: string) {
        (this.authentications as any)[{{classname}}ApiKeys[key]].apiKey = value;
    }
{{/useCustomTemplateCode}}
{{#useCustomTemplateCode}}
    public setApiKey(key: string) {
        this.authentications.api_key.username = key;
    }
{{/useCustomTemplateCode}}
{{#hasAuthMethods}}
{{#authMethods}}
{{#isBasicBasic}}

    set username(username: string) {
        this.authentications.{{name}}.username = username;
    }

    set password(password: string) {
        this.authentications.{{name}}.password = password;
    }
{{/isBasicBasic}}
{{#isBasicBearer}}

    set accessToken(accessToken: string | (() => string)) {
        this.authentications.{{name}}.accessToken = accessToken;
    }
{{/isBasicBearer}}
{{#isOAuth}}

    set accessToken(token: string) {
        this.authentications.{{name}}.accessToken = token;
    }
{{/isOAuth}}
{{/authMethods}}
{{/hasAuthMethods}}

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

{{#operation}}
    /**
     * {{&notes}}
     {{#summary}}
     * @summary {{&summary}}
     {{/summary}}
     {{#allParams}}
     * @param {{paramName}} {{description}}
     {{/allParams}}
     {{#isDeprecated}}
     *
     * @deprecated
     {{/isDeprecated}}
{{#useCustomTemplateCode}}
     * @param options
{{/useCustomTemplateCode}}
     */
{{^useCustomTemplateCode}}
    public async {{nickname}} ({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; {{#returnType}}body: {{{.}}}; {{/returnType}}{{^returnType}}body?: any; {{/returnType}} }> {
{{/useCustomTemplateCode}}
{{#useCustomTemplateCode}}
    public async {{nickname}} ({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}options: optionsI = {headers: {}}) : Promise<{{#returnType}}returnTypeT<{{{.}}}>{{/returnType}}{{^returnType}}returnTypeI{{/returnType}}> {
{{#bodyParam}}
        {{{paramName}}} = deserializeIfNeeded({{paramName}}, "{{{dataType}}}");
{{/bodyParam}}
{{/useCustomTemplateCode}}
        const localVarPath = this.basePath + '{{{path}}}'{{#pathParams}}
            .replace('{' + '{{baseName}}' + '}', encodeURIComponent(String({{paramName}}))){{/pathParams}};
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
{{#hasProduces}}
        const produces = [{{#produces}}'{{{mediaType}}}'{{^-last}}, {{/-last}}{{/produces}}];
        // give precedence to 'application/json'
{{^useCustomTemplateCode}}
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
{{/useCustomTemplateCode}}
{{#useCustomTemplateCode}}
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams['content-type'] = 'application/json';
        } else {
            localVarHeaderParams['content-type'] = produces.join(',');
        }
{{/useCustomTemplateCode}}
{{/hasProduces}}
        let localVarFormParams: any = {};
{{#useCustomTemplateCode}}
        let localVarBodyParams: any = undefined;
{{/useCustomTemplateCode}}

{{#allParams}}
{{#required}}
        // verify required parameter '{{paramName}}' is not null or undefined
        if ({{paramName}} === null || {{paramName}} === undefined) {
            throw new Error('Required parameter {{paramName}} was null or undefined when calling {{nickname}}.');
        }

{{/required}}
{{/allParams}}
{{#queryParams}}
        if ({{paramName}} !== undefined) {
            localVarQueryParameters['{{baseName}}'] = ObjectSerializer.serialize({{paramName}}, "{{{dataType}}}");
        }

{{/queryParams}}
{{#headerParams}}
        localVarHeaderParams['{{baseName}}'] = ObjectSerializer.serialize({{paramName}}, "{{{dataType}}}");
{{/headerParams}}
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

{{#formParams}}
        if ({{paramName}} !== undefined) {
            {{#isFile}}
            localVarFormParams['{{baseName}}'] = {{paramName}};
            {{/isFile}}
            {{^isFile}}
            localVarFormParams['{{baseName}}'] = ObjectSerializer.serialize({{paramName}}, "{{{dataType}}}");
            {{/isFile}}
        }
{{#isFile}}
        localVarUseFormData = true;
{{/isFile}}

{{/formParams}}
{{^useCustomTemplateCode}}
        let localVarRequestOptions: localVarRequest.Options = {
            method: '{{httpMethod}}',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
{{^isResponseFile}}
            json: true,
{{/isResponseFile}}
{{#isResponseFile}}
            encoding: null,
{{/isResponseFile}}
{{#bodyParam}}
            body: ObjectSerializer.serialize({{paramName}}, "{{{dataType}}}")
{{/bodyParam}}
{{/useCustomTemplateCode}}
{{#useCustomTemplateCode}}
        {{#bodyParam}}
        const result = generateFormData({{{paramName}}}, {{{dataType}}}.attributeTypeMap);
        localVarUseFormData = result.localVarUseFormData;

        let data = {};
        if (localVarUseFormData) {
          const formData = toFormData(result.data);
          data = formData;
          localVarHeaderParams = {
            ...localVarHeaderParams,
            ...formData.getHeaders(),
          };
        } else {
          data = ObjectSerializer.serialize(
            {{paramName}},
            "{{{dataType}}}"
          );
        }
        {{/bodyParam}}

        let localVarRequestOptions: AxiosRequestConfig = {
            method: '{{httpMethod}}',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            paramsSerializer: this._useQuerystring ? queryParamsSerializer : undefined,
            maxContentLength: Infinity,
            maxBodyLength: Infinity,
{{^isResponseFile}}
            responseType: "json",
{{/isResponseFile}}
{{#isResponseFile}}
            responseType: "arraybuffer",
{{/isResponseFile}}
{{#bodyParam}}
            data,
{{/bodyParam}}
{{/useCustomTemplateCode}}
        };

        let authenticationPromise = Promise.resolve();
{{#authMethods}}
    {{#isApiKey}}
        if (this.authentications.{{name}}.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.{{name}}.applyToRequest(localVarRequestOptions));
        }
    {{/isApiKey}}
    {{#isBasicBasic}}
{{^useCustomTemplateCode}}
        if (this.authentications.{{name}}.username && this.authentications.{{name}}.password) {
{{/useCustomTemplateCode}}
{{#useCustomTemplateCode}}
        if (this.authentications.{{name}}.username) {
{{/useCustomTemplateCode}}
            authenticationPromise = authenticationPromise.then(() => this.authentications.{{name}}.applyToRequest(localVarRequestOptions));
        }
    {{/isBasicBasic}}
    {{#isBasicBearer}}
        if (this.authentications.{{name}}.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.{{name}}.applyToRequest(localVarRequestOptions));
        }
    {{/isBasicBearer}}
    {{#isOAuth}}
        if (this.authentications.{{name}}.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.{{name}}.applyToRequest(localVarRequestOptions));
        }
    {{/isOAuth}}
{{/authMethods}}
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
{{^useCustomTemplateCode}}
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; {{#returnType}}body: {{{.}}}; {{/returnType}}{{^returnType}}body?: any; {{/returnType}} }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            {{#returnType}}
                            body = ObjectSerializer.deserialize(body, "{{{.}}}");
                            {{/returnType}}
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
{{/useCustomTemplateCode}}
{{#useCustomTemplateCode}}
            return new Promise<{{#returnType}}returnTypeT<{{{.}}}>{{/returnType}}{{^returnType}}returnTypeI{{/returnType}}>((resolve, reject) => {
                axios.request(localVarRequestOptions)
                    .then((response) => {
                        handleSuccessfulResponse{{#returnType}}<{{{.}}}>{{/returnType}}(
                          resolve,
                          reject,
                          response,
                          {{#returnType}}"{{{.}}}",{{/returnType}}
                        );
                    }, (error: AxiosError) => {
                        if (error.response == null) {
                            reject(error);
                            return;
                        }

                        {{#responses}}
                        {{#dataType}}
                        {{^isWildcard}}
                        {{^isRange}}
                        if (handleErrorCodeResponse(
                            reject,
                            error.response,
                            {{code}},
                            "{{{dataType}}}",
                        )) {
                          return;
                        }
                        {{/isRange}}
                        {{/isWildcard}}
                        {{/dataType}}
                        {{/responses}}

                        {{#responses}}
                        {{#dataType}}
                        {{#isRange}}
                        if (handleErrorRangeResponse(
                            reject,
                            error.response,
                            "{{code}}",
                            "{{{dataType}}}",
                        )) {
                          return;
                        }
                        {{/isRange}}
                        {{/dataType}}
                        {{/responses}}

                        reject(error);
                    });
            });
{{/useCustomTemplateCode}}
        });
    }
{{/operation}}
}
{{#useCustomTemplateCode}}

function deserializeIfNeeded<T> (obj: T, classname: string): T {
  if (obj !== null && obj !== undefined && obj.constructor.name !== classname) {
    return ObjectSerializer.deserialize(obj, classname);
  }

  return obj;
}

type AxiosResolve<T> = (
  value: (returnTypeT<T> | PromiseLike<returnTypeT<T>>),
) => void

type AxiosReject = (reason?: any) => void;

function handleSuccessfulResponse<T>(
  resolve: AxiosResolve<T>,
  reject: AxiosReject,
  response: AxiosResponse,
  returnType?: string,
) {
    let body = response.data;

    if (
        response.status &&
        response.status >= 200 &&
        response.status <= 299
    ) {
        if (returnType) {
            body = ObjectSerializer.deserialize(body, returnType);
        }

        resolve({ response: response, body: body });
    } else {
        reject(new HttpError(response, body, response.status));
    }
}

function handleErrorCodeResponse(
  reject: AxiosReject,
  response: AxiosResponse,
  code: number,
  returnType: string
): boolean {
    if (response.status !== code) {
        return false;
    }

    const body = ObjectSerializer.deserialize(
        response.data,
        returnType,
    );

    reject(new HttpError(response, body, response.status));

    return true;
}

function handleErrorRangeResponse(
  reject: AxiosReject,
  response: AxiosResponse,
  code: string,
  returnType: string
): boolean {
    let rangeCodeLeft = Number(code[0] + "00");
    let rangeCodeRight = Number(code[0] + "99");

    if (response.status >= rangeCodeLeft && response.status <= rangeCodeRight) {
        const body = ObjectSerializer.deserialize(
            response.data,
            returnType,
        );

      reject(new HttpError(response, body, response.status));

      return true;
    }

    return false;
}
{{/useCustomTemplateCode}}
{{/operations}}
