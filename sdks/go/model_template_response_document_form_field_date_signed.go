/*
Dropbox Sign API

Dropbox Sign v3 API

API version: 3.0.0
Contact: apisupport@hellosign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dropbox_sign

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TemplateResponseDocumentFormFieldDateSigned type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TemplateResponseDocumentFormFieldDateSigned{}

// TemplateResponseDocumentFormFieldDateSigned This class extends `TemplateResponseDocumentFormFieldBase`
type TemplateResponseDocumentFormFieldDateSigned struct {
	TemplateResponseDocumentFormFieldBase
	// The type of this form field. See [field types](/api/reference/constants/#field-types).  * Text Field uses `TemplateResponseDocumentFormFieldText` * Dropdown Field uses `TemplateResponseDocumentFormFieldDropdown` * Hyperlink Field uses `TemplateResponseDocumentFormFieldHyperlink` * Checkbox Field uses `TemplateResponseDocumentFormFieldCheckbox` * Radio Field uses `TemplateResponseDocumentFormFieldRadio` * Signature Field uses `TemplateResponseDocumentFormFieldSignature` * Date Signed Field uses `TemplateResponseDocumentFormFieldDateSigned` * Initials Field uses `TemplateResponseDocumentFormFieldInitials`
	Type string `json:"type"`
}

type _TemplateResponseDocumentFormFieldDateSigned TemplateResponseDocumentFormFieldDateSigned

// NewTemplateResponseDocumentFormFieldDateSigned instantiates a new TemplateResponseDocumentFormFieldDateSigned object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTemplateResponseDocumentFormFieldDateSigned(type_ string) *TemplateResponseDocumentFormFieldDateSigned {
	this := TemplateResponseDocumentFormFieldDateSigned{}
	this.Type = type_
	return &this
}

// NewTemplateResponseDocumentFormFieldDateSignedWithDefaults instantiates a new TemplateResponseDocumentFormFieldDateSigned object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTemplateResponseDocumentFormFieldDateSignedWithDefaults() *TemplateResponseDocumentFormFieldDateSigned {
	this := TemplateResponseDocumentFormFieldDateSigned{}
	var type_ string = "date_signed"
	this.Type = type_
	return &this
}

// GetType returns the Type field value
func (o *TemplateResponseDocumentFormFieldDateSigned) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TemplateResponseDocumentFormFieldDateSigned) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TemplateResponseDocumentFormFieldDateSigned) SetType(v string) {
	o.Type = v
}

func (o TemplateResponseDocumentFormFieldDateSigned) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TemplateResponseDocumentFormFieldDateSigned) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedTemplateResponseDocumentFormFieldBase, errTemplateResponseDocumentFormFieldBase := json.Marshal(o.TemplateResponseDocumentFormFieldBase)
	if errTemplateResponseDocumentFormFieldBase != nil {
		return map[string]interface{}{}, errTemplateResponseDocumentFormFieldBase
	}
	errTemplateResponseDocumentFormFieldBase = json.Unmarshal([]byte(serializedTemplateResponseDocumentFormFieldBase), &toSerialize)
	if errTemplateResponseDocumentFormFieldBase != nil {
		return map[string]interface{}{}, errTemplateResponseDocumentFormFieldBase
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *TemplateResponseDocumentFormFieldDateSigned) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTemplateResponseDocumentFormFieldDateSigned := _TemplateResponseDocumentFormFieldDateSigned{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTemplateResponseDocumentFormFieldDateSigned)

	if err != nil {
		return err
	}

	*o = TemplateResponseDocumentFormFieldDateSigned(varTemplateResponseDocumentFormFieldDateSigned)

	return err
}

type NullableTemplateResponseDocumentFormFieldDateSigned struct {
	value *TemplateResponseDocumentFormFieldDateSigned
	isSet bool
}

func (v NullableTemplateResponseDocumentFormFieldDateSigned) Get() *TemplateResponseDocumentFormFieldDateSigned {
	return v.value
}

func (v *NullableTemplateResponseDocumentFormFieldDateSigned) Set(val *TemplateResponseDocumentFormFieldDateSigned) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateResponseDocumentFormFieldDateSigned) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateResponseDocumentFormFieldDateSigned) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateResponseDocumentFormFieldDateSigned(val *TemplateResponseDocumentFormFieldDateSigned) *NullableTemplateResponseDocumentFormFieldDateSigned {
	return &NullableTemplateResponseDocumentFormFieldDateSigned{value: val, isSet: true}
}

func (v NullableTemplateResponseDocumentFormFieldDateSigned) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateResponseDocumentFormFieldDateSigned) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


