/*
Dropbox Sign API

Dropbox Sign v3 API

API version: 3.0.0
Contact: apisupport@hellosign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dropbox_sign

import (
	"encoding/json"
)

// checks if the TeamRemoveMemberRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TeamRemoveMemberRequest{}

// TeamRemoveMemberRequest struct for TeamRemoveMemberRequest
type TeamRemoveMemberRequest struct {
	// **account_id** or **email_address** is required. If both are provided, the account id prevails.  Account id to remove from your Team.
	AccountId *string `json:"account_id,omitempty"`
	// **account_id** or **email_address** is required. If both are provided, the account id prevails.  Email address of the Account to remove from your Team.
	EmailAddress *string `json:"email_address,omitempty"`
	// The email address of an Account on this Team to receive all documents, templates, and API apps (if applicable) from the removed Account. If not provided, and on an Enterprise plan, this data will remain with the removed Account.  **Note**: Only available for Enterprise plans.
	NewOwnerEmailAddress *string `json:"new_owner_email_address,omitempty"`
	// Id of the new Team.
	NewTeamId *string `json:"new_team_id,omitempty"`
	// A new role member will take in a new Team.  **Note**: This parameter is used only if `new_team_id` is provided.
	NewRole *string `json:"new_role,omitempty"`
}

// NewTeamRemoveMemberRequest instantiates a new TeamRemoveMemberRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamRemoveMemberRequest() *TeamRemoveMemberRequest {
	this := TeamRemoveMemberRequest{}
	return &this
}

// NewTeamRemoveMemberRequestWithDefaults instantiates a new TeamRemoveMemberRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamRemoveMemberRequestWithDefaults() *TeamRemoveMemberRequest {
	this := TeamRemoveMemberRequest{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *TeamRemoveMemberRequest) GetAccountId() string {
	if o == nil || IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamRemoveMemberRequest) GetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *TeamRemoveMemberRequest) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *TeamRemoveMemberRequest) SetAccountId(v string) {
	o.AccountId = &v
}

// GetEmailAddress returns the EmailAddress field value if set, zero value otherwise.
func (o *TeamRemoveMemberRequest) GetEmailAddress() string {
	if o == nil || IsNil(o.EmailAddress) {
		var ret string
		return ret
	}
	return *o.EmailAddress
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamRemoveMemberRequest) GetEmailAddressOk() (*string, bool) {
	if o == nil || IsNil(o.EmailAddress) {
		return nil, false
	}
	return o.EmailAddress, true
}

// HasEmailAddress returns a boolean if a field has been set.
func (o *TeamRemoveMemberRequest) HasEmailAddress() bool {
	if o != nil && !IsNil(o.EmailAddress) {
		return true
	}

	return false
}

// SetEmailAddress gets a reference to the given string and assigns it to the EmailAddress field.
func (o *TeamRemoveMemberRequest) SetEmailAddress(v string) {
	o.EmailAddress = &v
}

// GetNewOwnerEmailAddress returns the NewOwnerEmailAddress field value if set, zero value otherwise.
func (o *TeamRemoveMemberRequest) GetNewOwnerEmailAddress() string {
	if o == nil || IsNil(o.NewOwnerEmailAddress) {
		var ret string
		return ret
	}
	return *o.NewOwnerEmailAddress
}

// GetNewOwnerEmailAddressOk returns a tuple with the NewOwnerEmailAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamRemoveMemberRequest) GetNewOwnerEmailAddressOk() (*string, bool) {
	if o == nil || IsNil(o.NewOwnerEmailAddress) {
		return nil, false
	}
	return o.NewOwnerEmailAddress, true
}

// HasNewOwnerEmailAddress returns a boolean if a field has been set.
func (o *TeamRemoveMemberRequest) HasNewOwnerEmailAddress() bool {
	if o != nil && !IsNil(o.NewOwnerEmailAddress) {
		return true
	}

	return false
}

// SetNewOwnerEmailAddress gets a reference to the given string and assigns it to the NewOwnerEmailAddress field.
func (o *TeamRemoveMemberRequest) SetNewOwnerEmailAddress(v string) {
	o.NewOwnerEmailAddress = &v
}

// GetNewTeamId returns the NewTeamId field value if set, zero value otherwise.
func (o *TeamRemoveMemberRequest) GetNewTeamId() string {
	if o == nil || IsNil(o.NewTeamId) {
		var ret string
		return ret
	}
	return *o.NewTeamId
}

// GetNewTeamIdOk returns a tuple with the NewTeamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamRemoveMemberRequest) GetNewTeamIdOk() (*string, bool) {
	if o == nil || IsNil(o.NewTeamId) {
		return nil, false
	}
	return o.NewTeamId, true
}

// HasNewTeamId returns a boolean if a field has been set.
func (o *TeamRemoveMemberRequest) HasNewTeamId() bool {
	if o != nil && !IsNil(o.NewTeamId) {
		return true
	}

	return false
}

// SetNewTeamId gets a reference to the given string and assigns it to the NewTeamId field.
func (o *TeamRemoveMemberRequest) SetNewTeamId(v string) {
	o.NewTeamId = &v
}

// GetNewRole returns the NewRole field value if set, zero value otherwise.
func (o *TeamRemoveMemberRequest) GetNewRole() string {
	if o == nil || IsNil(o.NewRole) {
		var ret string
		return ret
	}
	return *o.NewRole
}

// GetNewRoleOk returns a tuple with the NewRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamRemoveMemberRequest) GetNewRoleOk() (*string, bool) {
	if o == nil || IsNil(o.NewRole) {
		return nil, false
	}
	return o.NewRole, true
}

// HasNewRole returns a boolean if a field has been set.
func (o *TeamRemoveMemberRequest) HasNewRole() bool {
	if o != nil && !IsNil(o.NewRole) {
		return true
	}

	return false
}

// SetNewRole gets a reference to the given string and assigns it to the NewRole field.
func (o *TeamRemoveMemberRequest) SetNewRole(v string) {
	o.NewRole = &v
}

func (o TeamRemoveMemberRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TeamRemoveMemberRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountId) {
		toSerialize["account_id"] = o.AccountId
	}
	if !IsNil(o.EmailAddress) {
		toSerialize["email_address"] = o.EmailAddress
	}
	if !IsNil(o.NewOwnerEmailAddress) {
		toSerialize["new_owner_email_address"] = o.NewOwnerEmailAddress
	}
	if !IsNil(o.NewTeamId) {
		toSerialize["new_team_id"] = o.NewTeamId
	}
	if !IsNil(o.NewRole) {
		toSerialize["new_role"] = o.NewRole
	}
	return toSerialize, nil
}

type NullableTeamRemoveMemberRequest struct {
	value *TeamRemoveMemberRequest
	isSet bool
}

func (v NullableTeamRemoveMemberRequest) Get() *TeamRemoveMemberRequest {
	return v.value
}

func (v *NullableTeamRemoveMemberRequest) Set(val *TeamRemoveMemberRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamRemoveMemberRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamRemoveMemberRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamRemoveMemberRequest(val *TeamRemoveMemberRequest) *NullableTeamRemoveMemberRequest {
	return &NullableTeamRemoveMemberRequest{value: val, isSet: true}
}

func (v NullableTeamRemoveMemberRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamRemoveMemberRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


