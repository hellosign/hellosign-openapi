/*
Dropbox Sign API

Dropbox Sign v3 API

API version: 3.0.0
Contact: apisupport@hellosign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dropbox_sign

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SubSignatureRequestGroupedSigners type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubSignatureRequestGroupedSigners{}

// SubSignatureRequestGroupedSigners struct for SubSignatureRequestGroupedSigners
type SubSignatureRequestGroupedSigners struct {
	// The name of the group.
	Group string `json:"group"`
	// The order the group is required to sign in. Use this instead of Signer-level `order`.
	Order NullableInt32 `json:"order,omitempty"`
	// Signers belonging to this Group.  **NOTE**: Only `name`, `email_address`, and `pin` are available to Grouped Signers. We will ignore all other properties, even though they are listed below.
	Signers []SubSignatureRequestSigner `json:"signers"`
}

type _SubSignatureRequestGroupedSigners SubSignatureRequestGroupedSigners

// NewSubSignatureRequestGroupedSigners instantiates a new SubSignatureRequestGroupedSigners object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubSignatureRequestGroupedSigners(group string, signers []SubSignatureRequestSigner) *SubSignatureRequestGroupedSigners {
	this := SubSignatureRequestGroupedSigners{}
	this.Group = group
	this.Signers = signers
	return &this
}

// NewSubSignatureRequestGroupedSignersWithDefaults instantiates a new SubSignatureRequestGroupedSigners object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubSignatureRequestGroupedSignersWithDefaults() *SubSignatureRequestGroupedSigners {
	this := SubSignatureRequestGroupedSigners{}
	return &this
}

// GetGroup returns the Group field value
func (o *SubSignatureRequestGroupedSigners) GetGroup() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Group
}

// GetGroupOk returns a tuple with the Group field value
// and a boolean to check if the value has been set.
func (o *SubSignatureRequestGroupedSigners) GetGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Group, true
}

// SetGroup sets field value
func (o *SubSignatureRequestGroupedSigners) SetGroup(v string) {
	o.Group = v
}

// GetOrder returns the Order field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubSignatureRequestGroupedSigners) GetOrder() int32 {
	if o == nil || IsNil(o.Order.Get()) {
		var ret int32
		return ret
	}
	return *o.Order.Get()
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubSignatureRequestGroupedSigners) GetOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Order.Get(), o.Order.IsSet()
}

// HasOrder returns a boolean if a field has been set.
func (o *SubSignatureRequestGroupedSigners) HasOrder() bool {
	if o != nil && o.Order.IsSet() {
		return true
	}

	return false
}

// SetOrder gets a reference to the given NullableInt32 and assigns it to the Order field.
func (o *SubSignatureRequestGroupedSigners) SetOrder(v int32) {
	o.Order.Set(&v)
}
// SetOrderNil sets the value for Order to be an explicit nil
func (o *SubSignatureRequestGroupedSigners) SetOrderNil() {
	o.Order.Set(nil)
}

// UnsetOrder ensures that no value is present for Order, not even an explicit nil
func (o *SubSignatureRequestGroupedSigners) UnsetOrder() {
	o.Order.Unset()
}

// GetSigners returns the Signers field value
func (o *SubSignatureRequestGroupedSigners) GetSigners() []SubSignatureRequestSigner {
	if o == nil {
		var ret []SubSignatureRequestSigner
		return ret
	}

	return o.Signers
}

// GetSignersOk returns a tuple with the Signers field value
// and a boolean to check if the value has been set.
func (o *SubSignatureRequestGroupedSigners) GetSignersOk() ([]SubSignatureRequestSigner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Signers, true
}

// SetSigners sets field value
func (o *SubSignatureRequestGroupedSigners) SetSigners(v []SubSignatureRequestSigner) {
	o.Signers = v
}

func (o SubSignatureRequestGroupedSigners) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubSignatureRequestGroupedSigners) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["group"] = o.Group
	if o.Order.IsSet() {
		toSerialize["order"] = o.Order.Get()
	}
	toSerialize["signers"] = o.Signers
	return toSerialize, nil
}

func (o *SubSignatureRequestGroupedSigners) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"group",
		"signers",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubSignatureRequestGroupedSigners := _SubSignatureRequestGroupedSigners{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubSignatureRequestGroupedSigners)

	if err != nil {
		return err
	}

	*o = SubSignatureRequestGroupedSigners(varSubSignatureRequestGroupedSigners)

	return err
}

type NullableSubSignatureRequestGroupedSigners struct {
	value *SubSignatureRequestGroupedSigners
	isSet bool
}

func (v NullableSubSignatureRequestGroupedSigners) Get() *SubSignatureRequestGroupedSigners {
	return v.value
}

func (v *NullableSubSignatureRequestGroupedSigners) Set(val *SubSignatureRequestGroupedSigners) {
	v.value = val
	v.isSet = true
}

func (v NullableSubSignatureRequestGroupedSigners) IsSet() bool {
	return v.isSet
}

func (v *NullableSubSignatureRequestGroupedSigners) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubSignatureRequestGroupedSigners(val *SubSignatureRequestGroupedSigners) *NullableSubSignatureRequestGroupedSigners {
	return &NullableSubSignatureRequestGroupedSigners{value: val, isSet: true}
}

func (v NullableSubSignatureRequestGroupedSigners) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubSignatureRequestGroupedSigners) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


