/*
Dropbox Sign API

Dropbox Sign v3 API

API version: 3.0.0
Contact: apisupport@hellosign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dropbox_sign

import (
	"encoding/json"
)

// checks if the FileResponseDataUri type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileResponseDataUri{}

// FileResponseDataUri struct for FileResponseDataUri
type FileResponseDataUri struct {
	// File as base64 encoded string.
	DataUri *string `json:"data_uri,omitempty"`
}

// NewFileResponseDataUri instantiates a new FileResponseDataUri object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileResponseDataUri() *FileResponseDataUri {
	this := FileResponseDataUri{}
	return &this
}

// NewFileResponseDataUriWithDefaults instantiates a new FileResponseDataUri object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileResponseDataUriWithDefaults() *FileResponseDataUri {
	this := FileResponseDataUri{}
	return &this
}

// GetDataUri returns the DataUri field value if set, zero value otherwise.
func (o *FileResponseDataUri) GetDataUri() string {
	if o == nil || IsNil(o.DataUri) {
		var ret string
		return ret
	}
	return *o.DataUri
}

// GetDataUriOk returns a tuple with the DataUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileResponseDataUri) GetDataUriOk() (*string, bool) {
	if o == nil || IsNil(o.DataUri) {
		return nil, false
	}
	return o.DataUri, true
}

// HasDataUri returns a boolean if a field has been set.
func (o *FileResponseDataUri) HasDataUri() bool {
	if o != nil && !IsNil(o.DataUri) {
		return true
	}

	return false
}

// SetDataUri gets a reference to the given string and assigns it to the DataUri field.
func (o *FileResponseDataUri) SetDataUri(v string) {
	o.DataUri = &v
}

func (o FileResponseDataUri) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileResponseDataUri) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DataUri) {
		toSerialize["data_uri"] = o.DataUri
	}
	return toSerialize, nil
}

type NullableFileResponseDataUri struct {
	value *FileResponseDataUri
	isSet bool
}

func (v NullableFileResponseDataUri) Get() *FileResponseDataUri {
	return v.value
}

func (v *NullableFileResponseDataUri) Set(val *FileResponseDataUri) {
	v.value = val
	v.isSet = true
}

func (v NullableFileResponseDataUri) IsSet() bool {
	return v.isSet
}

func (v *NullableFileResponseDataUri) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileResponseDataUri(val *FileResponseDataUri) *NullableFileResponseDataUri {
	return &NullableFileResponseDataUri{value: val, isSet: true}
}

func (v NullableFileResponseDataUri) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileResponseDataUri) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


