/*
Dropbox Sign API

Dropbox Sign v3 API

API version: 3.0.0
Contact: apisupport@hellosign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dropbox_sign

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EventCallbackRequestEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventCallbackRequestEvent{}

// EventCallbackRequestEvent Basic information about the event that occurred.
type EventCallbackRequestEvent struct {
	// Time the event was created (using Unix time).
	EventTime string `json:"event_time"`
	// Type of callback event that was triggered.
	EventType string `json:"event_type"`
	// Generated hash used to verify source of event data.
	EventHash string `json:"event_hash"`
	EventMetadata *EventCallbackRequestEventMetadata `json:"event_metadata,omitempty"`
}

type _EventCallbackRequestEvent EventCallbackRequestEvent

// NewEventCallbackRequestEvent instantiates a new EventCallbackRequestEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventCallbackRequestEvent(eventTime string, eventType string, eventHash string) *EventCallbackRequestEvent {
	this := EventCallbackRequestEvent{}
	this.EventTime = eventTime
	this.EventType = eventType
	this.EventHash = eventHash
	return &this
}

// NewEventCallbackRequestEventWithDefaults instantiates a new EventCallbackRequestEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventCallbackRequestEventWithDefaults() *EventCallbackRequestEvent {
	this := EventCallbackRequestEvent{}
	return &this
}

// GetEventTime returns the EventTime field value
func (o *EventCallbackRequestEvent) GetEventTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventTime
}

// GetEventTimeOk returns a tuple with the EventTime field value
// and a boolean to check if the value has been set.
func (o *EventCallbackRequestEvent) GetEventTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventTime, true
}

// SetEventTime sets field value
func (o *EventCallbackRequestEvent) SetEventTime(v string) {
	o.EventTime = v
}

// GetEventType returns the EventType field value
func (o *EventCallbackRequestEvent) GetEventType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *EventCallbackRequestEvent) GetEventTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value
func (o *EventCallbackRequestEvent) SetEventType(v string) {
	o.EventType = v
}

// GetEventHash returns the EventHash field value
func (o *EventCallbackRequestEvent) GetEventHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventHash
}

// GetEventHashOk returns a tuple with the EventHash field value
// and a boolean to check if the value has been set.
func (o *EventCallbackRequestEvent) GetEventHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventHash, true
}

// SetEventHash sets field value
func (o *EventCallbackRequestEvent) SetEventHash(v string) {
	o.EventHash = v
}

// GetEventMetadata returns the EventMetadata field value if set, zero value otherwise.
func (o *EventCallbackRequestEvent) GetEventMetadata() EventCallbackRequestEventMetadata {
	if o == nil || IsNil(o.EventMetadata) {
		var ret EventCallbackRequestEventMetadata
		return ret
	}
	return *o.EventMetadata
}

// GetEventMetadataOk returns a tuple with the EventMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventCallbackRequestEvent) GetEventMetadataOk() (*EventCallbackRequestEventMetadata, bool) {
	if o == nil || IsNil(o.EventMetadata) {
		return nil, false
	}
	return o.EventMetadata, true
}

// HasEventMetadata returns a boolean if a field has been set.
func (o *EventCallbackRequestEvent) HasEventMetadata() bool {
	if o != nil && !IsNil(o.EventMetadata) {
		return true
	}

	return false
}

// SetEventMetadata gets a reference to the given EventCallbackRequestEventMetadata and assigns it to the EventMetadata field.
func (o *EventCallbackRequestEvent) SetEventMetadata(v EventCallbackRequestEventMetadata) {
	o.EventMetadata = &v
}

func (o EventCallbackRequestEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventCallbackRequestEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["event_time"] = o.EventTime
	toSerialize["event_type"] = o.EventType
	toSerialize["event_hash"] = o.EventHash
	if !IsNil(o.EventMetadata) {
		toSerialize["event_metadata"] = o.EventMetadata
	}
	return toSerialize, nil
}

func (o *EventCallbackRequestEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"event_time",
		"event_type",
		"event_hash",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventCallbackRequestEvent := _EventCallbackRequestEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEventCallbackRequestEvent)

	if err != nil {
		return err
	}

	*o = EventCallbackRequestEvent(varEventCallbackRequestEvent)

	return err
}

type NullableEventCallbackRequestEvent struct {
	value *EventCallbackRequestEvent
	isSet bool
}

func (v NullableEventCallbackRequestEvent) Get() *EventCallbackRequestEvent {
	return v.value
}

func (v *NullableEventCallbackRequestEvent) Set(val *EventCallbackRequestEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableEventCallbackRequestEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableEventCallbackRequestEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventCallbackRequestEvent(val *EventCallbackRequestEvent) *NullableEventCallbackRequestEvent {
	return &NullableEventCallbackRequestEvent{value: val, isSet: true}
}

func (v NullableEventCallbackRequestEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventCallbackRequestEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


