/*
Dropbox Sign API

Dropbox Sign v3 API

API version: 3.0.0
Contact: apisupport@hellosign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dropbox_sign

import (
	"encoding/json"
)

// checks if the SubBulkSignerList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubBulkSignerList{}

// SubBulkSignerList struct for SubBulkSignerList
type SubBulkSignerList struct {
	// An array of custom field values.
	CustomFields []SubBulkSignerListCustomField `json:"custom_fields,omitempty"`
	// Add Signers to your Templated-based Signature Request. Allows the requester to specify editor options when a preparing a document.  Currently only templates with a single role are supported. All signers must have the same `role` value.
	Signers []SubSignatureRequestTemplateSigner `json:"signers,omitempty"`
}

// NewSubBulkSignerList instantiates a new SubBulkSignerList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubBulkSignerList() *SubBulkSignerList {
	this := SubBulkSignerList{}
	return &this
}

// NewSubBulkSignerListWithDefaults instantiates a new SubBulkSignerList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubBulkSignerListWithDefaults() *SubBulkSignerList {
	this := SubBulkSignerList{}
	return &this
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *SubBulkSignerList) GetCustomFields() []SubBulkSignerListCustomField {
	if o == nil || IsNil(o.CustomFields) {
		var ret []SubBulkSignerListCustomField
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubBulkSignerList) GetCustomFieldsOk() ([]SubBulkSignerListCustomField, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *SubBulkSignerList) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given []SubBulkSignerListCustomField and assigns it to the CustomFields field.
func (o *SubBulkSignerList) SetCustomFields(v []SubBulkSignerListCustomField) {
	o.CustomFields = v
}

// GetSigners returns the Signers field value if set, zero value otherwise.
func (o *SubBulkSignerList) GetSigners() []SubSignatureRequestTemplateSigner {
	if o == nil || IsNil(o.Signers) {
		var ret []SubSignatureRequestTemplateSigner
		return ret
	}
	return o.Signers
}

// GetSignersOk returns a tuple with the Signers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubBulkSignerList) GetSignersOk() ([]SubSignatureRequestTemplateSigner, bool) {
	if o == nil || IsNil(o.Signers) {
		return nil, false
	}
	return o.Signers, true
}

// HasSigners returns a boolean if a field has been set.
func (o *SubBulkSignerList) HasSigners() bool {
	if o != nil && !IsNil(o.Signers) {
		return true
	}

	return false
}

// SetSigners gets a reference to the given []SubSignatureRequestTemplateSigner and assigns it to the Signers field.
func (o *SubBulkSignerList) SetSigners(v []SubSignatureRequestTemplateSigner) {
	o.Signers = v
}

func (o SubBulkSignerList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubBulkSignerList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CustomFields) {
		toSerialize["custom_fields"] = o.CustomFields
	}
	if !IsNil(o.Signers) {
		toSerialize["signers"] = o.Signers
	}
	return toSerialize, nil
}

type NullableSubBulkSignerList struct {
	value *SubBulkSignerList
	isSet bool
}

func (v NullableSubBulkSignerList) Get() *SubBulkSignerList {
	return v.value
}

func (v *NullableSubBulkSignerList) Set(val *SubBulkSignerList) {
	v.value = val
	v.isSet = true
}

func (v NullableSubBulkSignerList) IsSet() bool {
	return v.isSet
}

func (v *NullableSubBulkSignerList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubBulkSignerList(val *SubBulkSignerList) *NullableSubBulkSignerList {
	return &NullableSubBulkSignerList{value: val, isSet: true}
}

func (v NullableSubBulkSignerList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubBulkSignerList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


