/*
Dropbox Sign API

Dropbox Sign v3 API

API version: 3.0.0
Contact: apisupport@hellosign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dropbox_sign

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SubSigningOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubSigningOptions{}

// SubSigningOptions This allows the requester to specify the types allowed for creating a signature.  **Note**: If `signing_options` are not defined in the request, the allowed types will default to those specified in the account settings.
type SubSigningOptions struct {
	// The default type shown (limited to the listed types)
	DefaultType string `json:"default_type"`
	// Allows drawing the signature
	Draw *bool `json:"draw,omitempty"`
	// Allows using a smartphone to email the signature
	Phone *bool `json:"phone,omitempty"`
	// Allows typing the signature
	Type *bool `json:"type,omitempty"`
	// Allows uploading the signature
	Upload *bool `json:"upload,omitempty"`
}

type _SubSigningOptions SubSigningOptions

// NewSubSigningOptions instantiates a new SubSigningOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubSigningOptions(defaultType string) *SubSigningOptions {
	this := SubSigningOptions{}
	this.DefaultType = defaultType
	var draw bool = false
	this.Draw = &draw
	var phone bool = false
	this.Phone = &phone
	var type_ bool = false
	this.Type = &type_
	var upload bool = false
	this.Upload = &upload
	return &this
}

// NewSubSigningOptionsWithDefaults instantiates a new SubSigningOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubSigningOptionsWithDefaults() *SubSigningOptions {
	this := SubSigningOptions{}
	var draw bool = false
	this.Draw = &draw
	var phone bool = false
	this.Phone = &phone
	var type_ bool = false
	this.Type = &type_
	var upload bool = false
	this.Upload = &upload
	return &this
}

// GetDefaultType returns the DefaultType field value
func (o *SubSigningOptions) GetDefaultType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DefaultType
}

// GetDefaultTypeOk returns a tuple with the DefaultType field value
// and a boolean to check if the value has been set.
func (o *SubSigningOptions) GetDefaultTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultType, true
}

// SetDefaultType sets field value
func (o *SubSigningOptions) SetDefaultType(v string) {
	o.DefaultType = v
}

// GetDraw returns the Draw field value if set, zero value otherwise.
func (o *SubSigningOptions) GetDraw() bool {
	if o == nil || IsNil(o.Draw) {
		var ret bool
		return ret
	}
	return *o.Draw
}

// GetDrawOk returns a tuple with the Draw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubSigningOptions) GetDrawOk() (*bool, bool) {
	if o == nil || IsNil(o.Draw) {
		return nil, false
	}
	return o.Draw, true
}

// HasDraw returns a boolean if a field has been set.
func (o *SubSigningOptions) HasDraw() bool {
	if o != nil && !IsNil(o.Draw) {
		return true
	}

	return false
}

// SetDraw gets a reference to the given bool and assigns it to the Draw field.
func (o *SubSigningOptions) SetDraw(v bool) {
	o.Draw = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *SubSigningOptions) GetPhone() bool {
	if o == nil || IsNil(o.Phone) {
		var ret bool
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubSigningOptions) GetPhoneOk() (*bool, bool) {
	if o == nil || IsNil(o.Phone) {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *SubSigningOptions) HasPhone() bool {
	if o != nil && !IsNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given bool and assigns it to the Phone field.
func (o *SubSigningOptions) SetPhone(v bool) {
	o.Phone = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SubSigningOptions) GetType() bool {
	if o == nil || IsNil(o.Type) {
		var ret bool
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubSigningOptions) GetTypeOk() (*bool, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SubSigningOptions) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given bool and assigns it to the Type field.
func (o *SubSigningOptions) SetType(v bool) {
	o.Type = &v
}

// GetUpload returns the Upload field value if set, zero value otherwise.
func (o *SubSigningOptions) GetUpload() bool {
	if o == nil || IsNil(o.Upload) {
		var ret bool
		return ret
	}
	return *o.Upload
}

// GetUploadOk returns a tuple with the Upload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubSigningOptions) GetUploadOk() (*bool, bool) {
	if o == nil || IsNil(o.Upload) {
		return nil, false
	}
	return o.Upload, true
}

// HasUpload returns a boolean if a field has been set.
func (o *SubSigningOptions) HasUpload() bool {
	if o != nil && !IsNil(o.Upload) {
		return true
	}

	return false
}

// SetUpload gets a reference to the given bool and assigns it to the Upload field.
func (o *SubSigningOptions) SetUpload(v bool) {
	o.Upload = &v
}

func (o SubSigningOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubSigningOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["default_type"] = o.DefaultType
	if !IsNil(o.Draw) {
		toSerialize["draw"] = o.Draw
	}
	if !IsNil(o.Phone) {
		toSerialize["phone"] = o.Phone
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Upload) {
		toSerialize["upload"] = o.Upload
	}
	return toSerialize, nil
}

func (o *SubSigningOptions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"default_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubSigningOptions := _SubSigningOptions{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubSigningOptions)

	if err != nil {
		return err
	}

	*o = SubSigningOptions(varSubSigningOptions)

	return err
}

type NullableSubSigningOptions struct {
	value *SubSigningOptions
	isSet bool
}

func (v NullableSubSigningOptions) Get() *SubSigningOptions {
	return v.value
}

func (v *NullableSubSigningOptions) Set(val *SubSigningOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableSubSigningOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableSubSigningOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubSigningOptions(val *SubSigningOptions) *NullableSubSigningOptions {
	return &NullableSubSigningOptions{value: val, isSet: true}
}

func (v NullableSubSigningOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubSigningOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


