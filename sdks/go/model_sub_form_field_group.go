/*
Dropbox Sign API

Dropbox Sign v3 API

API version: 3.0.0
Contact: apisupport@hellosign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dropbox_sign

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SubFormFieldGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubFormFieldGroup{}

// SubFormFieldGroup struct for SubFormFieldGroup
type SubFormFieldGroup struct {
	// ID of group. Use this to reference a specific group from the `group` value in `form_fields_per_document`.
	GroupId string `json:"group_id"`
	// Name of the group
	GroupLabel string `json:"group_label"`
	// Examples: `require_0-1` `require_1` `require_1-ormore`  - Check out the list of [acceptable `requirement` checkbox type values](/api/reference/constants/#checkbox-field-grouping). - Check out the list of [acceptable `requirement` radio type fields](/api/reference/constants/#radio-field-grouping). - Radio groups require **at least** two fields per group.
	Requirement string `json:"requirement"`
}

type _SubFormFieldGroup SubFormFieldGroup

// NewSubFormFieldGroup instantiates a new SubFormFieldGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubFormFieldGroup(groupId string, groupLabel string, requirement string) *SubFormFieldGroup {
	this := SubFormFieldGroup{}
	this.GroupId = groupId
	this.GroupLabel = groupLabel
	this.Requirement = requirement
	return &this
}

// NewSubFormFieldGroupWithDefaults instantiates a new SubFormFieldGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubFormFieldGroupWithDefaults() *SubFormFieldGroup {
	this := SubFormFieldGroup{}
	return &this
}

// GetGroupId returns the GroupId field value
func (o *SubFormFieldGroup) GetGroupId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value
// and a boolean to check if the value has been set.
func (o *SubFormFieldGroup) GetGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupId, true
}

// SetGroupId sets field value
func (o *SubFormFieldGroup) SetGroupId(v string) {
	o.GroupId = v
}

// GetGroupLabel returns the GroupLabel field value
func (o *SubFormFieldGroup) GetGroupLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupLabel
}

// GetGroupLabelOk returns a tuple with the GroupLabel field value
// and a boolean to check if the value has been set.
func (o *SubFormFieldGroup) GetGroupLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupLabel, true
}

// SetGroupLabel sets field value
func (o *SubFormFieldGroup) SetGroupLabel(v string) {
	o.GroupLabel = v
}

// GetRequirement returns the Requirement field value
func (o *SubFormFieldGroup) GetRequirement() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Requirement
}

// GetRequirementOk returns a tuple with the Requirement field value
// and a boolean to check if the value has been set.
func (o *SubFormFieldGroup) GetRequirementOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Requirement, true
}

// SetRequirement sets field value
func (o *SubFormFieldGroup) SetRequirement(v string) {
	o.Requirement = v
}

func (o SubFormFieldGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubFormFieldGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["group_id"] = o.GroupId
	toSerialize["group_label"] = o.GroupLabel
	toSerialize["requirement"] = o.Requirement
	return toSerialize, nil
}

func (o *SubFormFieldGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"group_id",
		"group_label",
		"requirement",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubFormFieldGroup := _SubFormFieldGroup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubFormFieldGroup)

	if err != nil {
		return err
	}

	*o = SubFormFieldGroup(varSubFormFieldGroup)

	return err
}

type NullableSubFormFieldGroup struct {
	value *SubFormFieldGroup
	isSet bool
}

func (v NullableSubFormFieldGroup) Get() *SubFormFieldGroup {
	return v.value
}

func (v *NullableSubFormFieldGroup) Set(val *SubFormFieldGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableSubFormFieldGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableSubFormFieldGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubFormFieldGroup(val *SubFormFieldGroup) *NullableSubFormFieldGroup {
	return &NullableSubFormFieldGroup{value: val, isSet: true}
}

func (v NullableSubFormFieldGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubFormFieldGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


