/*
Dropbox Sign API

Dropbox Sign v3 API

API version: 3.0.0
Contact: apisupport@hellosign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dropbox_sign

import (
	"encoding/json"
)

// checks if the AccountResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountResponse{}

// AccountResponse struct for AccountResponse
type AccountResponse struct {
	// The ID of the Account
	AccountId *string `json:"account_id,omitempty"`
	// The email address associated with the Account.
	EmailAddress *string `json:"email_address,omitempty"`
	// Returns `true` if the user has been locked out of their account by a team admin.
	IsLocked *bool `json:"is_locked,omitempty"`
	// Returns `true` if the user has a paid Dropbox Sign account.
	IsPaidHs *bool `json:"is_paid_hs,omitempty"`
	// Returns `true` if the user has a paid HelloFax account.
	IsPaidHf *bool `json:"is_paid_hf,omitempty"`
	Quotas *AccountResponseQuotas `json:"quotas,omitempty"`
	// The URL that Dropbox Sign events will `POST` to.
	CallbackUrl NullableString `json:"callback_url,omitempty"`
	// The membership role for the team.
	RoleCode NullableString `json:"role_code,omitempty"`
	// The id of the team account belongs to.
	TeamId NullableString `json:"team_id,omitempty"`
	// The locale used in this Account. Check out the list of [supported locales](/api/reference/constants/#supported-locales) to learn more about the possible values.
	Locale NullableString `json:"locale,omitempty"`
}

// NewAccountResponse instantiates a new AccountResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountResponse() *AccountResponse {
	this := AccountResponse{}
	return &this
}

// NewAccountResponseWithDefaults instantiates a new AccountResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountResponseWithDefaults() *AccountResponse {
	this := AccountResponse{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *AccountResponse) GetAccountId() string {
	if o == nil || IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountResponse) GetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *AccountResponse) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *AccountResponse) SetAccountId(v string) {
	o.AccountId = &v
}

// GetEmailAddress returns the EmailAddress field value if set, zero value otherwise.
func (o *AccountResponse) GetEmailAddress() string {
	if o == nil || IsNil(o.EmailAddress) {
		var ret string
		return ret
	}
	return *o.EmailAddress
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountResponse) GetEmailAddressOk() (*string, bool) {
	if o == nil || IsNil(o.EmailAddress) {
		return nil, false
	}
	return o.EmailAddress, true
}

// HasEmailAddress returns a boolean if a field has been set.
func (o *AccountResponse) HasEmailAddress() bool {
	if o != nil && !IsNil(o.EmailAddress) {
		return true
	}

	return false
}

// SetEmailAddress gets a reference to the given string and assigns it to the EmailAddress field.
func (o *AccountResponse) SetEmailAddress(v string) {
	o.EmailAddress = &v
}

// GetIsLocked returns the IsLocked field value if set, zero value otherwise.
func (o *AccountResponse) GetIsLocked() bool {
	if o == nil || IsNil(o.IsLocked) {
		var ret bool
		return ret
	}
	return *o.IsLocked
}

// GetIsLockedOk returns a tuple with the IsLocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountResponse) GetIsLockedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsLocked) {
		return nil, false
	}
	return o.IsLocked, true
}

// HasIsLocked returns a boolean if a field has been set.
func (o *AccountResponse) HasIsLocked() bool {
	if o != nil && !IsNil(o.IsLocked) {
		return true
	}

	return false
}

// SetIsLocked gets a reference to the given bool and assigns it to the IsLocked field.
func (o *AccountResponse) SetIsLocked(v bool) {
	o.IsLocked = &v
}

// GetIsPaidHs returns the IsPaidHs field value if set, zero value otherwise.
func (o *AccountResponse) GetIsPaidHs() bool {
	if o == nil || IsNil(o.IsPaidHs) {
		var ret bool
		return ret
	}
	return *o.IsPaidHs
}

// GetIsPaidHsOk returns a tuple with the IsPaidHs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountResponse) GetIsPaidHsOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPaidHs) {
		return nil, false
	}
	return o.IsPaidHs, true
}

// HasIsPaidHs returns a boolean if a field has been set.
func (o *AccountResponse) HasIsPaidHs() bool {
	if o != nil && !IsNil(o.IsPaidHs) {
		return true
	}

	return false
}

// SetIsPaidHs gets a reference to the given bool and assigns it to the IsPaidHs field.
func (o *AccountResponse) SetIsPaidHs(v bool) {
	o.IsPaidHs = &v
}

// GetIsPaidHf returns the IsPaidHf field value if set, zero value otherwise.
func (o *AccountResponse) GetIsPaidHf() bool {
	if o == nil || IsNil(o.IsPaidHf) {
		var ret bool
		return ret
	}
	return *o.IsPaidHf
}

// GetIsPaidHfOk returns a tuple with the IsPaidHf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountResponse) GetIsPaidHfOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPaidHf) {
		return nil, false
	}
	return o.IsPaidHf, true
}

// HasIsPaidHf returns a boolean if a field has been set.
func (o *AccountResponse) HasIsPaidHf() bool {
	if o != nil && !IsNil(o.IsPaidHf) {
		return true
	}

	return false
}

// SetIsPaidHf gets a reference to the given bool and assigns it to the IsPaidHf field.
func (o *AccountResponse) SetIsPaidHf(v bool) {
	o.IsPaidHf = &v
}

// GetQuotas returns the Quotas field value if set, zero value otherwise.
func (o *AccountResponse) GetQuotas() AccountResponseQuotas {
	if o == nil || IsNil(o.Quotas) {
		var ret AccountResponseQuotas
		return ret
	}
	return *o.Quotas
}

// GetQuotasOk returns a tuple with the Quotas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountResponse) GetQuotasOk() (*AccountResponseQuotas, bool) {
	if o == nil || IsNil(o.Quotas) {
		return nil, false
	}
	return o.Quotas, true
}

// HasQuotas returns a boolean if a field has been set.
func (o *AccountResponse) HasQuotas() bool {
	if o != nil && !IsNil(o.Quotas) {
		return true
	}

	return false
}

// SetQuotas gets a reference to the given AccountResponseQuotas and assigns it to the Quotas field.
func (o *AccountResponse) SetQuotas(v AccountResponseQuotas) {
	o.Quotas = &v
}

// GetCallbackUrl returns the CallbackUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountResponse) GetCallbackUrl() string {
	if o == nil || IsNil(o.CallbackUrl.Get()) {
		var ret string
		return ret
	}
	return *o.CallbackUrl.Get()
}

// GetCallbackUrlOk returns a tuple with the CallbackUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountResponse) GetCallbackUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CallbackUrl.Get(), o.CallbackUrl.IsSet()
}

// HasCallbackUrl returns a boolean if a field has been set.
func (o *AccountResponse) HasCallbackUrl() bool {
	if o != nil && o.CallbackUrl.IsSet() {
		return true
	}

	return false
}

// SetCallbackUrl gets a reference to the given NullableString and assigns it to the CallbackUrl field.
func (o *AccountResponse) SetCallbackUrl(v string) {
	o.CallbackUrl.Set(&v)
}
// SetCallbackUrlNil sets the value for CallbackUrl to be an explicit nil
func (o *AccountResponse) SetCallbackUrlNil() {
	o.CallbackUrl.Set(nil)
}

// UnsetCallbackUrl ensures that no value is present for CallbackUrl, not even an explicit nil
func (o *AccountResponse) UnsetCallbackUrl() {
	o.CallbackUrl.Unset()
}

// GetRoleCode returns the RoleCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountResponse) GetRoleCode() string {
	if o == nil || IsNil(o.RoleCode.Get()) {
		var ret string
		return ret
	}
	return *o.RoleCode.Get()
}

// GetRoleCodeOk returns a tuple with the RoleCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountResponse) GetRoleCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RoleCode.Get(), o.RoleCode.IsSet()
}

// HasRoleCode returns a boolean if a field has been set.
func (o *AccountResponse) HasRoleCode() bool {
	if o != nil && o.RoleCode.IsSet() {
		return true
	}

	return false
}

// SetRoleCode gets a reference to the given NullableString and assigns it to the RoleCode field.
func (o *AccountResponse) SetRoleCode(v string) {
	o.RoleCode.Set(&v)
}
// SetRoleCodeNil sets the value for RoleCode to be an explicit nil
func (o *AccountResponse) SetRoleCodeNil() {
	o.RoleCode.Set(nil)
}

// UnsetRoleCode ensures that no value is present for RoleCode, not even an explicit nil
func (o *AccountResponse) UnsetRoleCode() {
	o.RoleCode.Unset()
}

// GetTeamId returns the TeamId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountResponse) GetTeamId() string {
	if o == nil || IsNil(o.TeamId.Get()) {
		var ret string
		return ret
	}
	return *o.TeamId.Get()
}

// GetTeamIdOk returns a tuple with the TeamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountResponse) GetTeamIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TeamId.Get(), o.TeamId.IsSet()
}

// HasTeamId returns a boolean if a field has been set.
func (o *AccountResponse) HasTeamId() bool {
	if o != nil && o.TeamId.IsSet() {
		return true
	}

	return false
}

// SetTeamId gets a reference to the given NullableString and assigns it to the TeamId field.
func (o *AccountResponse) SetTeamId(v string) {
	o.TeamId.Set(&v)
}
// SetTeamIdNil sets the value for TeamId to be an explicit nil
func (o *AccountResponse) SetTeamIdNil() {
	o.TeamId.Set(nil)
}

// UnsetTeamId ensures that no value is present for TeamId, not even an explicit nil
func (o *AccountResponse) UnsetTeamId() {
	o.TeamId.Unset()
}

// GetLocale returns the Locale field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountResponse) GetLocale() string {
	if o == nil || IsNil(o.Locale.Get()) {
		var ret string
		return ret
	}
	return *o.Locale.Get()
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountResponse) GetLocaleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Locale.Get(), o.Locale.IsSet()
}

// HasLocale returns a boolean if a field has been set.
func (o *AccountResponse) HasLocale() bool {
	if o != nil && o.Locale.IsSet() {
		return true
	}

	return false
}

// SetLocale gets a reference to the given NullableString and assigns it to the Locale field.
func (o *AccountResponse) SetLocale(v string) {
	o.Locale.Set(&v)
}
// SetLocaleNil sets the value for Locale to be an explicit nil
func (o *AccountResponse) SetLocaleNil() {
	o.Locale.Set(nil)
}

// UnsetLocale ensures that no value is present for Locale, not even an explicit nil
func (o *AccountResponse) UnsetLocale() {
	o.Locale.Unset()
}

func (o AccountResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountId) {
		toSerialize["account_id"] = o.AccountId
	}
	if !IsNil(o.EmailAddress) {
		toSerialize["email_address"] = o.EmailAddress
	}
	if !IsNil(o.IsLocked) {
		toSerialize["is_locked"] = o.IsLocked
	}
	if !IsNil(o.IsPaidHs) {
		toSerialize["is_paid_hs"] = o.IsPaidHs
	}
	if !IsNil(o.IsPaidHf) {
		toSerialize["is_paid_hf"] = o.IsPaidHf
	}
	if !IsNil(o.Quotas) {
		toSerialize["quotas"] = o.Quotas
	}
	if o.CallbackUrl.IsSet() {
		toSerialize["callback_url"] = o.CallbackUrl.Get()
	}
	if o.RoleCode.IsSet() {
		toSerialize["role_code"] = o.RoleCode.Get()
	}
	if o.TeamId.IsSet() {
		toSerialize["team_id"] = o.TeamId.Get()
	}
	if o.Locale.IsSet() {
		toSerialize["locale"] = o.Locale.Get()
	}
	return toSerialize, nil
}

type NullableAccountResponse struct {
	value *AccountResponse
	isSet bool
}

func (v NullableAccountResponse) Get() *AccountResponse {
	return v.value
}

func (v *NullableAccountResponse) Set(val *AccountResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountResponse(val *AccountResponse) *NullableAccountResponse {
	return &NullableAccountResponse{value: val, isSet: true}
}

func (v NullableAccountResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


