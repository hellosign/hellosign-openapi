/*
Dropbox Sign API

Dropbox Sign v3 API

API version: 3.0.0
Contact: apisupport@hellosign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dropbox_sign

import (
	"encoding/json"
	"os"
	"bytes"
	"fmt"
)

// checks if the SignatureRequestSendWithTemplateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SignatureRequestSendWithTemplateRequest{}

// SignatureRequestSendWithTemplateRequest 
type SignatureRequestSendWithTemplateRequest struct {
	// Use `template_ids` to create a SignatureRequest from one or more templates, in the order in which the template will be used.
	TemplateIds []string `json:"template_ids"`
	// Allows signers to decline to sign a document if `true`. Defaults to `false`.
	AllowDecline *bool `json:"allow_decline,omitempty"`
	// Add CC email recipients. Required when a CC role exists for the Template.
	Ccs []SubCC `json:"ccs,omitempty"`
	// Client id of the app to associate with the signature request. Used to apply the branding and callback url defined for the app.
	ClientId *string `json:"client_id,omitempty"`
	// An array defining values and options for custom fields. Required when a custom field exists in the Template.
	CustomFields []SubCustomField `json:"custom_fields,omitempty"`
	// Use `files[]` to indicate the uploaded file(s) to send for signature.  This endpoint requires either **files** or **file_urls[]**, but not both.
	Files []*os.File `json:"files,omitempty"`
	// Use `file_urls[]` to have Dropbox Sign download the file(s) to send for signature.  This endpoint requires either **files** or **file_urls[]**, but not both.
	FileUrls []string `json:"file_urls,omitempty"`
	// Send with a value of `true` if you wish to enable [Qualified Electronic Signatures](https://www.hellosign.com/features/qualified-electronic-signatures) (QES), which requires a face-to-face call to verify the signer's identity.<br> **Note**: QES is only available on the Premium API plan as an add-on purchase. Cannot be used in `test_mode`. Only works on requests with one signer.
	// Deprecated
	IsQualifiedSignature *bool `json:"is_qualified_signature,omitempty"`
	// Send with a value of `true` if you wish to enable [electronic identification (eID)](https://www.hellosign.com/features/electronic-id), which requires the signer to verify their identity with an eID provider to sign a document.<br> **Note**: eID is only available on the Premium API plan. Cannot be used in `test_mode`. Only works on requests with one signer.
	IsEid *bool `json:"is_eid,omitempty"`
	// The custom message in the email that will be sent to the signers.
	Message *string `json:"message,omitempty"`
	// Key-value data that should be attached to the signature request. This metadata is included in all API responses and events involving the signature request. For example, use the metadata field to store a signer's order number for look up when receiving events for the signature request.  Each request can include up to 10 metadata keys (or 50 nested metadata keys), with key names up to 40 characters long and values up to 1000 characters long.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Add Signers to your Templated-based Signature Request.
	Signers []SubSignatureRequestTemplateSigner `json:"signers"`
	SigningOptions *SubSigningOptions `json:"signing_options,omitempty"`
	// The URL you want signers redirected to after they successfully sign.
	SigningRedirectUrl *string `json:"signing_redirect_url,omitempty"`
	// The subject in the email that will be sent to the signers.
	Subject *string `json:"subject,omitempty"`
	// Whether this is a test, the signature request will not be legally binding if set to `true`. Defaults to `false`.
	TestMode *bool `json:"test_mode,omitempty"`
	// The title you want to assign to the SignatureRequest.
	Title *string `json:"title,omitempty"`
}

type _SignatureRequestSendWithTemplateRequest SignatureRequestSendWithTemplateRequest

// NewSignatureRequestSendWithTemplateRequest instantiates a new SignatureRequestSendWithTemplateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignatureRequestSendWithTemplateRequest(templateIds []string, signers []SubSignatureRequestTemplateSigner) *SignatureRequestSendWithTemplateRequest {
	this := SignatureRequestSendWithTemplateRequest{}
	this.TemplateIds = templateIds
	var allowDecline bool = false
	this.AllowDecline = &allowDecline
	var isQualifiedSignature bool = false
	this.IsQualifiedSignature = &isQualifiedSignature
	var isEid bool = false
	this.IsEid = &isEid
	this.Signers = signers
	var testMode bool = false
	this.TestMode = &testMode
	return &this
}

// NewSignatureRequestSendWithTemplateRequestWithDefaults instantiates a new SignatureRequestSendWithTemplateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignatureRequestSendWithTemplateRequestWithDefaults() *SignatureRequestSendWithTemplateRequest {
	this := SignatureRequestSendWithTemplateRequest{}
	var allowDecline bool = false
	this.AllowDecline = &allowDecline
	var isQualifiedSignature bool = false
	this.IsQualifiedSignature = &isQualifiedSignature
	var isEid bool = false
	this.IsEid = &isEid
	var testMode bool = false
	this.TestMode = &testMode
	return &this
}

// GetTemplateIds returns the TemplateIds field value
func (o *SignatureRequestSendWithTemplateRequest) GetTemplateIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.TemplateIds
}

// GetTemplateIdsOk returns a tuple with the TemplateIds field value
// and a boolean to check if the value has been set.
func (o *SignatureRequestSendWithTemplateRequest) GetTemplateIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TemplateIds, true
}

// SetTemplateIds sets field value
func (o *SignatureRequestSendWithTemplateRequest) SetTemplateIds(v []string) {
	o.TemplateIds = v
}

// GetAllowDecline returns the AllowDecline field value if set, zero value otherwise.
func (o *SignatureRequestSendWithTemplateRequest) GetAllowDecline() bool {
	if o == nil || IsNil(o.AllowDecline) {
		var ret bool
		return ret
	}
	return *o.AllowDecline
}

// GetAllowDeclineOk returns a tuple with the AllowDecline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignatureRequestSendWithTemplateRequest) GetAllowDeclineOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowDecline) {
		return nil, false
	}
	return o.AllowDecline, true
}

// HasAllowDecline returns a boolean if a field has been set.
func (o *SignatureRequestSendWithTemplateRequest) HasAllowDecline() bool {
	if o != nil && !IsNil(o.AllowDecline) {
		return true
	}

	return false
}

// SetAllowDecline gets a reference to the given bool and assigns it to the AllowDecline field.
func (o *SignatureRequestSendWithTemplateRequest) SetAllowDecline(v bool) {
	o.AllowDecline = &v
}

// GetCcs returns the Ccs field value if set, zero value otherwise.
func (o *SignatureRequestSendWithTemplateRequest) GetCcs() []SubCC {
	if o == nil || IsNil(o.Ccs) {
		var ret []SubCC
		return ret
	}
	return o.Ccs
}

// GetCcsOk returns a tuple with the Ccs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignatureRequestSendWithTemplateRequest) GetCcsOk() ([]SubCC, bool) {
	if o == nil || IsNil(o.Ccs) {
		return nil, false
	}
	return o.Ccs, true
}

// HasCcs returns a boolean if a field has been set.
func (o *SignatureRequestSendWithTemplateRequest) HasCcs() bool {
	if o != nil && !IsNil(o.Ccs) {
		return true
	}

	return false
}

// SetCcs gets a reference to the given []SubCC and assigns it to the Ccs field.
func (o *SignatureRequestSendWithTemplateRequest) SetCcs(v []SubCC) {
	o.Ccs = v
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *SignatureRequestSendWithTemplateRequest) GetClientId() string {
	if o == nil || IsNil(o.ClientId) {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignatureRequestSendWithTemplateRequest) GetClientIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClientId) {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *SignatureRequestSendWithTemplateRequest) HasClientId() bool {
	if o != nil && !IsNil(o.ClientId) {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *SignatureRequestSendWithTemplateRequest) SetClientId(v string) {
	o.ClientId = &v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *SignatureRequestSendWithTemplateRequest) GetCustomFields() []SubCustomField {
	if o == nil || IsNil(o.CustomFields) {
		var ret []SubCustomField
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignatureRequestSendWithTemplateRequest) GetCustomFieldsOk() ([]SubCustomField, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *SignatureRequestSendWithTemplateRequest) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given []SubCustomField and assigns it to the CustomFields field.
func (o *SignatureRequestSendWithTemplateRequest) SetCustomFields(v []SubCustomField) {
	o.CustomFields = v
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *SignatureRequestSendWithTemplateRequest) GetFiles() []*os.File {
	if o == nil || IsNil(o.Files) {
		var ret []*os.File
		return ret
	}
	return o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignatureRequestSendWithTemplateRequest) GetFilesOk() ([]*os.File, bool) {
	if o == nil || IsNil(o.Files) {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *SignatureRequestSendWithTemplateRequest) HasFiles() bool {
	if o != nil && !IsNil(o.Files) {
		return true
	}

	return false
}

// SetFiles gets a reference to the given []*os.File and assigns it to the Files field.
func (o *SignatureRequestSendWithTemplateRequest) SetFiles(v []*os.File) {
	o.Files = v
}

// GetFileUrls returns the FileUrls field value if set, zero value otherwise.
func (o *SignatureRequestSendWithTemplateRequest) GetFileUrls() []string {
	if o == nil || IsNil(o.FileUrls) {
		var ret []string
		return ret
	}
	return o.FileUrls
}

// GetFileUrlsOk returns a tuple with the FileUrls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignatureRequestSendWithTemplateRequest) GetFileUrlsOk() ([]string, bool) {
	if o == nil || IsNil(o.FileUrls) {
		return nil, false
	}
	return o.FileUrls, true
}

// HasFileUrls returns a boolean if a field has been set.
func (o *SignatureRequestSendWithTemplateRequest) HasFileUrls() bool {
	if o != nil && !IsNil(o.FileUrls) {
		return true
	}

	return false
}

// SetFileUrls gets a reference to the given []string and assigns it to the FileUrls field.
func (o *SignatureRequestSendWithTemplateRequest) SetFileUrls(v []string) {
	o.FileUrls = v
}

// GetIsQualifiedSignature returns the IsQualifiedSignature field value if set, zero value otherwise.
// Deprecated
func (o *SignatureRequestSendWithTemplateRequest) GetIsQualifiedSignature() bool {
	if o == nil || IsNil(o.IsQualifiedSignature) {
		var ret bool
		return ret
	}
	return *o.IsQualifiedSignature
}

// GetIsQualifiedSignatureOk returns a tuple with the IsQualifiedSignature field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *SignatureRequestSendWithTemplateRequest) GetIsQualifiedSignatureOk() (*bool, bool) {
	if o == nil || IsNil(o.IsQualifiedSignature) {
		return nil, false
	}
	return o.IsQualifiedSignature, true
}

// HasIsQualifiedSignature returns a boolean if a field has been set.
func (o *SignatureRequestSendWithTemplateRequest) HasIsQualifiedSignature() bool {
	if o != nil && !IsNil(o.IsQualifiedSignature) {
		return true
	}

	return false
}

// SetIsQualifiedSignature gets a reference to the given bool and assigns it to the IsQualifiedSignature field.
// Deprecated
func (o *SignatureRequestSendWithTemplateRequest) SetIsQualifiedSignature(v bool) {
	o.IsQualifiedSignature = &v
}

// GetIsEid returns the IsEid field value if set, zero value otherwise.
func (o *SignatureRequestSendWithTemplateRequest) GetIsEid() bool {
	if o == nil || IsNil(o.IsEid) {
		var ret bool
		return ret
	}
	return *o.IsEid
}

// GetIsEidOk returns a tuple with the IsEid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignatureRequestSendWithTemplateRequest) GetIsEidOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEid) {
		return nil, false
	}
	return o.IsEid, true
}

// HasIsEid returns a boolean if a field has been set.
func (o *SignatureRequestSendWithTemplateRequest) HasIsEid() bool {
	if o != nil && !IsNil(o.IsEid) {
		return true
	}

	return false
}

// SetIsEid gets a reference to the given bool and assigns it to the IsEid field.
func (o *SignatureRequestSendWithTemplateRequest) SetIsEid(v bool) {
	o.IsEid = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *SignatureRequestSendWithTemplateRequest) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignatureRequestSendWithTemplateRequest) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *SignatureRequestSendWithTemplateRequest) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *SignatureRequestSendWithTemplateRequest) SetMessage(v string) {
	o.Message = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *SignatureRequestSendWithTemplateRequest) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignatureRequestSendWithTemplateRequest) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *SignatureRequestSendWithTemplateRequest) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *SignatureRequestSendWithTemplateRequest) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetSigners returns the Signers field value
func (o *SignatureRequestSendWithTemplateRequest) GetSigners() []SubSignatureRequestTemplateSigner {
	if o == nil {
		var ret []SubSignatureRequestTemplateSigner
		return ret
	}

	return o.Signers
}

// GetSignersOk returns a tuple with the Signers field value
// and a boolean to check if the value has been set.
func (o *SignatureRequestSendWithTemplateRequest) GetSignersOk() ([]SubSignatureRequestTemplateSigner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Signers, true
}

// SetSigners sets field value
func (o *SignatureRequestSendWithTemplateRequest) SetSigners(v []SubSignatureRequestTemplateSigner) {
	o.Signers = v
}

// GetSigningOptions returns the SigningOptions field value if set, zero value otherwise.
func (o *SignatureRequestSendWithTemplateRequest) GetSigningOptions() SubSigningOptions {
	if o == nil || IsNil(o.SigningOptions) {
		var ret SubSigningOptions
		return ret
	}
	return *o.SigningOptions
}

// GetSigningOptionsOk returns a tuple with the SigningOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignatureRequestSendWithTemplateRequest) GetSigningOptionsOk() (*SubSigningOptions, bool) {
	if o == nil || IsNil(o.SigningOptions) {
		return nil, false
	}
	return o.SigningOptions, true
}

// HasSigningOptions returns a boolean if a field has been set.
func (o *SignatureRequestSendWithTemplateRequest) HasSigningOptions() bool {
	if o != nil && !IsNil(o.SigningOptions) {
		return true
	}

	return false
}

// SetSigningOptions gets a reference to the given SubSigningOptions and assigns it to the SigningOptions field.
func (o *SignatureRequestSendWithTemplateRequest) SetSigningOptions(v SubSigningOptions) {
	o.SigningOptions = &v
}

// GetSigningRedirectUrl returns the SigningRedirectUrl field value if set, zero value otherwise.
func (o *SignatureRequestSendWithTemplateRequest) GetSigningRedirectUrl() string {
	if o == nil || IsNil(o.SigningRedirectUrl) {
		var ret string
		return ret
	}
	return *o.SigningRedirectUrl
}

// GetSigningRedirectUrlOk returns a tuple with the SigningRedirectUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignatureRequestSendWithTemplateRequest) GetSigningRedirectUrlOk() (*string, bool) {
	if o == nil || IsNil(o.SigningRedirectUrl) {
		return nil, false
	}
	return o.SigningRedirectUrl, true
}

// HasSigningRedirectUrl returns a boolean if a field has been set.
func (o *SignatureRequestSendWithTemplateRequest) HasSigningRedirectUrl() bool {
	if o != nil && !IsNil(o.SigningRedirectUrl) {
		return true
	}

	return false
}

// SetSigningRedirectUrl gets a reference to the given string and assigns it to the SigningRedirectUrl field.
func (o *SignatureRequestSendWithTemplateRequest) SetSigningRedirectUrl(v string) {
	o.SigningRedirectUrl = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *SignatureRequestSendWithTemplateRequest) GetSubject() string {
	if o == nil || IsNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignatureRequestSendWithTemplateRequest) GetSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *SignatureRequestSendWithTemplateRequest) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *SignatureRequestSendWithTemplateRequest) SetSubject(v string) {
	o.Subject = &v
}

// GetTestMode returns the TestMode field value if set, zero value otherwise.
func (o *SignatureRequestSendWithTemplateRequest) GetTestMode() bool {
	if o == nil || IsNil(o.TestMode) {
		var ret bool
		return ret
	}
	return *o.TestMode
}

// GetTestModeOk returns a tuple with the TestMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignatureRequestSendWithTemplateRequest) GetTestModeOk() (*bool, bool) {
	if o == nil || IsNil(o.TestMode) {
		return nil, false
	}
	return o.TestMode, true
}

// HasTestMode returns a boolean if a field has been set.
func (o *SignatureRequestSendWithTemplateRequest) HasTestMode() bool {
	if o != nil && !IsNil(o.TestMode) {
		return true
	}

	return false
}

// SetTestMode gets a reference to the given bool and assigns it to the TestMode field.
func (o *SignatureRequestSendWithTemplateRequest) SetTestMode(v bool) {
	o.TestMode = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *SignatureRequestSendWithTemplateRequest) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignatureRequestSendWithTemplateRequest) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *SignatureRequestSendWithTemplateRequest) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *SignatureRequestSendWithTemplateRequest) SetTitle(v string) {
	o.Title = &v
}

func (o SignatureRequestSendWithTemplateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SignatureRequestSendWithTemplateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["template_ids"] = o.TemplateIds
	if !IsNil(o.AllowDecline) {
		toSerialize["allow_decline"] = o.AllowDecline
	}
	if !IsNil(o.Ccs) {
		toSerialize["ccs"] = o.Ccs
	}
	if !IsNil(o.ClientId) {
		toSerialize["client_id"] = o.ClientId
	}
	if !IsNil(o.CustomFields) {
		toSerialize["custom_fields"] = o.CustomFields
	}
	if !IsNil(o.Files) {
		toSerialize["files"] = o.Files
	}
	if !IsNil(o.FileUrls) {
		toSerialize["file_urls"] = o.FileUrls
	}
	if !IsNil(o.IsQualifiedSignature) {
		toSerialize["is_qualified_signature"] = o.IsQualifiedSignature
	}
	if !IsNil(o.IsEid) {
		toSerialize["is_eid"] = o.IsEid
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	toSerialize["signers"] = o.Signers
	if !IsNil(o.SigningOptions) {
		toSerialize["signing_options"] = o.SigningOptions
	}
	if !IsNil(o.SigningRedirectUrl) {
		toSerialize["signing_redirect_url"] = o.SigningRedirectUrl
	}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.TestMode) {
		toSerialize["test_mode"] = o.TestMode
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	return toSerialize, nil
}

func (o *SignatureRequestSendWithTemplateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"template_ids",
		"signers",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSignatureRequestSendWithTemplateRequest := _SignatureRequestSendWithTemplateRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSignatureRequestSendWithTemplateRequest)

	if err != nil {
		return err
	}

	*o = SignatureRequestSendWithTemplateRequest(varSignatureRequestSendWithTemplateRequest)

	return err
}

type NullableSignatureRequestSendWithTemplateRequest struct {
	value *SignatureRequestSendWithTemplateRequest
	isSet bool
}

func (v NullableSignatureRequestSendWithTemplateRequest) Get() *SignatureRequestSendWithTemplateRequest {
	return v.value
}

func (v *NullableSignatureRequestSendWithTemplateRequest) Set(val *SignatureRequestSendWithTemplateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSignatureRequestSendWithTemplateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSignatureRequestSendWithTemplateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignatureRequestSendWithTemplateRequest(val *SignatureRequestSendWithTemplateRequest) *NullableSignatureRequestSendWithTemplateRequest {
	return &NullableSignatureRequestSendWithTemplateRequest{value: val, isSet: true}
}

func (v NullableSignatureRequestSendWithTemplateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignatureRequestSendWithTemplateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


