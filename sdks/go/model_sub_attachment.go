/*
Dropbox Sign API

Dropbox Sign v3 API

API version: 3.0.0
Contact: apisupport@hellosign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dropbox_sign

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SubAttachment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubAttachment{}

// SubAttachment struct for SubAttachment
type SubAttachment struct {
	// The instructions for uploading the attachment.
	Instructions *string `json:"instructions,omitempty"`
	// The name of attachment.
	Name string `json:"name"`
	// Determines if the attachment must be uploaded.
	Required *bool `json:"required,omitempty"`
	// The signer's index in the `signers` parameter (0-based indexing).  **NOTE**: Only one signer can be assigned per attachment.
	SignerIndex int32 `json:"signer_index"`
}

type _SubAttachment SubAttachment

// NewSubAttachment instantiates a new SubAttachment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubAttachment(name string, signerIndex int32) *SubAttachment {
	this := SubAttachment{}
	this.Name = name
	var required bool = false
	this.Required = &required
	this.SignerIndex = signerIndex
	return &this
}

// NewSubAttachmentWithDefaults instantiates a new SubAttachment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubAttachmentWithDefaults() *SubAttachment {
	this := SubAttachment{}
	var required bool = false
	this.Required = &required
	return &this
}

// GetInstructions returns the Instructions field value if set, zero value otherwise.
func (o *SubAttachment) GetInstructions() string {
	if o == nil || IsNil(o.Instructions) {
		var ret string
		return ret
	}
	return *o.Instructions
}

// GetInstructionsOk returns a tuple with the Instructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubAttachment) GetInstructionsOk() (*string, bool) {
	if o == nil || IsNil(o.Instructions) {
		return nil, false
	}
	return o.Instructions, true
}

// HasInstructions returns a boolean if a field has been set.
func (o *SubAttachment) HasInstructions() bool {
	if o != nil && !IsNil(o.Instructions) {
		return true
	}

	return false
}

// SetInstructions gets a reference to the given string and assigns it to the Instructions field.
func (o *SubAttachment) SetInstructions(v string) {
	o.Instructions = &v
}

// GetName returns the Name field value
func (o *SubAttachment) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SubAttachment) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SubAttachment) SetName(v string) {
	o.Name = v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *SubAttachment) GetRequired() bool {
	if o == nil || IsNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubAttachment) GetRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *SubAttachment) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *SubAttachment) SetRequired(v bool) {
	o.Required = &v
}

// GetSignerIndex returns the SignerIndex field value
func (o *SubAttachment) GetSignerIndex() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SignerIndex
}

// GetSignerIndexOk returns a tuple with the SignerIndex field value
// and a boolean to check if the value has been set.
func (o *SubAttachment) GetSignerIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SignerIndex, true
}

// SetSignerIndex sets field value
func (o *SubAttachment) SetSignerIndex(v int32) {
	o.SignerIndex = v
}

func (o SubAttachment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubAttachment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Instructions) {
		toSerialize["instructions"] = o.Instructions
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	toSerialize["signer_index"] = o.SignerIndex
	return toSerialize, nil
}

func (o *SubAttachment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"signer_index",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubAttachment := _SubAttachment{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubAttachment)

	if err != nil {
		return err
	}

	*o = SubAttachment(varSubAttachment)

	return err
}

type NullableSubAttachment struct {
	value *SubAttachment
	isSet bool
}

func (v NullableSubAttachment) Get() *SubAttachment {
	return v.value
}

func (v *NullableSubAttachment) Set(val *SubAttachment) {
	v.value = val
	v.isSet = true
}

func (v NullableSubAttachment) IsSet() bool {
	return v.isSet
}

func (v *NullableSubAttachment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubAttachment(val *SubAttachment) *NullableSubAttachment {
	return &NullableSubAttachment{value: val, isSet: true}
}

func (v NullableSubAttachment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubAttachment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


