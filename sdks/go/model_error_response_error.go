/*
Dropbox Sign API

Dropbox Sign v3 API

API version: 3.0.0
Contact: apisupport@hellosign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dropbox_sign

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ErrorResponseError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorResponseError{}

// ErrorResponseError Contains information about an error that occurred.
type ErrorResponseError struct {
	// Message describing an error.
	ErrorMsg string `json:"error_msg"`
	// Path at which an error occurred.
	ErrorPath *string `json:"error_path,omitempty"`
	// Name of the error.
	ErrorName string `json:"error_name"`
}

type _ErrorResponseError ErrorResponseError

// NewErrorResponseError instantiates a new ErrorResponseError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorResponseError(errorMsg string, errorName string) *ErrorResponseError {
	this := ErrorResponseError{}
	this.ErrorMsg = errorMsg
	this.ErrorName = errorName
	return &this
}

// NewErrorResponseErrorWithDefaults instantiates a new ErrorResponseError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorResponseErrorWithDefaults() *ErrorResponseError {
	this := ErrorResponseError{}
	return &this
}

// GetErrorMsg returns the ErrorMsg field value
func (o *ErrorResponseError) GetErrorMsg() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ErrorMsg
}

// GetErrorMsgOk returns a tuple with the ErrorMsg field value
// and a boolean to check if the value has been set.
func (o *ErrorResponseError) GetErrorMsgOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorMsg, true
}

// SetErrorMsg sets field value
func (o *ErrorResponseError) SetErrorMsg(v string) {
	o.ErrorMsg = v
}

// GetErrorPath returns the ErrorPath field value if set, zero value otherwise.
func (o *ErrorResponseError) GetErrorPath() string {
	if o == nil || IsNil(o.ErrorPath) {
		var ret string
		return ret
	}
	return *o.ErrorPath
}

// GetErrorPathOk returns a tuple with the ErrorPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorResponseError) GetErrorPathOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorPath) {
		return nil, false
	}
	return o.ErrorPath, true
}

// HasErrorPath returns a boolean if a field has been set.
func (o *ErrorResponseError) HasErrorPath() bool {
	if o != nil && !IsNil(o.ErrorPath) {
		return true
	}

	return false
}

// SetErrorPath gets a reference to the given string and assigns it to the ErrorPath field.
func (o *ErrorResponseError) SetErrorPath(v string) {
	o.ErrorPath = &v
}

// GetErrorName returns the ErrorName field value
func (o *ErrorResponseError) GetErrorName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ErrorName
}

// GetErrorNameOk returns a tuple with the ErrorName field value
// and a boolean to check if the value has been set.
func (o *ErrorResponseError) GetErrorNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorName, true
}

// SetErrorName sets field value
func (o *ErrorResponseError) SetErrorName(v string) {
	o.ErrorName = v
}

func (o ErrorResponseError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorResponseError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["error_msg"] = o.ErrorMsg
	if !IsNil(o.ErrorPath) {
		toSerialize["error_path"] = o.ErrorPath
	}
	toSerialize["error_name"] = o.ErrorName
	return toSerialize, nil
}

func (o *ErrorResponseError) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"error_msg",
		"error_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varErrorResponseError := _ErrorResponseError{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varErrorResponseError)

	if err != nil {
		return err
	}

	*o = ErrorResponseError(varErrorResponseError)

	return err
}

type NullableErrorResponseError struct {
	value *ErrorResponseError
	isSet bool
}

func (v NullableErrorResponseError) Get() *ErrorResponseError {
	return v.value
}

func (v *NullableErrorResponseError) Set(val *ErrorResponseError) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorResponseError) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorResponseError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorResponseError(val *ErrorResponseError) *NullableErrorResponseError {
	return &NullableErrorResponseError{value: val, isSet: true}
}

func (v NullableErrorResponseError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorResponseError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


