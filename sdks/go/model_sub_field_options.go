/*
Dropbox Sign API

Dropbox Sign v3 API

API version: 3.0.0
Contact: apisupport@hellosign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dropbox_sign

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SubFieldOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubFieldOptions{}

// SubFieldOptions This allows the requester to specify field options for a signature request.
type SubFieldOptions struct {
	// Allows requester to specify the date format (see list of allowed [formats](/api/reference/constants/#date-formats))  **Note**: Only available for Premium and higher.
	DateFormat string `json:"date_format"`
}

type _SubFieldOptions SubFieldOptions

// NewSubFieldOptions instantiates a new SubFieldOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubFieldOptions(dateFormat string) *SubFieldOptions {
	this := SubFieldOptions{}
	this.DateFormat = dateFormat
	return &this
}

// NewSubFieldOptionsWithDefaults instantiates a new SubFieldOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubFieldOptionsWithDefaults() *SubFieldOptions {
	this := SubFieldOptions{}
	return &this
}

// GetDateFormat returns the DateFormat field value
func (o *SubFieldOptions) GetDateFormat() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DateFormat
}

// GetDateFormatOk returns a tuple with the DateFormat field value
// and a boolean to check if the value has been set.
func (o *SubFieldOptions) GetDateFormatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DateFormat, true
}

// SetDateFormat sets field value
func (o *SubFieldOptions) SetDateFormat(v string) {
	o.DateFormat = v
}

func (o SubFieldOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubFieldOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["date_format"] = o.DateFormat
	return toSerialize, nil
}

func (o *SubFieldOptions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"date_format",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubFieldOptions := _SubFieldOptions{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubFieldOptions)

	if err != nil {
		return err
	}

	*o = SubFieldOptions(varSubFieldOptions)

	return err
}

type NullableSubFieldOptions struct {
	value *SubFieldOptions
	isSet bool
}

func (v NullableSubFieldOptions) Get() *SubFieldOptions {
	return v.value
}

func (v *NullableSubFieldOptions) Set(val *SubFieldOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableSubFieldOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableSubFieldOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubFieldOptions(val *SubFieldOptions) *NullableSubFieldOptions {
	return &NullableSubFieldOptions{value: val, isSet: true}
}

func (v NullableSubFieldOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubFieldOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


