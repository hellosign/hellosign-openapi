/*
Dropbox Sign API

Dropbox Sign v3 API

API version: 3.0.0
Contact: apisupport@hellosign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dropbox_sign

import (
	"encoding/json"
)

// checks if the SubTemplateRole type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubTemplateRole{}

// SubTemplateRole struct for SubTemplateRole
type SubTemplateRole struct {
	// The role name of the signer that will be displayed when the template is used to create a signature request.
	Name *string `json:"name,omitempty"`
	// The order in which this signer role is required to sign.
	Order NullableInt32 `json:"order,omitempty"`
}

// NewSubTemplateRole instantiates a new SubTemplateRole object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubTemplateRole() *SubTemplateRole {
	this := SubTemplateRole{}
	return &this
}

// NewSubTemplateRoleWithDefaults instantiates a new SubTemplateRole object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubTemplateRoleWithDefaults() *SubTemplateRole {
	this := SubTemplateRole{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SubTemplateRole) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubTemplateRole) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SubTemplateRole) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SubTemplateRole) SetName(v string) {
	o.Name = &v
}

// GetOrder returns the Order field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubTemplateRole) GetOrder() int32 {
	if o == nil || IsNil(o.Order.Get()) {
		var ret int32
		return ret
	}
	return *o.Order.Get()
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubTemplateRole) GetOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Order.Get(), o.Order.IsSet()
}

// HasOrder returns a boolean if a field has been set.
func (o *SubTemplateRole) HasOrder() bool {
	if o != nil && o.Order.IsSet() {
		return true
	}

	return false
}

// SetOrder gets a reference to the given NullableInt32 and assigns it to the Order field.
func (o *SubTemplateRole) SetOrder(v int32) {
	o.Order.Set(&v)
}
// SetOrderNil sets the value for Order to be an explicit nil
func (o *SubTemplateRole) SetOrderNil() {
	o.Order.Set(nil)
}

// UnsetOrder ensures that no value is present for Order, not even an explicit nil
func (o *SubTemplateRole) UnsetOrder() {
	o.Order.Unset()
}

func (o SubTemplateRole) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubTemplateRole) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.Order.IsSet() {
		toSerialize["order"] = o.Order.Get()
	}
	return toSerialize, nil
}

type NullableSubTemplateRole struct {
	value *SubTemplateRole
	isSet bool
}

func (v NullableSubTemplateRole) Get() *SubTemplateRole {
	return v.value
}

func (v *NullableSubTemplateRole) Set(val *SubTemplateRole) {
	v.value = val
	v.isSet = true
}

func (v NullableSubTemplateRole) IsSet() bool {
	return v.isSet
}

func (v *NullableSubTemplateRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubTemplateRole(val *SubTemplateRole) *NullableSubTemplateRole {
	return &NullableSubTemplateRole{value: val, isSet: true}
}

func (v NullableSubTemplateRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubTemplateRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


