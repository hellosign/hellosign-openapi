/*
Dropbox Sign API

Testing SignatureRequestAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_SignatureRequestAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SignatureRequestAPIService SignatureRequestBulkCreateEmbeddedWithTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SignatureRequestAPI.SignatureRequestBulkCreateEmbeddedWithTemplate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SignatureRequestAPIService SignatureRequestBulkSendWithTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SignatureRequestAPI.SignatureRequestBulkSendWithTemplate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SignatureRequestAPIService SignatureRequestCancel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var signatureRequestId string

		httpRes, err := apiClient.SignatureRequestAPI.SignatureRequestCancel(context.Background(), signatureRequestId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SignatureRequestAPIService SignatureRequestCreateEmbedded", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SignatureRequestAPI.SignatureRequestCreateEmbedded(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SignatureRequestAPIService SignatureRequestCreateEmbeddedWithTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SignatureRequestAPI.SignatureRequestCreateEmbeddedWithTemplate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SignatureRequestAPIService SignatureRequestEdit", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var signatureRequestId string

		resp, httpRes, err := apiClient.SignatureRequestAPI.SignatureRequestEdit(context.Background(), signatureRequestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SignatureRequestAPIService SignatureRequestEditEmbedded", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var signatureRequestId string

		resp, httpRes, err := apiClient.SignatureRequestAPI.SignatureRequestEditEmbedded(context.Background(), signatureRequestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SignatureRequestAPIService SignatureRequestEditEmbeddedWithTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var signatureRequestId string

		resp, httpRes, err := apiClient.SignatureRequestAPI.SignatureRequestEditEmbeddedWithTemplate(context.Background(), signatureRequestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SignatureRequestAPIService SignatureRequestEditWithTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var signatureRequestId string

		resp, httpRes, err := apiClient.SignatureRequestAPI.SignatureRequestEditWithTemplate(context.Background(), signatureRequestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SignatureRequestAPIService SignatureRequestFiles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var signatureRequestId string

		resp, httpRes, err := apiClient.SignatureRequestAPI.SignatureRequestFiles(context.Background(), signatureRequestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SignatureRequestAPIService SignatureRequestFilesAsDataUri", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var signatureRequestId string

		resp, httpRes, err := apiClient.SignatureRequestAPI.SignatureRequestFilesAsDataUri(context.Background(), signatureRequestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SignatureRequestAPIService SignatureRequestFilesAsFileUrl", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var signatureRequestId string

		resp, httpRes, err := apiClient.SignatureRequestAPI.SignatureRequestFilesAsFileUrl(context.Background(), signatureRequestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SignatureRequestAPIService SignatureRequestGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var signatureRequestId string

		resp, httpRes, err := apiClient.SignatureRequestAPI.SignatureRequestGet(context.Background(), signatureRequestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SignatureRequestAPIService SignatureRequestList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SignatureRequestAPI.SignatureRequestList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SignatureRequestAPIService SignatureRequestReleaseHold", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var signatureRequestId string

		resp, httpRes, err := apiClient.SignatureRequestAPI.SignatureRequestReleaseHold(context.Background(), signatureRequestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SignatureRequestAPIService SignatureRequestRemind", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var signatureRequestId string

		resp, httpRes, err := apiClient.SignatureRequestAPI.SignatureRequestRemind(context.Background(), signatureRequestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SignatureRequestAPIService SignatureRequestRemove", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var signatureRequestId string

		httpRes, err := apiClient.SignatureRequestAPI.SignatureRequestRemove(context.Background(), signatureRequestId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SignatureRequestAPIService SignatureRequestSend", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SignatureRequestAPI.SignatureRequestSend(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SignatureRequestAPIService SignatureRequestSendWithTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SignatureRequestAPI.SignatureRequestSendWithTemplate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SignatureRequestAPIService SignatureRequestUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var signatureRequestId string

		resp, httpRes, err := apiClient.SignatureRequestAPI.SignatureRequestUpdate(context.Background(), signatureRequestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
