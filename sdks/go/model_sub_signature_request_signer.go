/*
Dropbox Sign API

Dropbox Sign v3 API

API version: 3.0.0
Contact: apisupport@hellosign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dropbox_sign

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SubSignatureRequestSigner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubSignatureRequestSigner{}

// SubSignatureRequestSigner struct for SubSignatureRequestSigner
type SubSignatureRequestSigner struct {
	// The name of the signer.
	Name string `json:"name"`
	// The email address of the signer.
	EmailAddress string `json:"email_address"`
	// The order the signer is required to sign in.
	Order NullableInt32 `json:"order,omitempty"`
	// The 4- to 12-character access code that will secure this signer's signature page.
	Pin *string `json:"pin,omitempty"`
	// An E.164 formatted phone number.  By using the feature, you agree you are responsible for obtaining a signer's consent to receive text messages from Dropbox Sign related to this signature request and confirm you have obtained such consent from all signers prior to enabling SMS delivery for this signature request. [Learn more](https://faq.hellosign.com/hc/en-us/articles/15815316468877-Dropbox-Sign-SMS-tools-add-on).  **Note**: Not available in test mode and requires a Standard plan or higher.
	SmsPhoneNumber *string `json:"sms_phone_number,omitempty"`
	// Specifies the feature used with the `sms_phone_number`. Default `authentication`.  If `authentication`, signer is sent a verification code via SMS that is required to access the document.  If `delivery`, a link to complete the signature request is delivered via SMS (_and_ email).
	SmsPhoneNumberType *string `json:"sms_phone_number_type,omitempty"`
}

type _SubSignatureRequestSigner SubSignatureRequestSigner

// NewSubSignatureRequestSigner instantiates a new SubSignatureRequestSigner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubSignatureRequestSigner(name string, emailAddress string) *SubSignatureRequestSigner {
	this := SubSignatureRequestSigner{}
	this.Name = name
	this.EmailAddress = emailAddress
	return &this
}

// NewSubSignatureRequestSignerWithDefaults instantiates a new SubSignatureRequestSigner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubSignatureRequestSignerWithDefaults() *SubSignatureRequestSigner {
	this := SubSignatureRequestSigner{}
	return &this
}

// GetName returns the Name field value
func (o *SubSignatureRequestSigner) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SubSignatureRequestSigner) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SubSignatureRequestSigner) SetName(v string) {
	o.Name = v
}

// GetEmailAddress returns the EmailAddress field value
func (o *SubSignatureRequestSigner) GetEmailAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EmailAddress
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value
// and a boolean to check if the value has been set.
func (o *SubSignatureRequestSigner) GetEmailAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EmailAddress, true
}

// SetEmailAddress sets field value
func (o *SubSignatureRequestSigner) SetEmailAddress(v string) {
	o.EmailAddress = v
}

// GetOrder returns the Order field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubSignatureRequestSigner) GetOrder() int32 {
	if o == nil || IsNil(o.Order.Get()) {
		var ret int32
		return ret
	}
	return *o.Order.Get()
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubSignatureRequestSigner) GetOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Order.Get(), o.Order.IsSet()
}

// HasOrder returns a boolean if a field has been set.
func (o *SubSignatureRequestSigner) HasOrder() bool {
	if o != nil && o.Order.IsSet() {
		return true
	}

	return false
}

// SetOrder gets a reference to the given NullableInt32 and assigns it to the Order field.
func (o *SubSignatureRequestSigner) SetOrder(v int32) {
	o.Order.Set(&v)
}
// SetOrderNil sets the value for Order to be an explicit nil
func (o *SubSignatureRequestSigner) SetOrderNil() {
	o.Order.Set(nil)
}

// UnsetOrder ensures that no value is present for Order, not even an explicit nil
func (o *SubSignatureRequestSigner) UnsetOrder() {
	o.Order.Unset()
}

// GetPin returns the Pin field value if set, zero value otherwise.
func (o *SubSignatureRequestSigner) GetPin() string {
	if o == nil || IsNil(o.Pin) {
		var ret string
		return ret
	}
	return *o.Pin
}

// GetPinOk returns a tuple with the Pin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubSignatureRequestSigner) GetPinOk() (*string, bool) {
	if o == nil || IsNil(o.Pin) {
		return nil, false
	}
	return o.Pin, true
}

// HasPin returns a boolean if a field has been set.
func (o *SubSignatureRequestSigner) HasPin() bool {
	if o != nil && !IsNil(o.Pin) {
		return true
	}

	return false
}

// SetPin gets a reference to the given string and assigns it to the Pin field.
func (o *SubSignatureRequestSigner) SetPin(v string) {
	o.Pin = &v
}

// GetSmsPhoneNumber returns the SmsPhoneNumber field value if set, zero value otherwise.
func (o *SubSignatureRequestSigner) GetSmsPhoneNumber() string {
	if o == nil || IsNil(o.SmsPhoneNumber) {
		var ret string
		return ret
	}
	return *o.SmsPhoneNumber
}

// GetSmsPhoneNumberOk returns a tuple with the SmsPhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubSignatureRequestSigner) GetSmsPhoneNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SmsPhoneNumber) {
		return nil, false
	}
	return o.SmsPhoneNumber, true
}

// HasSmsPhoneNumber returns a boolean if a field has been set.
func (o *SubSignatureRequestSigner) HasSmsPhoneNumber() bool {
	if o != nil && !IsNil(o.SmsPhoneNumber) {
		return true
	}

	return false
}

// SetSmsPhoneNumber gets a reference to the given string and assigns it to the SmsPhoneNumber field.
func (o *SubSignatureRequestSigner) SetSmsPhoneNumber(v string) {
	o.SmsPhoneNumber = &v
}

// GetSmsPhoneNumberType returns the SmsPhoneNumberType field value if set, zero value otherwise.
func (o *SubSignatureRequestSigner) GetSmsPhoneNumberType() string {
	if o == nil || IsNil(o.SmsPhoneNumberType) {
		var ret string
		return ret
	}
	return *o.SmsPhoneNumberType
}

// GetSmsPhoneNumberTypeOk returns a tuple with the SmsPhoneNumberType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubSignatureRequestSigner) GetSmsPhoneNumberTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SmsPhoneNumberType) {
		return nil, false
	}
	return o.SmsPhoneNumberType, true
}

// HasSmsPhoneNumberType returns a boolean if a field has been set.
func (o *SubSignatureRequestSigner) HasSmsPhoneNumberType() bool {
	if o != nil && !IsNil(o.SmsPhoneNumberType) {
		return true
	}

	return false
}

// SetSmsPhoneNumberType gets a reference to the given string and assigns it to the SmsPhoneNumberType field.
func (o *SubSignatureRequestSigner) SetSmsPhoneNumberType(v string) {
	o.SmsPhoneNumberType = &v
}

func (o SubSignatureRequestSigner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubSignatureRequestSigner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["email_address"] = o.EmailAddress
	if o.Order.IsSet() {
		toSerialize["order"] = o.Order.Get()
	}
	if !IsNil(o.Pin) {
		toSerialize["pin"] = o.Pin
	}
	if !IsNil(o.SmsPhoneNumber) {
		toSerialize["sms_phone_number"] = o.SmsPhoneNumber
	}
	if !IsNil(o.SmsPhoneNumberType) {
		toSerialize["sms_phone_number_type"] = o.SmsPhoneNumberType
	}
	return toSerialize, nil
}

func (o *SubSignatureRequestSigner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"email_address",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubSignatureRequestSigner := _SubSignatureRequestSigner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubSignatureRequestSigner)

	if err != nil {
		return err
	}

	*o = SubSignatureRequestSigner(varSubSignatureRequestSigner)

	return err
}

type NullableSubSignatureRequestSigner struct {
	value *SubSignatureRequestSigner
	isSet bool
}

func (v NullableSubSignatureRequestSigner) Get() *SubSignatureRequestSigner {
	return v.value
}

func (v *NullableSubSignatureRequestSigner) Set(val *SubSignatureRequestSigner) {
	v.value = val
	v.isSet = true
}

func (v NullableSubSignatureRequestSigner) IsSet() bool {
	return v.isSet
}

func (v *NullableSubSignatureRequestSigner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubSignatureRequestSigner(val *SubSignatureRequestSigner) *NullableSubSignatureRequestSigner {
	return &NullableSubSignatureRequestSigner{value: val, isSet: true}
}

func (v NullableSubSignatureRequestSigner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubSignatureRequestSigner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


