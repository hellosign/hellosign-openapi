/*
Dropbox Sign API

Dropbox Sign v3 API

API version: 3.0.0
Contact: apisupport@hellosign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dropbox_sign

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ReportCreateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReportCreateRequest{}

// ReportCreateRequest struct for ReportCreateRequest
type ReportCreateRequest struct {
	// The (inclusive) end date for the report data in `MM/DD/YYYY` format.
	EndDate string `json:"end_date"`
	// The type(s) of the report you are requesting. Allowed values are `user_activity` and `document_status`. User activity reports contain list of all users and their activity during the specified date range. Document status report contain a list of signature requests created in the specified time range (and their status).
	ReportType []string `json:"report_type"`
	// The (inclusive) start date for the report data in `MM/DD/YYYY` format.
	StartDate string `json:"start_date"`
}

type _ReportCreateRequest ReportCreateRequest

// NewReportCreateRequest instantiates a new ReportCreateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportCreateRequest(endDate string, reportType []string, startDate string) *ReportCreateRequest {
	this := ReportCreateRequest{}
	this.EndDate = endDate
	this.ReportType = reportType
	this.StartDate = startDate
	return &this
}

// NewReportCreateRequestWithDefaults instantiates a new ReportCreateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportCreateRequestWithDefaults() *ReportCreateRequest {
	this := ReportCreateRequest{}
	return &this
}

// GetEndDate returns the EndDate field value
func (o *ReportCreateRequest) GetEndDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value
// and a boolean to check if the value has been set.
func (o *ReportCreateRequest) GetEndDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndDate, true
}

// SetEndDate sets field value
func (o *ReportCreateRequest) SetEndDate(v string) {
	o.EndDate = v
}

// GetReportType returns the ReportType field value
func (o *ReportCreateRequest) GetReportType() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ReportType
}

// GetReportTypeOk returns a tuple with the ReportType field value
// and a boolean to check if the value has been set.
func (o *ReportCreateRequest) GetReportTypeOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReportType, true
}

// SetReportType sets field value
func (o *ReportCreateRequest) SetReportType(v []string) {
	o.ReportType = v
}

// GetStartDate returns the StartDate field value
func (o *ReportCreateRequest) GetStartDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value
// and a boolean to check if the value has been set.
func (o *ReportCreateRequest) GetStartDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartDate, true
}

// SetStartDate sets field value
func (o *ReportCreateRequest) SetStartDate(v string) {
	o.StartDate = v
}

func (o ReportCreateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReportCreateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["end_date"] = o.EndDate
	toSerialize["report_type"] = o.ReportType
	toSerialize["start_date"] = o.StartDate
	return toSerialize, nil
}

func (o *ReportCreateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"end_date",
		"report_type",
		"start_date",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReportCreateRequest := _ReportCreateRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReportCreateRequest)

	if err != nil {
		return err
	}

	*o = ReportCreateRequest(varReportCreateRequest)

	return err
}

type NullableReportCreateRequest struct {
	value *ReportCreateRequest
	isSet bool
}

func (v NullableReportCreateRequest) Get() *ReportCreateRequest {
	return v.value
}

func (v *NullableReportCreateRequest) Set(val *ReportCreateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReportCreateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReportCreateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportCreateRequest(val *ReportCreateRequest) *NullableReportCreateRequest {
	return &NullableReportCreateRequest{value: val, isSet: true}
}

func (v NullableReportCreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportCreateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


