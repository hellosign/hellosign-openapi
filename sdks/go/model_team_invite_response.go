/*
Dropbox Sign API

Dropbox Sign v3 API

API version: 3.0.0
Contact: apisupport@hellosign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dropbox_sign

import (
	"encoding/json"
)

// checks if the TeamInviteResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TeamInviteResponse{}

// TeamInviteResponse struct for TeamInviteResponse
type TeamInviteResponse struct {
	// Email address of the user invited to this team.
	EmailAddress *string `json:"email_address,omitempty"`
	// Id of the team.
	TeamId *string `json:"team_id,omitempty"`
	// Role of the user invited to this team.
	Role *string `json:"role,omitempty"`
	// Timestamp when the invitation was sent.
	SentAt *int32 `json:"sent_at,omitempty"`
	// Timestamp when the invitation was redeemed.
	RedeemedAt *int32 `json:"redeemed_at,omitempty"`
	// Timestamp when the invitation is expiring.
	ExpiresAt *int32 `json:"expires_at,omitempty"`
}

// NewTeamInviteResponse instantiates a new TeamInviteResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamInviteResponse() *TeamInviteResponse {
	this := TeamInviteResponse{}
	return &this
}

// NewTeamInviteResponseWithDefaults instantiates a new TeamInviteResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamInviteResponseWithDefaults() *TeamInviteResponse {
	this := TeamInviteResponse{}
	return &this
}

// GetEmailAddress returns the EmailAddress field value if set, zero value otherwise.
func (o *TeamInviteResponse) GetEmailAddress() string {
	if o == nil || IsNil(o.EmailAddress) {
		var ret string
		return ret
	}
	return *o.EmailAddress
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamInviteResponse) GetEmailAddressOk() (*string, bool) {
	if o == nil || IsNil(o.EmailAddress) {
		return nil, false
	}
	return o.EmailAddress, true
}

// HasEmailAddress returns a boolean if a field has been set.
func (o *TeamInviteResponse) HasEmailAddress() bool {
	if o != nil && !IsNil(o.EmailAddress) {
		return true
	}

	return false
}

// SetEmailAddress gets a reference to the given string and assigns it to the EmailAddress field.
func (o *TeamInviteResponse) SetEmailAddress(v string) {
	o.EmailAddress = &v
}

// GetTeamId returns the TeamId field value if set, zero value otherwise.
func (o *TeamInviteResponse) GetTeamId() string {
	if o == nil || IsNil(o.TeamId) {
		var ret string
		return ret
	}
	return *o.TeamId
}

// GetTeamIdOk returns a tuple with the TeamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamInviteResponse) GetTeamIdOk() (*string, bool) {
	if o == nil || IsNil(o.TeamId) {
		return nil, false
	}
	return o.TeamId, true
}

// HasTeamId returns a boolean if a field has been set.
func (o *TeamInviteResponse) HasTeamId() bool {
	if o != nil && !IsNil(o.TeamId) {
		return true
	}

	return false
}

// SetTeamId gets a reference to the given string and assigns it to the TeamId field.
func (o *TeamInviteResponse) SetTeamId(v string) {
	o.TeamId = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *TeamInviteResponse) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamInviteResponse) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *TeamInviteResponse) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *TeamInviteResponse) SetRole(v string) {
	o.Role = &v
}

// GetSentAt returns the SentAt field value if set, zero value otherwise.
func (o *TeamInviteResponse) GetSentAt() int32 {
	if o == nil || IsNil(o.SentAt) {
		var ret int32
		return ret
	}
	return *o.SentAt
}

// GetSentAtOk returns a tuple with the SentAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamInviteResponse) GetSentAtOk() (*int32, bool) {
	if o == nil || IsNil(o.SentAt) {
		return nil, false
	}
	return o.SentAt, true
}

// HasSentAt returns a boolean if a field has been set.
func (o *TeamInviteResponse) HasSentAt() bool {
	if o != nil && !IsNil(o.SentAt) {
		return true
	}

	return false
}

// SetSentAt gets a reference to the given int32 and assigns it to the SentAt field.
func (o *TeamInviteResponse) SetSentAt(v int32) {
	o.SentAt = &v
}

// GetRedeemedAt returns the RedeemedAt field value if set, zero value otherwise.
func (o *TeamInviteResponse) GetRedeemedAt() int32 {
	if o == nil || IsNil(o.RedeemedAt) {
		var ret int32
		return ret
	}
	return *o.RedeemedAt
}

// GetRedeemedAtOk returns a tuple with the RedeemedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamInviteResponse) GetRedeemedAtOk() (*int32, bool) {
	if o == nil || IsNil(o.RedeemedAt) {
		return nil, false
	}
	return o.RedeemedAt, true
}

// HasRedeemedAt returns a boolean if a field has been set.
func (o *TeamInviteResponse) HasRedeemedAt() bool {
	if o != nil && !IsNil(o.RedeemedAt) {
		return true
	}

	return false
}

// SetRedeemedAt gets a reference to the given int32 and assigns it to the RedeemedAt field.
func (o *TeamInviteResponse) SetRedeemedAt(v int32) {
	o.RedeemedAt = &v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *TeamInviteResponse) GetExpiresAt() int32 {
	if o == nil || IsNil(o.ExpiresAt) {
		var ret int32
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamInviteResponse) GetExpiresAtOk() (*int32, bool) {
	if o == nil || IsNil(o.ExpiresAt) {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *TeamInviteResponse) HasExpiresAt() bool {
	if o != nil && !IsNil(o.ExpiresAt) {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given int32 and assigns it to the ExpiresAt field.
func (o *TeamInviteResponse) SetExpiresAt(v int32) {
	o.ExpiresAt = &v
}

func (o TeamInviteResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TeamInviteResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EmailAddress) {
		toSerialize["email_address"] = o.EmailAddress
	}
	if !IsNil(o.TeamId) {
		toSerialize["team_id"] = o.TeamId
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.SentAt) {
		toSerialize["sent_at"] = o.SentAt
	}
	if !IsNil(o.RedeemedAt) {
		toSerialize["redeemed_at"] = o.RedeemedAt
	}
	if !IsNil(o.ExpiresAt) {
		toSerialize["expires_at"] = o.ExpiresAt
	}
	return toSerialize, nil
}

type NullableTeamInviteResponse struct {
	value *TeamInviteResponse
	isSet bool
}

func (v NullableTeamInviteResponse) Get() *TeamInviteResponse {
	return v.value
}

func (v *NullableTeamInviteResponse) Set(val *TeamInviteResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamInviteResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamInviteResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamInviteResponse(val *TeamInviteResponse) *NullableTeamInviteResponse {
	return &NullableTeamInviteResponse{value: val, isSet: true}
}

func (v NullableTeamInviteResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamInviteResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


