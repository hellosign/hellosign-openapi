/*
Dropbox Sign API

Dropbox Sign v3 API

API version: 3.0.0
Contact: apisupport@hellosign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dropbox_sign

import (
	"encoding/json"
)

// checks if the TemplateAddUserRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TemplateAddUserRequest{}

// TemplateAddUserRequest struct for TemplateAddUserRequest
type TemplateAddUserRequest struct {
	// The id of the Account to give access to the Template. <b>Note</b> The account id prevails if email address is also provided.
	AccountId *string `json:"account_id,omitempty"`
	// The email address of the Account to give access to the Template. <b>Note</b> The account id prevails if it is also provided.
	EmailAddress *string `json:"email_address,omitempty"`
	// If set to `true`, the user does not receive an email notification when a template has been shared with them. Defaults to `false`.
	SkipNotification *bool `json:"skip_notification,omitempty"`
}

// NewTemplateAddUserRequest instantiates a new TemplateAddUserRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTemplateAddUserRequest() *TemplateAddUserRequest {
	this := TemplateAddUserRequest{}
	var skipNotification bool = false
	this.SkipNotification = &skipNotification
	return &this
}

// NewTemplateAddUserRequestWithDefaults instantiates a new TemplateAddUserRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTemplateAddUserRequestWithDefaults() *TemplateAddUserRequest {
	this := TemplateAddUserRequest{}
	var skipNotification bool = false
	this.SkipNotification = &skipNotification
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *TemplateAddUserRequest) GetAccountId() string {
	if o == nil || IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateAddUserRequest) GetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *TemplateAddUserRequest) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *TemplateAddUserRequest) SetAccountId(v string) {
	o.AccountId = &v
}

// GetEmailAddress returns the EmailAddress field value if set, zero value otherwise.
func (o *TemplateAddUserRequest) GetEmailAddress() string {
	if o == nil || IsNil(o.EmailAddress) {
		var ret string
		return ret
	}
	return *o.EmailAddress
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateAddUserRequest) GetEmailAddressOk() (*string, bool) {
	if o == nil || IsNil(o.EmailAddress) {
		return nil, false
	}
	return o.EmailAddress, true
}

// HasEmailAddress returns a boolean if a field has been set.
func (o *TemplateAddUserRequest) HasEmailAddress() bool {
	if o != nil && !IsNil(o.EmailAddress) {
		return true
	}

	return false
}

// SetEmailAddress gets a reference to the given string and assigns it to the EmailAddress field.
func (o *TemplateAddUserRequest) SetEmailAddress(v string) {
	o.EmailAddress = &v
}

// GetSkipNotification returns the SkipNotification field value if set, zero value otherwise.
func (o *TemplateAddUserRequest) GetSkipNotification() bool {
	if o == nil || IsNil(o.SkipNotification) {
		var ret bool
		return ret
	}
	return *o.SkipNotification
}

// GetSkipNotificationOk returns a tuple with the SkipNotification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateAddUserRequest) GetSkipNotificationOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipNotification) {
		return nil, false
	}
	return o.SkipNotification, true
}

// HasSkipNotification returns a boolean if a field has been set.
func (o *TemplateAddUserRequest) HasSkipNotification() bool {
	if o != nil && !IsNil(o.SkipNotification) {
		return true
	}

	return false
}

// SetSkipNotification gets a reference to the given bool and assigns it to the SkipNotification field.
func (o *TemplateAddUserRequest) SetSkipNotification(v bool) {
	o.SkipNotification = &v
}

func (o TemplateAddUserRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TemplateAddUserRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountId) {
		toSerialize["account_id"] = o.AccountId
	}
	if !IsNil(o.EmailAddress) {
		toSerialize["email_address"] = o.EmailAddress
	}
	if !IsNil(o.SkipNotification) {
		toSerialize["skip_notification"] = o.SkipNotification
	}
	return toSerialize, nil
}

type NullableTemplateAddUserRequest struct {
	value *TemplateAddUserRequest
	isSet bool
}

func (v NullableTemplateAddUserRequest) Get() *TemplateAddUserRequest {
	return v.value
}

func (v *NullableTemplateAddUserRequest) Set(val *TemplateAddUserRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateAddUserRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateAddUserRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateAddUserRequest(val *TemplateAddUserRequest) *NullableTemplateAddUserRequest {
	return &NullableTemplateAddUserRequest{value: val, isSet: true}
}

func (v NullableTemplateAddUserRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateAddUserRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


