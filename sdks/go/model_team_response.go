/*
Dropbox Sign API

Dropbox Sign v3 API

API version: 3.0.0
Contact: apisupport@hellosign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dropbox_sign

import (
	"encoding/json"
)

// checks if the TeamResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TeamResponse{}

// TeamResponse Contains information about your team and its members
type TeamResponse struct {
	// The name of your Team
	Name *string `json:"name,omitempty"`
	Accounts []AccountResponse `json:"accounts,omitempty"`
	// A list of all Accounts that have an outstanding invitation to join your Team. Note that this response is a subset of the response parameters found in `GET /account`.
	InvitedAccounts []AccountResponse `json:"invited_accounts,omitempty"`
	// A list of email addresses that have an outstanding invitation to join your Team and do not yet have a Dropbox Sign account.
	InvitedEmails []string `json:"invited_emails,omitempty"`
}

// NewTeamResponse instantiates a new TeamResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamResponse() *TeamResponse {
	this := TeamResponse{}
	return &this
}

// NewTeamResponseWithDefaults instantiates a new TeamResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamResponseWithDefaults() *TeamResponse {
	this := TeamResponse{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TeamResponse) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamResponse) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TeamResponse) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TeamResponse) SetName(v string) {
	o.Name = &v
}

// GetAccounts returns the Accounts field value if set, zero value otherwise.
func (o *TeamResponse) GetAccounts() []AccountResponse {
	if o == nil || IsNil(o.Accounts) {
		var ret []AccountResponse
		return ret
	}
	return o.Accounts
}

// GetAccountsOk returns a tuple with the Accounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamResponse) GetAccountsOk() ([]AccountResponse, bool) {
	if o == nil || IsNil(o.Accounts) {
		return nil, false
	}
	return o.Accounts, true
}

// HasAccounts returns a boolean if a field has been set.
func (o *TeamResponse) HasAccounts() bool {
	if o != nil && !IsNil(o.Accounts) {
		return true
	}

	return false
}

// SetAccounts gets a reference to the given []AccountResponse and assigns it to the Accounts field.
func (o *TeamResponse) SetAccounts(v []AccountResponse) {
	o.Accounts = v
}

// GetInvitedAccounts returns the InvitedAccounts field value if set, zero value otherwise.
func (o *TeamResponse) GetInvitedAccounts() []AccountResponse {
	if o == nil || IsNil(o.InvitedAccounts) {
		var ret []AccountResponse
		return ret
	}
	return o.InvitedAccounts
}

// GetInvitedAccountsOk returns a tuple with the InvitedAccounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamResponse) GetInvitedAccountsOk() ([]AccountResponse, bool) {
	if o == nil || IsNil(o.InvitedAccounts) {
		return nil, false
	}
	return o.InvitedAccounts, true
}

// HasInvitedAccounts returns a boolean if a field has been set.
func (o *TeamResponse) HasInvitedAccounts() bool {
	if o != nil && !IsNil(o.InvitedAccounts) {
		return true
	}

	return false
}

// SetInvitedAccounts gets a reference to the given []AccountResponse and assigns it to the InvitedAccounts field.
func (o *TeamResponse) SetInvitedAccounts(v []AccountResponse) {
	o.InvitedAccounts = v
}

// GetInvitedEmails returns the InvitedEmails field value if set, zero value otherwise.
func (o *TeamResponse) GetInvitedEmails() []string {
	if o == nil || IsNil(o.InvitedEmails) {
		var ret []string
		return ret
	}
	return o.InvitedEmails
}

// GetInvitedEmailsOk returns a tuple with the InvitedEmails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamResponse) GetInvitedEmailsOk() ([]string, bool) {
	if o == nil || IsNil(o.InvitedEmails) {
		return nil, false
	}
	return o.InvitedEmails, true
}

// HasInvitedEmails returns a boolean if a field has been set.
func (o *TeamResponse) HasInvitedEmails() bool {
	if o != nil && !IsNil(o.InvitedEmails) {
		return true
	}

	return false
}

// SetInvitedEmails gets a reference to the given []string and assigns it to the InvitedEmails field.
func (o *TeamResponse) SetInvitedEmails(v []string) {
	o.InvitedEmails = v
}

func (o TeamResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TeamResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Accounts) {
		toSerialize["accounts"] = o.Accounts
	}
	if !IsNil(o.InvitedAccounts) {
		toSerialize["invited_accounts"] = o.InvitedAccounts
	}
	if !IsNil(o.InvitedEmails) {
		toSerialize["invited_emails"] = o.InvitedEmails
	}
	return toSerialize, nil
}

type NullableTeamResponse struct {
	value *TeamResponse
	isSet bool
}

func (v NullableTeamResponse) Get() *TeamResponse {
	return v.value
}

func (v *NullableTeamResponse) Set(val *TeamResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamResponse(val *TeamResponse) *NullableTeamResponse {
	return &NullableTeamResponse{value: val, isSet: true}
}

func (v NullableTeamResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


