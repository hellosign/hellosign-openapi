/*
Dropbox Sign API

Dropbox Sign v3 API

API version: 3.0.0
Contact: apisupport@hellosign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dropbox_sign

import (
	"encoding/json"
)

// checks if the SubOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubOptions{}

// SubOptions Additional options supported by API App.
type SubOptions struct {
	// Determines if signers can use \"Insert Everywhere\" when signing a document.
	CanInsertEverywhere *bool `json:"can_insert_everywhere,omitempty"`
}

// NewSubOptions instantiates a new SubOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubOptions() *SubOptions {
	this := SubOptions{}
	var canInsertEverywhere bool = false
	this.CanInsertEverywhere = &canInsertEverywhere
	return &this
}

// NewSubOptionsWithDefaults instantiates a new SubOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubOptionsWithDefaults() *SubOptions {
	this := SubOptions{}
	var canInsertEverywhere bool = false
	this.CanInsertEverywhere = &canInsertEverywhere
	return &this
}

// GetCanInsertEverywhere returns the CanInsertEverywhere field value if set, zero value otherwise.
func (o *SubOptions) GetCanInsertEverywhere() bool {
	if o == nil || IsNil(o.CanInsertEverywhere) {
		var ret bool
		return ret
	}
	return *o.CanInsertEverywhere
}

// GetCanInsertEverywhereOk returns a tuple with the CanInsertEverywhere field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubOptions) GetCanInsertEverywhereOk() (*bool, bool) {
	if o == nil || IsNil(o.CanInsertEverywhere) {
		return nil, false
	}
	return o.CanInsertEverywhere, true
}

// HasCanInsertEverywhere returns a boolean if a field has been set.
func (o *SubOptions) HasCanInsertEverywhere() bool {
	if o != nil && !IsNil(o.CanInsertEverywhere) {
		return true
	}

	return false
}

// SetCanInsertEverywhere gets a reference to the given bool and assigns it to the CanInsertEverywhere field.
func (o *SubOptions) SetCanInsertEverywhere(v bool) {
	o.CanInsertEverywhere = &v
}

func (o SubOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CanInsertEverywhere) {
		toSerialize["can_insert_everywhere"] = o.CanInsertEverywhere
	}
	return toSerialize, nil
}

type NullableSubOptions struct {
	value *SubOptions
	isSet bool
}

func (v NullableSubOptions) Get() *SubOptions {
	return v.value
}

func (v *NullableSubOptions) Set(val *SubOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableSubOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableSubOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubOptions(val *SubOptions) *NullableSubOptions {
	return &NullableSubOptions{value: val, isSet: true}
}

func (v NullableSubOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


