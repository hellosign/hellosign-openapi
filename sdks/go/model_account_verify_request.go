/*
Dropbox Sign API

Dropbox Sign v3 API

API version: 3.0.0
Contact: apisupport@hellosign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dropbox_sign

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AccountVerifyRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountVerifyRequest{}

// AccountVerifyRequest struct for AccountVerifyRequest
type AccountVerifyRequest struct {
	// Email address to run the verification for.
	EmailAddress string `json:"email_address"`
}

type _AccountVerifyRequest AccountVerifyRequest

// NewAccountVerifyRequest instantiates a new AccountVerifyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountVerifyRequest(emailAddress string) *AccountVerifyRequest {
	this := AccountVerifyRequest{}
	this.EmailAddress = emailAddress
	return &this
}

// NewAccountVerifyRequestWithDefaults instantiates a new AccountVerifyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountVerifyRequestWithDefaults() *AccountVerifyRequest {
	this := AccountVerifyRequest{}
	return &this
}

// GetEmailAddress returns the EmailAddress field value
func (o *AccountVerifyRequest) GetEmailAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EmailAddress
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value
// and a boolean to check if the value has been set.
func (o *AccountVerifyRequest) GetEmailAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EmailAddress, true
}

// SetEmailAddress sets field value
func (o *AccountVerifyRequest) SetEmailAddress(v string) {
	o.EmailAddress = v
}

func (o AccountVerifyRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountVerifyRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["email_address"] = o.EmailAddress
	return toSerialize, nil
}

func (o *AccountVerifyRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"email_address",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccountVerifyRequest := _AccountVerifyRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAccountVerifyRequest)

	if err != nil {
		return err
	}

	*o = AccountVerifyRequest(varAccountVerifyRequest)

	return err
}

type NullableAccountVerifyRequest struct {
	value *AccountVerifyRequest
	isSet bool
}

func (v NullableAccountVerifyRequest) Get() *AccountVerifyRequest {
	return v.value
}

func (v *NullableAccountVerifyRequest) Set(val *AccountVerifyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountVerifyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountVerifyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountVerifyRequest(val *AccountVerifyRequest) *NullableAccountVerifyRequest {
	return &NullableAccountVerifyRequest{value: val, isSet: true}
}

func (v NullableAccountVerifyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountVerifyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


